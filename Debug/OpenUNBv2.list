
OpenUNBv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007408  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c44  08007c44  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007c44  08007c44  00017c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c4c  08007c4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c4c  08007c4c  00017c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000078  08007ccc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08007ccc  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5a3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002381  00000000  00000000  0002b643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002e428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f7e  00000000  00000000  0002ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0cd  00000000  00000000  00044d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068d29  00000000  00000000  0004eddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7b04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000b7b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074b0 	.word	0x080074b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080074b0 	.word	0x080074b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_ldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d115      	bne.n	8000448 <__aeabi_ldivmod+0x30>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d113      	bne.n	8000448 <__aeabi_ldivmod+0x30>
 8000420:	2900      	cmp	r1, #0
 8000422:	db06      	blt.n	8000432 <__aeabi_ldivmod+0x1a>
 8000424:	dc01      	bgt.n	800042a <__aeabi_ldivmod+0x12>
 8000426:	2800      	cmp	r0, #0
 8000428:	d006      	beq.n	8000438 <__aeabi_ldivmod+0x20>
 800042a:	2000      	movs	r0, #0
 800042c:	43c0      	mvns	r0, r0
 800042e:	0841      	lsrs	r1, r0, #1
 8000430:	e002      	b.n	8000438 <__aeabi_ldivmod+0x20>
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0609      	lsls	r1, r1, #24
 8000436:	2000      	movs	r0, #0
 8000438:	b407      	push	{r0, r1, r2}
 800043a:	4802      	ldr	r0, [pc, #8]	; (8000444 <__aeabi_ldivmod+0x2c>)
 800043c:	a101      	add	r1, pc, #4	; (adr r1, 8000444 <__aeabi_ldivmod+0x2c>)
 800043e:	1840      	adds	r0, r0, r1
 8000440:	9002      	str	r0, [sp, #8]
 8000442:	bd03      	pop	{r0, r1, pc}
 8000444:	ffffffd1 	.word	0xffffffd1
 8000448:	b403      	push	{r0, r1}
 800044a:	4668      	mov	r0, sp
 800044c:	b501      	push	{r0, lr}
 800044e:	9802      	ldr	r0, [sp, #8]
 8000450:	f000 f91a 	bl	8000688 <__gnu_ldivmod_helper>
 8000454:	9b01      	ldr	r3, [sp, #4]
 8000456:	469e      	mov	lr, r3
 8000458:	b002      	add	sp, #8
 800045a:	bc0c      	pop	{r2, r3}
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_uldivmod>:
 8000460:	2b00      	cmp	r3, #0
 8000462:	d111      	bne.n	8000488 <__aeabi_uldivmod+0x28>
 8000464:	2a00      	cmp	r2, #0
 8000466:	d10f      	bne.n	8000488 <__aeabi_uldivmod+0x28>
 8000468:	2900      	cmp	r1, #0
 800046a:	d100      	bne.n	800046e <__aeabi_uldivmod+0xe>
 800046c:	2800      	cmp	r0, #0
 800046e:	d002      	beq.n	8000476 <__aeabi_uldivmod+0x16>
 8000470:	2100      	movs	r1, #0
 8000472:	43c9      	mvns	r1, r1
 8000474:	1c08      	adds	r0, r1, #0
 8000476:	b407      	push	{r0, r1, r2}
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <__aeabi_uldivmod+0x24>)
 800047a:	a102      	add	r1, pc, #8	; (adr r1, 8000484 <__aeabi_uldivmod+0x24>)
 800047c:	1840      	adds	r0, r0, r1
 800047e:	9002      	str	r0, [sp, #8]
 8000480:	bd03      	pop	{r0, r1, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	ffffff91 	.word	0xffffff91
 8000488:	b403      	push	{r0, r1}
 800048a:	4668      	mov	r0, sp
 800048c:	b501      	push	{r0, lr}
 800048e:	9802      	ldr	r0, [sp, #8]
 8000490:	f000 f82e 	bl	80004f0 <__udivmoddi4>
 8000494:	9b01      	ldr	r3, [sp, #4]
 8000496:	469e      	mov	lr, r3
 8000498:	b002      	add	sp, #8
 800049a:	bc0c      	pop	{r2, r3}
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_lmul>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	0415      	lsls	r5, r2, #16
 80004a4:	0c2d      	lsrs	r5, r5, #16
 80004a6:	000f      	movs	r7, r1
 80004a8:	0001      	movs	r1, r0
 80004aa:	002e      	movs	r6, r5
 80004ac:	46c6      	mov	lr, r8
 80004ae:	4684      	mov	ip, r0
 80004b0:	0400      	lsls	r0, r0, #16
 80004b2:	0c14      	lsrs	r4, r2, #16
 80004b4:	0c00      	lsrs	r0, r0, #16
 80004b6:	0c09      	lsrs	r1, r1, #16
 80004b8:	4346      	muls	r6, r0
 80004ba:	434d      	muls	r5, r1
 80004bc:	4360      	muls	r0, r4
 80004be:	4361      	muls	r1, r4
 80004c0:	1940      	adds	r0, r0, r5
 80004c2:	0c34      	lsrs	r4, r6, #16
 80004c4:	1824      	adds	r4, r4, r0
 80004c6:	b500      	push	{lr}
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	d903      	bls.n	80004d4 <__aeabi_lmul+0x34>
 80004cc:	2080      	movs	r0, #128	; 0x80
 80004ce:	0240      	lsls	r0, r0, #9
 80004d0:	4680      	mov	r8, r0
 80004d2:	4441      	add	r1, r8
 80004d4:	0c25      	lsrs	r5, r4, #16
 80004d6:	186d      	adds	r5, r5, r1
 80004d8:	4661      	mov	r1, ip
 80004da:	4359      	muls	r1, r3
 80004dc:	437a      	muls	r2, r7
 80004de:	0430      	lsls	r0, r6, #16
 80004e0:	1949      	adds	r1, r1, r5
 80004e2:	0424      	lsls	r4, r4, #16
 80004e4:	0c00      	lsrs	r0, r0, #16
 80004e6:	1820      	adds	r0, r4, r0
 80004e8:	1889      	adds	r1, r1, r2
 80004ea:	bc80      	pop	{r7}
 80004ec:	46b8      	mov	r8, r7
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004f0 <__udivmoddi4>:
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	4657      	mov	r7, sl
 80004f4:	464e      	mov	r6, r9
 80004f6:	4645      	mov	r5, r8
 80004f8:	46de      	mov	lr, fp
 80004fa:	b5e0      	push	{r5, r6, r7, lr}
 80004fc:	0004      	movs	r4, r0
 80004fe:	000d      	movs	r5, r1
 8000500:	4692      	mov	sl, r2
 8000502:	4699      	mov	r9, r3
 8000504:	b083      	sub	sp, #12
 8000506:	428b      	cmp	r3, r1
 8000508:	d830      	bhi.n	800056c <__udivmoddi4+0x7c>
 800050a:	d02d      	beq.n	8000568 <__udivmoddi4+0x78>
 800050c:	4649      	mov	r1, r9
 800050e:	4650      	mov	r0, sl
 8000510:	f000 f8d8 	bl	80006c4 <__clzdi2>
 8000514:	0029      	movs	r1, r5
 8000516:	0006      	movs	r6, r0
 8000518:	0020      	movs	r0, r4
 800051a:	f000 f8d3 	bl	80006c4 <__clzdi2>
 800051e:	1a33      	subs	r3, r6, r0
 8000520:	4698      	mov	r8, r3
 8000522:	3b20      	subs	r3, #32
 8000524:	469b      	mov	fp, r3
 8000526:	d433      	bmi.n	8000590 <__udivmoddi4+0xa0>
 8000528:	465a      	mov	r2, fp
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	4642      	mov	r2, r8
 8000530:	001f      	movs	r7, r3
 8000532:	4653      	mov	r3, sl
 8000534:	4093      	lsls	r3, r2
 8000536:	001e      	movs	r6, r3
 8000538:	42af      	cmp	r7, r5
 800053a:	d83a      	bhi.n	80005b2 <__udivmoddi4+0xc2>
 800053c:	42af      	cmp	r7, r5
 800053e:	d100      	bne.n	8000542 <__udivmoddi4+0x52>
 8000540:	e078      	b.n	8000634 <__udivmoddi4+0x144>
 8000542:	465b      	mov	r3, fp
 8000544:	1ba4      	subs	r4, r4, r6
 8000546:	41bd      	sbcs	r5, r7
 8000548:	2b00      	cmp	r3, #0
 800054a:	da00      	bge.n	800054e <__udivmoddi4+0x5e>
 800054c:	e075      	b.n	800063a <__udivmoddi4+0x14a>
 800054e:	2200      	movs	r2, #0
 8000550:	2300      	movs	r3, #0
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	465a      	mov	r2, fp
 800055a:	4093      	lsls	r3, r2
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	4642      	mov	r2, r8
 8000562:	4093      	lsls	r3, r2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	e028      	b.n	80005ba <__udivmoddi4+0xca>
 8000568:	4282      	cmp	r2, r0
 800056a:	d9cf      	bls.n	800050c <__udivmoddi4+0x1c>
 800056c:	2200      	movs	r2, #0
 800056e:	2300      	movs	r3, #0
 8000570:	9200      	str	r2, [sp, #0]
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <__udivmoddi4+0x8e>
 800057a:	601c      	str	r4, [r3, #0]
 800057c:	605d      	str	r5, [r3, #4]
 800057e:	9800      	ldr	r0, [sp, #0]
 8000580:	9901      	ldr	r1, [sp, #4]
 8000582:	b003      	add	sp, #12
 8000584:	bcf0      	pop	{r4, r5, r6, r7}
 8000586:	46bb      	mov	fp, r7
 8000588:	46b2      	mov	sl, r6
 800058a:	46a9      	mov	r9, r5
 800058c:	46a0      	mov	r8, r4
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	4652      	mov	r2, sl
 8000598:	40da      	lsrs	r2, r3
 800059a:	4641      	mov	r1, r8
 800059c:	0013      	movs	r3, r2
 800059e:	464a      	mov	r2, r9
 80005a0:	408a      	lsls	r2, r1
 80005a2:	0017      	movs	r7, r2
 80005a4:	4642      	mov	r2, r8
 80005a6:	431f      	orrs	r7, r3
 80005a8:	4653      	mov	r3, sl
 80005aa:	4093      	lsls	r3, r2
 80005ac:	001e      	movs	r6, r3
 80005ae:	42af      	cmp	r7, r5
 80005b0:	d9c4      	bls.n	800053c <__udivmoddi4+0x4c>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	4643      	mov	r3, r8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0d9      	beq.n	8000574 <__udivmoddi4+0x84>
 80005c0:	07fb      	lsls	r3, r7, #31
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4646      	mov	r6, r8
 80005c8:	087b      	lsrs	r3, r7, #1
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xfa>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xe4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xfe>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0x108>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xdc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xfa>
 80005f8:	9800      	ldr	r0, [sp, #0]
 80005fa:	9901      	ldr	r1, [sp, #4]
 80005fc:	465b      	mov	r3, fp
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db24      	blt.n	8000650 <__udivmoddi4+0x160>
 8000606:	002b      	movs	r3, r5
 8000608:	465a      	mov	r2, fp
 800060a:	4644      	mov	r4, r8
 800060c:	40d3      	lsrs	r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	465b      	mov	r3, fp
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2a      	blt.n	8000672 <__udivmoddi4+0x182>
 800061c:	0026      	movs	r6, r4
 800061e:	409e      	lsls	r6, r3
 8000620:	0033      	movs	r3, r6
 8000622:	0026      	movs	r6, r4
 8000624:	4647      	mov	r7, r8
 8000626:	40be      	lsls	r6, r7
 8000628:	0032      	movs	r2, r6
 800062a:	1a80      	subs	r0, r0, r2
 800062c:	4199      	sbcs	r1, r3
 800062e:	9000      	str	r0, [sp, #0]
 8000630:	9101      	str	r1, [sp, #4]
 8000632:	e79f      	b.n	8000574 <__udivmoddi4+0x84>
 8000634:	42a3      	cmp	r3, r4
 8000636:	d8bc      	bhi.n	80005b2 <__udivmoddi4+0xc2>
 8000638:	e783      	b.n	8000542 <__udivmoddi4+0x52>
 800063a:	4642      	mov	r2, r8
 800063c:	2320      	movs	r3, #32
 800063e:	2100      	movs	r1, #0
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	2200      	movs	r2, #0
 8000644:	9100      	str	r1, [sp, #0]
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	2201      	movs	r2, #1
 800064a:	40da      	lsrs	r2, r3
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	e786      	b.n	800055e <__udivmoddi4+0x6e>
 8000650:	4642      	mov	r2, r8
 8000652:	2320      	movs	r3, #32
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	4646      	mov	r6, r8
 800065a:	409a      	lsls	r2, r3
 800065c:	0023      	movs	r3, r4
 800065e:	40f3      	lsrs	r3, r6
 8000660:	4644      	mov	r4, r8
 8000662:	4313      	orrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	dad4      	bge.n	800061c <__udivmoddi4+0x12c>
 8000672:	4642      	mov	r2, r8
 8000674:	002f      	movs	r7, r5
 8000676:	2320      	movs	r3, #32
 8000678:	0026      	movs	r6, r4
 800067a:	4097      	lsls	r7, r2
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	40de      	lsrs	r6, r3
 8000680:	003b      	movs	r3, r7
 8000682:	4333      	orrs	r3, r6
 8000684:	e7cd      	b.n	8000622 <__udivmoddi4+0x132>
 8000686:	46c0      	nop			; (mov r8, r8)

08000688 <__gnu_ldivmod_helper>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	46ce      	mov	lr, r9
 800068c:	4647      	mov	r7, r8
 800068e:	b580      	push	{r7, lr}
 8000690:	4691      	mov	r9, r2
 8000692:	4698      	mov	r8, r3
 8000694:	0004      	movs	r4, r0
 8000696:	000d      	movs	r5, r1
 8000698:	f000 f820 	bl	80006dc <__divdi3>
 800069c:	0007      	movs	r7, r0
 800069e:	000e      	movs	r6, r1
 80006a0:	0002      	movs	r2, r0
 80006a2:	000b      	movs	r3, r1
 80006a4:	4648      	mov	r0, r9
 80006a6:	4641      	mov	r1, r8
 80006a8:	f7ff fefa 	bl	80004a0 <__aeabi_lmul>
 80006ac:	1a24      	subs	r4, r4, r0
 80006ae:	418d      	sbcs	r5, r1
 80006b0:	9b08      	ldr	r3, [sp, #32]
 80006b2:	0038      	movs	r0, r7
 80006b4:	0031      	movs	r1, r6
 80006b6:	601c      	str	r4, [r3, #0]
 80006b8:	605d      	str	r5, [r3, #4]
 80006ba:	bcc0      	pop	{r6, r7}
 80006bc:	46b9      	mov	r9, r7
 80006be:	46b0      	mov	r8, r6
 80006c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)

080006c4 <__clzdi2>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	2900      	cmp	r1, #0
 80006c8:	d103      	bne.n	80006d2 <__clzdi2+0xe>
 80006ca:	f000 f8ed 	bl	80008a8 <__clzsi2>
 80006ce:	3020      	adds	r0, #32
 80006d0:	e002      	b.n	80006d8 <__clzdi2+0x14>
 80006d2:	1c08      	adds	r0, r1, #0
 80006d4:	f000 f8e8 	bl	80008a8 <__clzsi2>
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__divdi3>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	4657      	mov	r7, sl
 80006e0:	464e      	mov	r6, r9
 80006e2:	4645      	mov	r5, r8
 80006e4:	46de      	mov	lr, fp
 80006e6:	b5e0      	push	{r5, r6, r7, lr}
 80006e8:	000f      	movs	r7, r1
 80006ea:	0019      	movs	r1, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	0006      	movs	r6, r0
 80006f0:	4698      	mov	r8, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	b083      	sub	sp, #12
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	da07      	bge.n	800070a <__divdi3+0x2e>
 80006fa:	0033      	movs	r3, r6
 80006fc:	003c      	movs	r4, r7
 80006fe:	2700      	movs	r7, #0
 8000700:	425e      	negs	r6, r3
 8000702:	41a7      	sbcs	r7, r4
 8000704:	2301      	movs	r3, #1
 8000706:	425b      	negs	r3, r3
 8000708:	4698      	mov	r8, r3
 800070a:	2900      	cmp	r1, #0
 800070c:	da07      	bge.n	800071e <__divdi3+0x42>
 800070e:	4643      	mov	r3, r8
 8000710:	43db      	mvns	r3, r3
 8000712:	000c      	movs	r4, r1
 8000714:	4698      	mov	r8, r3
 8000716:	0003      	movs	r3, r0
 8000718:	2100      	movs	r1, #0
 800071a:	4258      	negs	r0, r3
 800071c:	41a1      	sbcs	r1, r4
 800071e:	0034      	movs	r4, r6
 8000720:	003d      	movs	r5, r7
 8000722:	4682      	mov	sl, r0
 8000724:	4689      	mov	r9, r1
 8000726:	42b9      	cmp	r1, r7
 8000728:	d86a      	bhi.n	8000800 <__divdi3+0x124>
 800072a:	d067      	beq.n	80007fc <__divdi3+0x120>
 800072c:	4649      	mov	r1, r9
 800072e:	4650      	mov	r0, sl
 8000730:	f7ff ffc8 	bl	80006c4 <__clzdi2>
 8000734:	4683      	mov	fp, r0
 8000736:	0039      	movs	r1, r7
 8000738:	0030      	movs	r0, r6
 800073a:	f7ff ffc3 	bl	80006c4 <__clzdi2>
 800073e:	465b      	mov	r3, fp
 8000740:	1a1b      	subs	r3, r3, r0
 8000742:	469c      	mov	ip, r3
 8000744:	3b20      	subs	r3, #32
 8000746:	469b      	mov	fp, r3
 8000748:	d46b      	bmi.n	8000822 <__divdi3+0x146>
 800074a:	4658      	mov	r0, fp
 800074c:	4651      	mov	r1, sl
 800074e:	4081      	lsls	r1, r0
 8000750:	4660      	mov	r0, ip
 8000752:	000b      	movs	r3, r1
 8000754:	4651      	mov	r1, sl
 8000756:	4081      	lsls	r1, r0
 8000758:	000a      	movs	r2, r1
 800075a:	42bb      	cmp	r3, r7
 800075c:	d900      	bls.n	8000760 <__divdi3+0x84>
 800075e:	e072      	b.n	8000846 <__divdi3+0x16a>
 8000760:	42bb      	cmp	r3, r7
 8000762:	d100      	bne.n	8000766 <__divdi3+0x8a>
 8000764:	e079      	b.n	800085a <__divdi3+0x17e>
 8000766:	0034      	movs	r4, r6
 8000768:	003d      	movs	r5, r7
 800076a:	4659      	mov	r1, fp
 800076c:	1aa4      	subs	r4, r4, r2
 800076e:	419d      	sbcs	r5, r3
 8000770:	2900      	cmp	r1, #0
 8000772:	da00      	bge.n	8000776 <__divdi3+0x9a>
 8000774:	e074      	b.n	8000860 <__divdi3+0x184>
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	2601      	movs	r6, #1
 800077c:	9000      	str	r0, [sp, #0]
 800077e:	9101      	str	r1, [sp, #4]
 8000780:	4659      	mov	r1, fp
 8000782:	408e      	lsls	r6, r1
 8000784:	9601      	str	r6, [sp, #4]
 8000786:	4661      	mov	r1, ip
 8000788:	2601      	movs	r6, #1
 800078a:	408e      	lsls	r6, r1
 800078c:	4661      	mov	r1, ip
 800078e:	9600      	str	r6, [sp, #0]
 8000790:	2900      	cmp	r1, #0
 8000792:	d05f      	beq.n	8000854 <__divdi3+0x178>
 8000794:	07d9      	lsls	r1, r3, #31
 8000796:	0856      	lsrs	r6, r2, #1
 8000798:	430e      	orrs	r6, r1
 800079a:	085f      	lsrs	r7, r3, #1
 800079c:	4661      	mov	r1, ip
 800079e:	2201      	movs	r2, #1
 80007a0:	2300      	movs	r3, #0
 80007a2:	e00c      	b.n	80007be <__divdi3+0xe2>
 80007a4:	42af      	cmp	r7, r5
 80007a6:	d101      	bne.n	80007ac <__divdi3+0xd0>
 80007a8:	42a6      	cmp	r6, r4
 80007aa:	d80a      	bhi.n	80007c2 <__divdi3+0xe6>
 80007ac:	1ba4      	subs	r4, r4, r6
 80007ae:	41bd      	sbcs	r5, r7
 80007b0:	1924      	adds	r4, r4, r4
 80007b2:	416d      	adcs	r5, r5
 80007b4:	3901      	subs	r1, #1
 80007b6:	18a4      	adds	r4, r4, r2
 80007b8:	415d      	adcs	r5, r3
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d006      	beq.n	80007cc <__divdi3+0xf0>
 80007be:	42af      	cmp	r7, r5
 80007c0:	d9f0      	bls.n	80007a4 <__divdi3+0xc8>
 80007c2:	3901      	subs	r1, #1
 80007c4:	1924      	adds	r4, r4, r4
 80007c6:	416d      	adcs	r5, r5
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d1f8      	bne.n	80007be <__divdi3+0xe2>
 80007cc:	9800      	ldr	r0, [sp, #0]
 80007ce:	9901      	ldr	r1, [sp, #4]
 80007d0:	465b      	mov	r3, fp
 80007d2:	1900      	adds	r0, r0, r4
 80007d4:	4169      	adcs	r1, r5
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db4d      	blt.n	8000876 <__divdi3+0x19a>
 80007da:	002e      	movs	r6, r5
 80007dc:	002c      	movs	r4, r5
 80007de:	40de      	lsrs	r6, r3
 80007e0:	4663      	mov	r3, ip
 80007e2:	40dc      	lsrs	r4, r3
 80007e4:	465b      	mov	r3, fp
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db55      	blt.n	8000896 <__divdi3+0x1ba>
 80007ea:	0034      	movs	r4, r6
 80007ec:	409c      	lsls	r4, r3
 80007ee:	0023      	movs	r3, r4
 80007f0:	4664      	mov	r4, ip
 80007f2:	40a6      	lsls	r6, r4
 80007f4:	0032      	movs	r2, r6
 80007f6:	1a80      	subs	r0, r0, r2
 80007f8:	4199      	sbcs	r1, r3
 80007fa:	e003      	b.n	8000804 <__divdi3+0x128>
 80007fc:	42b0      	cmp	r0, r6
 80007fe:	d995      	bls.n	800072c <__divdi3+0x50>
 8000800:	2000      	movs	r0, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4643      	mov	r3, r8
 8000806:	2b00      	cmp	r3, #0
 8000808:	d004      	beq.n	8000814 <__divdi3+0x138>
 800080a:	0003      	movs	r3, r0
 800080c:	000c      	movs	r4, r1
 800080e:	2100      	movs	r1, #0
 8000810:	4258      	negs	r0, r3
 8000812:	41a1      	sbcs	r1, r4
 8000814:	b003      	add	sp, #12
 8000816:	bcf0      	pop	{r4, r5, r6, r7}
 8000818:	46bb      	mov	fp, r7
 800081a:	46b2      	mov	sl, r6
 800081c:	46a9      	mov	r9, r5
 800081e:	46a0      	mov	r8, r4
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	4662      	mov	r2, ip
 8000824:	4648      	mov	r0, r9
 8000826:	2320      	movs	r3, #32
 8000828:	4651      	mov	r1, sl
 800082a:	4090      	lsls	r0, r2
 800082c:	1a9b      	subs	r3, r3, r2
 800082e:	40d9      	lsrs	r1, r3
 8000830:	0003      	movs	r3, r0
 8000832:	9100      	str	r1, [sp, #0]
 8000834:	9900      	ldr	r1, [sp, #0]
 8000836:	4660      	mov	r0, ip
 8000838:	430b      	orrs	r3, r1
 800083a:	4651      	mov	r1, sl
 800083c:	4081      	lsls	r1, r0
 800083e:	000a      	movs	r2, r1
 8000840:	42bb      	cmp	r3, r7
 8000842:	d800      	bhi.n	8000846 <__divdi3+0x16a>
 8000844:	e78c      	b.n	8000760 <__divdi3+0x84>
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	9000      	str	r0, [sp, #0]
 800084c:	9101      	str	r1, [sp, #4]
 800084e:	4661      	mov	r1, ip
 8000850:	2900      	cmp	r1, #0
 8000852:	d19f      	bne.n	8000794 <__divdi3+0xb8>
 8000854:	9800      	ldr	r0, [sp, #0]
 8000856:	9901      	ldr	r1, [sp, #4]
 8000858:	e7d4      	b.n	8000804 <__divdi3+0x128>
 800085a:	42b1      	cmp	r1, r6
 800085c:	d8f3      	bhi.n	8000846 <__divdi3+0x16a>
 800085e:	e782      	b.n	8000766 <__divdi3+0x8a>
 8000860:	4661      	mov	r1, ip
 8000862:	2620      	movs	r6, #32
 8000864:	2701      	movs	r7, #1
 8000866:	1a76      	subs	r6, r6, r1
 8000868:	2000      	movs	r0, #0
 800086a:	2100      	movs	r1, #0
 800086c:	40f7      	lsrs	r7, r6
 800086e:	9000      	str	r0, [sp, #0]
 8000870:	9101      	str	r1, [sp, #4]
 8000872:	9701      	str	r7, [sp, #4]
 8000874:	e787      	b.n	8000786 <__divdi3+0xaa>
 8000876:	4662      	mov	r2, ip
 8000878:	2320      	movs	r3, #32
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	002a      	movs	r2, r5
 800087e:	409a      	lsls	r2, r3
 8000880:	0026      	movs	r6, r4
 8000882:	0013      	movs	r3, r2
 8000884:	4662      	mov	r2, ip
 8000886:	40d6      	lsrs	r6, r2
 8000888:	002c      	movs	r4, r5
 800088a:	431e      	orrs	r6, r3
 800088c:	4663      	mov	r3, ip
 800088e:	40dc      	lsrs	r4, r3
 8000890:	465b      	mov	r3, fp
 8000892:	2b00      	cmp	r3, #0
 8000894:	daa9      	bge.n	80007ea <__divdi3+0x10e>
 8000896:	4662      	mov	r2, ip
 8000898:	2320      	movs	r3, #32
 800089a:	0035      	movs	r5, r6
 800089c:	4094      	lsls	r4, r2
 800089e:	1a9b      	subs	r3, r3, r2
 80008a0:	40dd      	lsrs	r5, r3
 80008a2:	0023      	movs	r3, r4
 80008a4:	432b      	orrs	r3, r5
 80008a6:	e7a3      	b.n	80007f0 <__divdi3+0x114>

080008a8 <__clzsi2>:
 80008a8:	211c      	movs	r1, #28
 80008aa:	2301      	movs	r3, #1
 80008ac:	041b      	lsls	r3, r3, #16
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d301      	bcc.n	80008b6 <__clzsi2+0xe>
 80008b2:	0c00      	lsrs	r0, r0, #16
 80008b4:	3910      	subs	r1, #16
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d301      	bcc.n	80008c0 <__clzsi2+0x18>
 80008bc:	0a00      	lsrs	r0, r0, #8
 80008be:	3908      	subs	r1, #8
 80008c0:	091b      	lsrs	r3, r3, #4
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d301      	bcc.n	80008ca <__clzsi2+0x22>
 80008c6:	0900      	lsrs	r0, r0, #4
 80008c8:	3904      	subs	r1, #4
 80008ca:	a202      	add	r2, pc, #8	; (adr r2, 80008d4 <__clzsi2+0x2c>)
 80008cc:	5c10      	ldrb	r0, [r2, r0]
 80008ce:	1840      	adds	r0, r0, r1
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	02020304 	.word	0x02020304
 80008d8:	01010101 	.word	0x01010101
	...

080008e4 <AX5243_u_delay>:
uint32_t def_f_carrier = default_f_carrier;
uint32_t f_carrier_calibration = 1638;



void AX5243_u_delay(uint16_t delay){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	0002      	movs	r2, r0
 80008ec:	1dbb      	adds	r3, r7, #6
 80008ee:	801a      	strh	r2, [r3, #0]
	((AX5243_used_TIM->CNT) = (0));
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <AX5243_u_delay+0x2c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <AX5243_u_delay+0x2c>)
 80008fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d3f9      	bcc.n	80008f8 <AX5243_u_delay+0x14>
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40000400 	.word	0x40000400

08000914 <DbmToa1>:



uint32_t DbmToa1(uint8_t Dbm){
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	b090      	sub	sp, #64	; 0x40
 8000918:	af00      	add	r7, sp, #0
 800091a:	0002      	movs	r2, r0
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	701a      	strb	r2, [r3, #0]
uint32_t a;
uint32_t a_table[] = {97, 110, 124, 134, 153, 175, 210, 242, 275, 345, 410, 530};
 8000920:	210c      	movs	r1, #12
 8000922:	187b      	adds	r3, r7, r1
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <DbmToa1+0x4c>)
 8000926:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000928:	c331      	stmia	r3!, {r0, r4, r5}
 800092a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800092c:	c331      	stmia	r3!, {r0, r4, r5}
 800092e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000930:	c331      	stmia	r3!, {r0, r4, r5}
 8000932:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000934:	c331      	stmia	r3!, {r0, r4, r5}
if(Dbm < 12){
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b0b      	cmp	r3, #11
 800093c:	d806      	bhi.n	800094c <DbmToa1+0x38>
a = a_table[Dbm];
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	187b      	adds	r3, r7, r1
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	58d3      	ldr	r3, [r2, r3]
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800094a:	e003      	b.n	8000954 <DbmToa1+0x40>
}
else{
a = a_table[11];
 800094c:	230c      	movs	r3, #12
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
}
return a;
 8000954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b010      	add	sp, #64	; 0x40
 800095c:	bdb0      	pop	{r4, r5, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	080074c8 	.word	0x080074c8

08000964 <SPI_TR_24>:

void SPI_TR_24(uint16_t addr, uint8_t data)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	0002      	movs	r2, r0
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	1d7b      	adds	r3, r7, #5
 8000972:	1c0a      	adds	r2, r1, #0
 8000974:	701a      	strb	r2, [r3, #0]

	  AX5243_SS_PORT->BRR = (1<<AX5243_SS_PIN);
 8000976:	2390      	movs	r3, #144	; 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
	  uint8_t bit;
	  uint32_t tr_data;
	  uint8_t rw = 15;
 8000980:	2115      	movs	r1, #21
 8000982:	187b      	adds	r3, r7, r1
 8000984:	220f      	movs	r2, #15
 8000986:	701a      	strb	r2, [r3, #0]
	  tr_data = data + (addr<<8) + (rw<<20);
 8000988:	1d7b      	adds	r3, r7, #5
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	1dbb      	adds	r3, r7, #6
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	18d2      	adds	r2, r2, r3
 8000994:	187b      	adds	r3, r7, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	051b      	lsls	r3, r3, #20
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	613b      	str	r3, [r7, #16]
    for(int16_t i = 23; i >= 0; i--)
 800099e:	2316      	movs	r3, #22
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2217      	movs	r2, #23
 80009a4:	801a      	strh	r2, [r3, #0]
 80009a6:	e02e      	b.n	8000a06 <SPI_TR_24+0xa2>
	{
		bit = (tr_data >>i) & 1;
 80009a8:	2316      	movs	r3, #22
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	5e9b      	ldrsh	r3, [r3, r2]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	40da      	lsrs	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	200f      	movs	r0, #15
 80009ba:	183b      	adds	r3, r7, r0
 80009bc:	2101      	movs	r1, #1
 80009be:	400a      	ands	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <SPI_TR_24+0xc8>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
		if(bit)
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <SPI_TR_24+0x76>
		{
	    AX5243_MOSI_PORT->BSRR = (1<<AX5243_MOSI_PIN);
 80009d0:	2390      	movs	r3, #144	; 0x90
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2240      	movs	r2, #64	; 0x40
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	e003      	b.n	80009e2 <SPI_TR_24+0x7e>
		}
		else
		{
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 80009da:	2390      	movs	r3, #144	; 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		AX5243_u_delay(AX5243_delay);
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff ff7e 	bl	80008e4 <AX5243_u_delay>
		AX5243_CLK_PORT->BSRR = (1<<AX5243_CLK_PIN);
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <SPI_TR_24+0xc8>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	619a      	str	r2, [r3, #24]
		AX5243_u_delay(AX5243_delay);
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff ff78 	bl	80008e4 <AX5243_u_delay>
    for(int16_t i = 23; i >= 0; i--)
 80009f4:	2116      	movs	r1, #22
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	5e9b      	ldrsh	r3, [r3, r2]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	801a      	strh	r2, [r3, #0]
 8000a06:	2316      	movs	r3, #22
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	5e9b      	ldrsh	r3, [r3, r2]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	daca      	bge.n	80009a8 <SPI_TR_24+0x44>
	}
      AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SPI_TR_24+0xc8>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
      AX5243_SS_PORT->BSRR = (1<<AX5243_SS_PIN);
 8000a18:	2390      	movs	r3, #144	; 0x90
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	619a      	str	r2, [r3, #24]
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b006      	add	sp, #24
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	48000400 	.word	0x48000400

08000a30 <SPI_TR_16>:

void SPI_TR_16(uint8_t addr, uint8_t data)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	1dbb      	adds	r3, r7, #6
 8000a3e:	1c0a      	adds	r2, r1, #0
 8000a40:	701a      	strb	r2, [r3, #0]
	  AX5243_SS_PORT->BRR = (1<<AX5243_SS_PIN);
 8000a42:	2390      	movs	r3, #144	; 0x90
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	  uint8_t bit;
	  uint16_t tr_data;
	  uint8_t rw = 1;
 8000a4c:	200d      	movs	r0, #13
 8000a4e:	183b      	adds	r3, r7, r0
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
	  tr_data = data + (addr<<8) + (rw<<15);
 8000a54:	1dbb      	adds	r3, r7, #6
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	b299      	uxth	r1, r3
 8000a68:	183b      	adds	r3, r7, r0
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	03db      	lsls	r3, r3, #15
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	230a      	movs	r3, #10
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	188a      	adds	r2, r1, r2
 8000a78:	801a      	strh	r2, [r3, #0]
    for(int16_t i = 15; i >= 0; i--)
 8000a7a:	230e      	movs	r3, #14
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	220f      	movs	r2, #15
 8000a80:	801a      	strh	r2, [r3, #0]
 8000a82:	e030      	b.n	8000ae6 <SPI_TR_16+0xb6>
	{
		bit = (tr_data >>i) & 1;
 8000a84:	230a      	movs	r3, #10
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	230e      	movs	r3, #14
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	5e5b      	ldrsh	r3, [r3, r1]
 8000a92:	411a      	asrs	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	2009      	movs	r0, #9
 8000a9a:	183b      	adds	r3, r7, r0
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <SPI_TR_16+0xdc>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
		if(bit)
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <SPI_TR_16+0x8a>
		{
		AX5243_MOSI_PORT->BSRR = (1<<AX5243_MOSI_PIN);
 8000ab0:	2390      	movs	r3, #144	; 0x90
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2240      	movs	r2, #64	; 0x40
 8000ab6:	619a      	str	r2, [r3, #24]
 8000ab8:	e003      	b.n	8000ac2 <SPI_TR_16+0x92>
		}
		else
		{
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 8000aba:	2390      	movs	r3, #144	; 0x90
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		AX5243_u_delay(AX5243_delay);
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff ff0e 	bl	80008e4 <AX5243_u_delay>
		AX5243_CLK_PORT->BSRR = (1<<AX5243_CLK_PIN);
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SPI_TR_16+0xdc>)
 8000aca:	2202      	movs	r2, #2
 8000acc:	619a      	str	r2, [r3, #24]
		AX5243_u_delay(AX5243_delay);
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff ff08 	bl	80008e4 <AX5243_u_delay>
    for(int16_t i = 15; i >= 0; i--)
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	5e9b      	ldrsh	r3, [r3, r2]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	801a      	strh	r2, [r3, #0]
 8000ae6:	230e      	movs	r3, #14
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2200      	movs	r2, #0
 8000aec:	5e9b      	ldrsh	r3, [r3, r2]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dac8      	bge.n	8000a84 <SPI_TR_16+0x54>
	}
      AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SPI_TR_16+0xdc>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
      AX5243_SS_PORT->BSRR = (1<<AX5243_SS_PIN);
 8000af8:	2390      	movs	r3, #144	; 0x90
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	619a      	str	r2, [r3, #24]

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	48000400 	.word	0x48000400

08000b10 <AX5243_init>:



void AX5243_init() {
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0

	SPI_TR_16(0x2, 0x60); // set PWDN
 8000b16:	2160      	movs	r1, #96	; 0x60
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f7ff ff89 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(10000);
 8000b1e:	4bab      	ldr	r3, [pc, #684]	; (8000dcc <AX5243_init+0x2bc>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fedf 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x30, 0x09); //PLLLOOP
 8000b26:	2109      	movs	r1, #9
 8000b28:	2030      	movs	r0, #48	; 0x30
 8000b2a:	f7ff ff81 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x32, 0x01); //PLLVCODIV
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2032      	movs	r0, #50	; 0x32
 8000b32:	f7ff ff7d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_24(0xF10, 0x04);
 8000b36:	23f1      	movs	r3, #241	; 0xf1
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ff11 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xF35, 0x11);
 8000b42:	4ba3      	ldr	r3, [pc, #652]	; (8000dd0 <AX5243_init+0x2c0>)
 8000b44:	2111      	movs	r1, #17
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff ff0c 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xF34, 0x08); //PERFTUNE52
 8000b4c:	4ba1      	ldr	r3, [pc, #644]	; (8000dd4 <AX5243_init+0x2c4>)
 8000b4e:	2108      	movs	r1, #8
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff07 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x21, 0x08); //PINFUNCSYSCLK
 8000b56:	2108      	movs	r1, #8
 8000b58:	2021      	movs	r0, #33	; 0x21
 8000b5a:	f7ff ff69 	bl	8000a30 <SPI_TR_16>
	FREQA = (uint32_t)((((uint64_t)def_f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 8000b5e:	4b9e      	ldr	r3, [pc, #632]	; (8000dd8 <AX5243_init+0x2c8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	4b9c      	ldr	r3, [pc, #624]	; (8000ddc <AX5243_init+0x2cc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	6938      	ldr	r0, [r7, #16]
 8000b74:	6979      	ldr	r1, [r7, #20]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	1880      	adds	r0, r0, r2
 8000b7c:	4159      	adcs	r1, r3
 8000b7e:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <AX5243_init+0x2d0>)
 8000b80:	2300      	movs	r3, #0
 8000b82:	f7ff fc8d 	bl	80004a0 <__aeabi_lmul>
 8000b86:	0002      	movs	r2, r0
 8000b88:	000b      	movs	r3, r1
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	4b95      	ldr	r3, [pc, #596]	; (8000de4 <AX5243_init+0x2d4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f7ff fc60 	bl	8000460 <__aeabi_uldivmod>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	000b      	movs	r3, r1
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	0002      	movs	r2, r0
 8000baa:	000b      	movs	r3, r1
 8000bac:	0a16      	lsrs	r6, r2, #8
 8000bae:	061d      	lsls	r5, r3, #24
 8000bb0:	4335      	orrs	r5, r6
 8000bb2:	0614      	lsls	r4, r2, #24
 8000bb4:	1900      	adds	r0, r0, r4
 8000bb6:	4169      	adcs	r1, r5
 8000bb8:	4a89      	ldr	r2, [pc, #548]	; (8000de0 <AX5243_init+0x2d0>)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f7ff fc50 	bl	8000460 <__aeabi_uldivmod>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	000b      	movs	r3, r1
 8000bc4:	4b88      	ldr	r3, [pc, #544]	; (8000de8 <AX5243_init+0x2d8>)
 8000bc6:	601a      	str	r2, [r3, #0]
	SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24)); // set FREQA3
 8000bc8:	4b87      	ldr	r3, [pc, #540]	; (8000de8 <AX5243_init+0x2d8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	0e1b      	lsrs	r3, r3, #24
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	2034      	movs	r0, #52	; 0x34
 8000bd4:	f7ff ff2c 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x35, ((FREQA & 0xFF0000) >> 16)); // set FREQA2
 8000bd8:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <AX5243_init+0x2d8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0c1b      	lsrs	r3, r3, #16
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	0019      	movs	r1, r3
 8000be2:	2035      	movs	r0, #53	; 0x35
 8000be4:	f7ff ff24 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x36, ((FREQA & 0xFF00) >> 8)); 	// set FREQA1
 8000be8:	4b7f      	ldr	r3, [pc, #508]	; (8000de8 <AX5243_init+0x2d8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	2036      	movs	r0, #54	; 0x36
 8000bf4:	f7ff ff1c 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x37, (FREQA & 0xFF)); 	// set FREQA0
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <AX5243_init+0x2d8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	0019      	movs	r1, r3
 8000c00:	2037      	movs	r0, #55	; 0x37
 8000c02:	f7ff ff15 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3C, ((FREQA & 0xFF000000) >> 24)); 	// set FREQB3
 8000c06:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <AX5243_init+0x2d8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	0019      	movs	r1, r3
 8000c10:	203c      	movs	r0, #60	; 0x3c
 8000c12:	f7ff ff0d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3D, ((FREQA & 0xFF0000) >> 16)); // set FREQB2
 8000c16:	4b74      	ldr	r3, [pc, #464]	; (8000de8 <AX5243_init+0x2d8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	0019      	movs	r1, r3
 8000c20:	203d      	movs	r0, #61	; 0x3d
 8000c22:	f7ff ff05 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3E, ((FREQA & 0xFF00) >> 8)); 	// set FREQB1
 8000c26:	4b70      	ldr	r3, [pc, #448]	; (8000de8 <AX5243_init+0x2d8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	0019      	movs	r1, r3
 8000c30:	203e      	movs	r0, #62	; 0x3e
 8000c32:	f7ff fefd 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3F, (FREQA & 0xFF));	// set FREQB0
 8000c36:	4b6c      	ldr	r3, [pc, #432]	; (8000de8 <AX5243_init+0x2d8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	203f      	movs	r0, #63	; 0x3f
 8000c40:	f7ff fef6 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x2, 0x65);	// set Standby
 8000c44:	2165      	movs	r1, #101	; 0x65
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff fef2 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(32000);
 8000c4c:	23fa      	movs	r3, #250	; 0xfa
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fe47 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 8000c56:	23fa      	movs	r3, #250	; 0xfa
 8000c58:	01db      	lsls	r3, r3, #7
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fe42 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x33, 0x18);	//set PLLRANGINGA
 8000c60:	2118      	movs	r1, #24
 8000c62:	2033      	movs	r0, #51	; 0x33
 8000c64:	f7ff fee4 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(32000);
 8000c68:	23fa      	movs	r3, #250	; 0xfa
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fe39 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 8000c72:	23fa      	movs	r3, #250	; 0xfa
 8000c74:	01db      	lsls	r3, r3, #7
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fe34 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_24(0x164, 0x05);	//MODCFGA
 8000c7c:	23b2      	movs	r3, #178	; 0xb2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2105      	movs	r1, #5
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fe6e 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xf5f, 0xe9);	//MODCFGP
 8000c88:	4b58      	ldr	r3, [pc, #352]	; (8000dec <AX5243_init+0x2dc>)
 8000c8a:	21e9      	movs	r1, #233	; 0xe9
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff fe69 	bl	8000964 <SPI_TR_24>
	TXPWRCOEFFB = ((DbmToa1(def_PWR_dbm)*4096)+500)/1000;
 8000c92:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <AX5243_init+0x2e0>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fe3b 	bl	8000914 <DbmToa1>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	031b      	lsls	r3, r3, #12
 8000ca2:	33f5      	adds	r3, #245	; 0xf5
 8000ca4:	33ff      	adds	r3, #255	; 0xff
 8000ca6:	22fa      	movs	r2, #250	; 0xfa
 8000ca8:	0091      	lsls	r1, r2, #2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fa3e 	bl	800012c <__udivsi3>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b4f      	ldr	r3, [pc, #316]	; (8000df4 <AX5243_init+0x2e4>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	SPI_TR_24(0x168, 0x0);//set TXPWR
 8000cb8:	23b4      	movs	r3, #180	; 0xb4
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fe50 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x169, 0x0);
 8000cc4:	236a      	movs	r3, #106	; 0x6a
 8000cc6:	33ff      	adds	r3, #255	; 0xff
 8000cc8:	2100      	movs	r1, #0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fe4a 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16A, ((TXPWRCOEFFB & 0xFF00) >> 8));
 8000cd0:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <AX5243_init+0x2e4>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	23b5      	movs	r3, #181	; 0xb5
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fe3f 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16B, (TXPWRCOEFFB & 0xFF));
 8000ce6:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <AX5243_init+0x2e4>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	236c      	movs	r3, #108	; 0x6c
 8000cee:	33ff      	adds	r3, #255	; 0xff
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fe36 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16C, 0x0);
 8000cf8:	23b6      	movs	r3, #182	; 0xb6
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fe30 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16D, 0x0);
 8000d04:	236e      	movs	r3, #110	; 0x6e
 8000d06:	33ff      	adds	r3, #255	; 0xff
 8000d08:	2100      	movs	r1, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fe2a 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16E, 0x0);
 8000d10:	23b7      	movs	r3, #183	; 0xb7
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2100      	movs	r1, #0
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fe24 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16F, 0x0);
 8000d1c:	2370      	movs	r3, #112	; 0x70
 8000d1e:	33ff      	adds	r3, #255	; 0xff
 8000d20:	2100      	movs	r1, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fe1e 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x170, 0x0);
 8000d28:	23b8      	movs	r3, #184	; 0xb8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fe18 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x171, 0x0);
 8000d34:	2372      	movs	r3, #114	; 0x72
 8000d36:	33ff      	adds	r3, #255	; 0xff
 8000d38:	2100      	movs	r1, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fe12 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x10, 0x4);	//set MODULATION
 8000d40:	2104      	movs	r1, #4
 8000d42:	2010      	movs	r0, #16
 8000d44:	f7ff fe74 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x11, 0x0);	//set ENCODING
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2011      	movs	r0, #17
 8000d4c:	f7ff fe70 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x12, 0x0);	//set FRAMING
 8000d50:	2100      	movs	r1, #0
 8000d52:	2012      	movs	r0, #18
 8000d54:	f7ff fe6c 	bl	8000a30 <SPI_TR_16>
	SPI_TR_24(0x165, ((0x23 & 0xFF0000) >> 16));	//set RATE
 8000d58:	2366      	movs	r3, #102	; 0x66
 8000d5a:	33ff      	adds	r3, #255	; 0xff
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fe00 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x166, ((0x23 & 0xFF00) >> 8));
 8000d64:	23b3      	movs	r3, #179	; 0xb3
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fdfa 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x167, (0x23 & 0xFF));
 8000d70:	2368      	movs	r3, #104	; 0x68
 8000d72:	33ff      	adds	r3, #255	; 0xff
 8000d74:	2123      	movs	r1, #35	; 0x23
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fdf4 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x2, 0x67);	//set FIFO
 8000d7c:	2167      	movs	r1, #103	; 0x67
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fe56 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x28, 0x2);	//clear error
 8000d84:	2102      	movs	r1, #2
 8000d86:	2028      	movs	r0, #40	; 0x28
 8000d88:	f7ff fe52 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x28, 0x3);	//clear FIFO
 8000d8c:	2103      	movs	r1, #3
 8000d8e:	2028      	movs	r0, #40	; 0x28
 8000d90:	f7ff fe4e 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x06, 0x0);	//set IRQMASK1
 8000d94:	2100      	movs	r1, #0
 8000d96:	2006      	movs	r0, #6
 8000d98:	f7ff fe4a 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x07, 0x40);	//set IRQMASK0
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f7ff fe46 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x08, 0x0);	//set RADIOEVENTMASK1
 8000da4:	2100      	movs	r1, #0
 8000da6:	2008      	movs	r0, #8
 8000da8:	f7ff fe42 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x09, 0x1);	//set RADIOEVENTMASK0
 8000dac:	2101      	movs	r1, #1
 8000dae:	2009      	movs	r0, #9
 8000db0:	f7ff fe3e 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x0A, 0x0);	//set IRQINVERSION1
 8000db4:	2100      	movs	r1, #0
 8000db6:	200a      	movs	r0, #10
 8000db8:	f7ff fe3a 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x0B, 0x40);	//set IRQINVERSION0
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	200b      	movs	r0, #11
 8000dc0:	f7ff fe36 	bl	8000a30 <SPI_TR_16>
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b007      	add	sp, #28
 8000dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dcc:	00002710 	.word	0x00002710
 8000dd0:	00000f35 	.word	0x00000f35
 8000dd4:	00000f34 	.word	0x00000f34
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	2000000c 	.word	0x2000000c
 8000de0:	3b9aca00 	.word	0x3b9aca00
 8000de4:	20000000 	.word	0x20000000
 8000de8:	200000a4 	.word	0x200000a4
 8000dec:	00000f5f 	.word	0x00000f5f
 8000df0:	20000004 	.word	0x20000004
 8000df4:	200000a8 	.word	0x200000a8

08000df8 <AX5243_transmit>:

uint8_t AX5243_transmit(uint8_t* data, uint16_t RX_Data_Size) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	000a      	movs	r2, r1
 8000e02:	1cbb      	adds	r3, r7, #2
 8000e04:	801a      	strh	r2, [r3, #0]
	AX5243_set_fr(868000000 - 125000 / 2 + rand() % 125000);
 8000e06:	f005 fb07 	bl	8006418 <rand>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	4976      	ldr	r1, [pc, #472]	; (8000fe8 <AX5243_transmit+0x1f0>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fafc 	bl	800040c <__aeabi_idivmod>
 8000e14:	000b      	movs	r3, r1
 8000e16:	4a75      	ldr	r2, [pc, #468]	; (8000fec <AX5243_transmit+0x1f4>)
 8000e18:	4694      	mov	ip, r2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 f8f1 	bl	8001004 <AX5243_set_fr>
	uint32_t transmit_timer = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
	uint8_t error_flag = 0;
 8000e26:	2313      	movs	r3, #19
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]

	if((RX_Data_Size>0)&&(RX_Data_Size<(256+0))){
 8000e2e:	1cbb      	adds	r3, r7, #2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <AX5243_transmit+0x40>
 8000e36:	e0cb      	b.n	8000fd0 <AX5243_transmit+0x1d8>
 8000e38:	1cbb      	adds	r3, r7, #2
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d900      	bls.n	8000e42 <AX5243_transmit+0x4a>
 8000e40:	e0c6      	b.n	8000fd0 <AX5243_transmit+0x1d8>
	SPI_TR_16(0x2, 0x60);// set PWDN
 8000e42:	2160      	movs	r1, #96	; 0x60
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff fdf3 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(10000);
 8000e4a:	4b69      	ldr	r3, [pc, #420]	; (8000ff0 <AX5243_transmit+0x1f8>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fd49 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x30, 0x09);  //PLLLOOP
 8000e52:	2109      	movs	r1, #9
 8000e54:	2030      	movs	r0, #48	; 0x30
 8000e56:	f7ff fdeb 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x32, 0x01);   //PLLVCODIV
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2032      	movs	r0, #50	; 0x32
 8000e5e:	f7ff fde7 	bl	8000a30 <SPI_TR_16>
	SPI_TR_24(0xF10, 0x04);
 8000e62:	23f1      	movs	r3, #241	; 0xf1
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	2104      	movs	r1, #4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff fd7b 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xF35, 0x11);
 8000e6e:	4b61      	ldr	r3, [pc, #388]	; (8000ff4 <AX5243_transmit+0x1fc>)
 8000e70:	2111      	movs	r1, #17
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fd76 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xF34, 0x08); //PERFTUNE52
 8000e78:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <AX5243_transmit+0x200>)
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff fd71 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x21, 0x08); //PINFUNCSYSCLK
 8000e82:	2108      	movs	r1, #8
 8000e84:	2021      	movs	r0, #33	; 0x21
 8000e86:	f7ff fdd3 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x2, 0x65);// set Standby
 8000e8a:	2165      	movs	r1, #101	; 0x65
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff fdcf 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(32000);
 8000e92:	23fa      	movs	r3, #250	; 0xfa
 8000e94:	01db      	lsls	r3, r3, #7
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff fd24 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 8000e9c:	23fa      	movs	r3, #250	; 0xfa
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff fd1f 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x33, 0x18);//set PLLRANGINGA
 8000ea6:	2118      	movs	r1, #24
 8000ea8:	2033      	movs	r0, #51	; 0x33
 8000eaa:	f7ff fdc1 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(32000);
 8000eae:	23fa      	movs	r3, #250	; 0xfa
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff fd16 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);
 8000eb8:	23fa      	movs	r3, #250	; 0xfa
 8000eba:	01db      	lsls	r3, r3, #7
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fd11 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);
 8000ec2:	23fa      	movs	r3, #250	; 0xfa
 8000ec4:	01db      	lsls	r3, r3, #7
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fd0c 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 8000ecc:	23fa      	movs	r3, #250	; 0xfa
 8000ece:	01db      	lsls	r3, r3, #7
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff fd07 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x10, 0x4);//set MODULATION
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff fda9 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x11, 0x0);//set ENCODING
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fda5 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x12, 0x0);//set FRAMING
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fda1 	bl	8000a30 <SPI_TR_16>


	SPI_TR_16(0x2, 0x67);//set FIFO
 8000eee:	2167      	movs	r1, #103	; 0x67
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff fd9d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x28, 0x2); //clear error
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	2028      	movs	r0, #40	; 0x28
 8000efa:	f7ff fd99 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x28, 0x3);	//clear FIFO
 8000efe:	2103      	movs	r1, #3
 8000f00:	2028      	movs	r0, #40	; 0x28
 8000f02:	f7ff fd95 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x06, 0x0);		//set IRQMASK1
 8000f06:	2100      	movs	r1, #0
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fd91 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x07, 0x40);		//set IRQMASK0
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	2007      	movs	r0, #7
 8000f12:	f7ff fd8d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x08, 0x0);//set RADIOEVENTMASK1
 8000f16:	2100      	movs	r1, #0
 8000f18:	2008      	movs	r0, #8
 8000f1a:	f7ff fd89 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x09, 0x1);//set RADIOEVENTMASK0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2009      	movs	r0, #9
 8000f22:	f7ff fd85 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x0A, 0x0); //set IRQINVERSION1
 8000f26:	2100      	movs	r1, #0
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f7ff fd81 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x0B, 0x40); 		//set IRQINVERSION0
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	200b      	movs	r0, #11
 8000f32:	f7ff fd7d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x2, 0x6D);//set FullTX
 8000f36:	216d      	movs	r1, #109	; 0x6d
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff fd79 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x29, 0xE1); //set FIFO RAW
 8000f3e:	21e1      	movs	r1, #225	; 0xe1
 8000f40:	2029      	movs	r0, #41	; 0x29
 8000f42:	f7ff fd75 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x29, RX_Data_Size+1);
 8000f46:	1cbb      	adds	r3, r7, #2
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	0019      	movs	r1, r3
 8000f52:	2029      	movs	r0, #41	; 0x29
 8000f54:	f7ff fd6c 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x29, 0x28);
 8000f58:	2128      	movs	r1, #40	; 0x28
 8000f5a:	2029      	movs	r0, #41	; 0x29
 8000f5c:	f7ff fd68 	bl	8000a30 <SPI_TR_16>
		// send FIFO
		for(int u = 0; u<RX_Data_Size; u++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e00a      	b.n	8000f7c <AX5243_transmit+0x184>
		{
			SPI_TR_16(0x29, data[u]);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	18d3      	adds	r3, r2, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0019      	movs	r1, r3
 8000f70:	2029      	movs	r0, #41	; 0x29
 8000f72:	f7ff fd5d 	bl	8000a30 <SPI_TR_16>
		for(int u = 0; u<RX_Data_Size; u++)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	1cbb      	adds	r3, r7, #2
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dbef      	blt.n	8000f66 <AX5243_transmit+0x16e>
		}
		SPI_TR_16(0x28, 0x4);// COMMIT
 8000f86:	2104      	movs	r1, #4
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f7ff fd51 	bl	8000a30 <SPI_TR_16>
		//LL_GPIO_SetOutputPin(LED_PIN);
		LED_PORT->BSRR = (1<<LED_PIN);
 8000f8e:	2390      	movs	r3, #144	; 0x90
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	2210      	movs	r2, #16
 8000f94:	619a      	str	r2, [r3, #24]
		AX5243_u_delay(1070);
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <AX5243_transmit+0x204>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff fca3 	bl	80008e4 <AX5243_u_delay>
		transmit_timer = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
		while((AX5243_IRQ_PORT->IDR & (1<<AX5243_IRQ_PIN)) ||(transmit_timer>10320)){
 8000fa2:	e006      	b.n	8000fb2 <AX5243_transmit+0x1ba>
		//while(( LL_GPIO_IsInputPinSet(AX5243_IRQ)) ||(transmit_timer>10320)){
		transmit_timer++;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
		AX5243_u_delay(1070);
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <AX5243_transmit+0x204>)
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fc99 	bl	80008e4 <AX5243_u_delay>
		while((AX5243_IRQ_PORT->IDR & (1<<AX5243_IRQ_PIN)) ||(transmit_timer>10320)){
 8000fb2:	2390      	movs	r3, #144	; 0x90
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d1f2      	bne.n	8000fa4 <AX5243_transmit+0x1ac>
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <AX5243_transmit+0x208>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d8ee      	bhi.n	8000fa4 <AX5243_transmit+0x1ac>

		}
		//LL_GPIO_ResetOutputPin(LED_PIN);
		LED_PORT->BRR = (1<<LED_PIN);
 8000fc6:	2390      	movs	r3, #144	; 0x90
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	2210      	movs	r2, #16
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8000fce:	e003      	b.n	8000fd8 <AX5243_transmit+0x1e0>
	}
	else{
	error_flag=1;
 8000fd0:	2313      	movs	r3, #19
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]

	}
	return error_flag;
 8000fd8:	2313      	movs	r3, #19
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b006      	add	sp, #24
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	0001e848 	.word	0x0001e848
 8000fec:	33bbacdc 	.word	0x33bbacdc
 8000ff0:	00002710 	.word	0x00002710
 8000ff4:	00000f35 	.word	0x00000f35
 8000ff8:	00000f34 	.word	0x00000f34
 8000ffc:	0000042e 	.word	0x0000042e
 8001000:	00002850 	.word	0x00002850

08001004 <AX5243_set_fr>:
		}
	return error_flag;
}
*/

uint8_t AX5243_set_fr(uint32_t f_carrier) {
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	61f8      	str	r0, [r7, #28]
	uint8_t error_flag = 0;
 800100c:	230f      	movs	r3, #15
 800100e:	2218      	movs	r2, #24
 8001010:	4694      	mov	ip, r2
 8001012:	44bc      	add	ip, r7
 8001014:	4463      	add	r3, ip
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
		if((f_carrier<864000000) || (f_carrier>870000000)){
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <AX5243_set_fr+0x144>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d903      	bls.n	800102a <AX5243_set_fr+0x26>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	4a49      	ldr	r2, [pc, #292]	; (800114c <AX5243_set_fr+0x148>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d909      	bls.n	800103e <AX5243_set_fr+0x3a>
			f_carrier = 867000000;
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <AX5243_set_fr+0x14c>)
 800102c:	61fb      	str	r3, [r7, #28]
			error_flag = 1;
 800102e:	230f      	movs	r3, #15
 8001030:	2218      	movs	r2, #24
 8001032:	4694      	mov	ip, r2
 8001034:	44bc      	add	ip, r7
 8001036:	4463      	add	r3, ip
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e079      	b.n	8001132 <AX5243_set_fr+0x12e>
		}
		else{
			SPI_TR_16(0x2, 0x60);// set PWDN
 800103e:	2160      	movs	r1, #96	; 0x60
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff fcf5 	bl	8000a30 <SPI_TR_16>
			AX5243_u_delay(10000);
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <AX5243_set_fr+0x150>)
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fc4b 	bl	80008e4 <AX5243_u_delay>
			FREQA = (uint32_t)((((uint64_t)f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	4b40      	ldr	r3, [pc, #256]	; (8001158 <AX5243_set_fr+0x154>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6938      	ldr	r0, [r7, #16]
 8001062:	6979      	ldr	r1, [r7, #20]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1880      	adds	r0, r0, r2
 800106a:	4159      	adcs	r1, r3
 800106c:	4a3b      	ldr	r2, [pc, #236]	; (800115c <AX5243_set_fr+0x158>)
 800106e:	2300      	movs	r3, #0
 8001070:	f7ff fa16 	bl	80004a0 <__aeabi_lmul>
 8001074:	0002      	movs	r2, r0
 8001076:	000b      	movs	r3, r1
 8001078:	0010      	movs	r0, r2
 800107a:	0019      	movs	r1, r3
 800107c:	4b38      	ldr	r3, [pc, #224]	; (8001160 <AX5243_set_fr+0x15c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f7ff f9e9 	bl	8000460 <__aeabi_uldivmod>
 800108e:	0002      	movs	r2, r0
 8001090:	000b      	movs	r3, r1
 8001092:	0010      	movs	r0, r2
 8001094:	0019      	movs	r1, r3
 8001096:	0002      	movs	r2, r0
 8001098:	000b      	movs	r3, r1
 800109a:	0a16      	lsrs	r6, r2, #8
 800109c:	061d      	lsls	r5, r3, #24
 800109e:	4335      	orrs	r5, r6
 80010a0:	0614      	lsls	r4, r2, #24
 80010a2:	1900      	adds	r0, r0, r4
 80010a4:	4169      	adcs	r1, r5
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <AX5243_set_fr+0x158>)
 80010a8:	2300      	movs	r3, #0
 80010aa:	f7ff f9d9 	bl	8000460 <__aeabi_uldivmod>
 80010ae:	0002      	movs	r2, r0
 80010b0:	000b      	movs	r3, r1
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <AX5243_set_fr+0x160>)
 80010b4:	601a      	str	r2, [r3, #0]
			SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24));// set FREQA3
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <AX5243_set_fr+0x160>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0e1b      	lsrs	r3, r3, #24
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	0019      	movs	r1, r3
 80010c0:	2034      	movs	r0, #52	; 0x34
 80010c2:	f7ff fcb5 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x35, ((FREQA & 0xFF0000) >> 16));// set FREQA2
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <AX5243_set_fr+0x160>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	0019      	movs	r1, r3
 80010d0:	2035      	movs	r0, #53	; 0x35
 80010d2:	f7ff fcad 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x36, ((FREQA & 0xFF00) >> 8));// set FREQA1
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <AX5243_set_fr+0x160>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	0019      	movs	r1, r3
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f7ff fca5 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x37, (FREQA & 0xFF));// set FREQA0
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <AX5243_set_fr+0x160>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	0019      	movs	r1, r3
 80010ee:	2037      	movs	r0, #55	; 0x37
 80010f0:	f7ff fc9e 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x3C, ((FREQA & 0xFF000000) >> 24));// set FREQB3
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <AX5243_set_fr+0x160>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	0019      	movs	r1, r3
 80010fe:	203c      	movs	r0, #60	; 0x3c
 8001100:	f7ff fc96 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x3D, ((FREQA & 0xFF0000) >> 16));// set FREQB2
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <AX5243_set_fr+0x160>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0c1b      	lsrs	r3, r3, #16
 800110a:	b2db      	uxtb	r3, r3
 800110c:	0019      	movs	r1, r3
 800110e:	203d      	movs	r0, #61	; 0x3d
 8001110:	f7ff fc8e 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x3E, ((FREQA & 0xFF00) >> 8));// set FREQB1
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <AX5243_set_fr+0x160>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b2db      	uxtb	r3, r3
 800111c:	0019      	movs	r1, r3
 800111e:	203e      	movs	r0, #62	; 0x3e
 8001120:	f7ff fc86 	bl	8000a30 <SPI_TR_16>
			SPI_TR_16(0x3F, (FREQA & 0xFF));// set FREQB0
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <AX5243_set_fr+0x160>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	0019      	movs	r1, r3
 800112c:	203f      	movs	r0, #63	; 0x3f
 800112e:	f7ff fc7f 	bl	8000a30 <SPI_TR_16>
		}
		return error_flag;
 8001132:	230f      	movs	r3, #15
 8001134:	2218      	movs	r2, #24
 8001136:	4694      	mov	ip, r2
 8001138:	44bc      	add	ip, r7
 800113a:	4463      	add	r3, ip
 800113c:	781b      	ldrb	r3, [r3, #0]
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b00b      	add	sp, #44	; 0x2c
 8001144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	337f97ff 	.word	0x337f97ff
 800114c:	33db2580 	.word	0x33db2580
 8001150:	33ad5ec0 	.word	0x33ad5ec0
 8001154:	00002710 	.word	0x00002710
 8001158:	2000000c 	.word	0x2000000c
 800115c:	3b9aca00 	.word	0x3b9aca00
 8001160:	20000000 	.word	0x20000000
 8001164:	200000a4 	.word	0x200000a4

08001168 <AX5243_set_pw>:



uint8_t AX5243_set_pw(uint16_t PWR_dbm) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	0002      	movs	r2, r0
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	801a      	strh	r2, [r3, #0]
	uint8_t error_flag = 0;
 8001174:	210f      	movs	r1, #15
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		if(PWR_dbm>11){
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2b0b      	cmp	r3, #11
 8001182:	d906      	bls.n	8001192 <AX5243_set_pw+0x2a>
			PWR_dbm = 11;
 8001184:	1dbb      	adds	r3, r7, #6
 8001186:	220b      	movs	r2, #11
 8001188:	801a      	strh	r2, [r3, #0]
			error_flag = 1;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e05a      	b.n	8001248 <AX5243_set_pw+0xe0>
		}
		else{
			TXPWRCOEFFB = ((DbmToa1(PWR_dbm)*4096)+500)/1000;
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fbbb 	bl	8000914 <DbmToa1>
 800119e:	0003      	movs	r3, r0
 80011a0:	031b      	lsls	r3, r3, #12
 80011a2:	33f5      	adds	r3, #245	; 0xf5
 80011a4:	33ff      	adds	r3, #255	; 0xff
 80011a6:	22fa      	movs	r2, #250	; 0xfa
 80011a8:	0091      	lsls	r1, r2, #2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7fe ffbe 	bl	800012c <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <AX5243_set_pw+0xf0>)
 80011b6:	801a      	strh	r2, [r3, #0]
			SPI_TR_16(0x2, 0x60);// set PWDN
 80011b8:	2160      	movs	r1, #96	; 0x60
 80011ba:	2002      	movs	r0, #2
 80011bc:	f7ff fc38 	bl	8000a30 <SPI_TR_16>
			SPI_TR_24(0x168, 0x0);// set TXPWR
 80011c0:	23b4      	movs	r3, #180	; 0xb4
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2100      	movs	r1, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7ff fbcc 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x169, 0x0);
 80011cc:	236a      	movs	r3, #106	; 0x6a
 80011ce:	33ff      	adds	r3, #255	; 0xff
 80011d0:	2100      	movs	r1, #0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fbc6 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x16A, ((TXPWRCOEFFB & 0xFF00) >> 8));
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <AX5243_set_pw+0xf0>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	23b5      	movs	r3, #181	; 0xb5
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fbbb 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x16B, (TXPWRCOEFFB & 0xFF));
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <AX5243_set_pw+0xf0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	236c      	movs	r3, #108	; 0x6c
 80011f6:	33ff      	adds	r3, #255	; 0xff
 80011f8:	0011      	movs	r1, r2
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fbb2 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x16C, 0x0);
 8001200:	23b6      	movs	r3, #182	; 0xb6
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2100      	movs	r1, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff fbac 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x16D, 0x0);
 800120c:	236e      	movs	r3, #110	; 0x6e
 800120e:	33ff      	adds	r3, #255	; 0xff
 8001210:	2100      	movs	r1, #0
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff fba6 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x16E, 0x0);
 8001218:	23b7      	movs	r3, #183	; 0xb7
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2100      	movs	r1, #0
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff fba0 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x16F, 0x0);
 8001224:	2370      	movs	r3, #112	; 0x70
 8001226:	33ff      	adds	r3, #255	; 0xff
 8001228:	2100      	movs	r1, #0
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fb9a 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x170, 0x0);
 8001230:	23b8      	movs	r3, #184	; 0xb8
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2100      	movs	r1, #0
 8001236:	0018      	movs	r0, r3
 8001238:	f7ff fb94 	bl	8000964 <SPI_TR_24>
			SPI_TR_24(0x171, 0x0);
 800123c:	2372      	movs	r3, #114	; 0x72
 800123e:	33ff      	adds	r3, #255	; 0xff
 8001240:	2100      	movs	r1, #0
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff fb8e 	bl	8000964 <SPI_TR_24>

		}
		return error_flag;
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	781b      	ldrb	r3, [r3, #0]
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b004      	add	sp, #16
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	200000a8 	.word	0x200000a8

0800125c <AX5243_set_pd>:
		shaping_filter=1;
		}
		return error_flag;
}

uint8_t AX5243_set_pd(uint8_t p_d) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	0002      	movs	r2, r0
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	701a      	strb	r2, [r3, #0]
	uint8_t error_flag = 0;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
		if(p_d==0){
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <AX5243_set_pd+0x30>
			SPI_TR_16(0x2, 0x60);       // set PWDN
 8001278:	2160      	movs	r1, #96	; 0x60
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fbd8 	bl	8000a30 <SPI_TR_16>
			SPI_TR_24(0xf5f, 0xe1);		//dMODCFGP
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <AX5243_set_pd+0x80>)
 8001282:	21e1      	movs	r1, #225	; 0xe1
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fb6d 	bl	8000964 <SPI_TR_24>
 800128a:	e01f      	b.n	80012cc <AX5243_set_pd+0x70>
		}
		else if(p_d==1){
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d109      	bne.n	80012a8 <AX5243_set_pd+0x4c>
			SPI_TR_16(0x2, 0x60);// set PWDN
 8001294:	2160      	movs	r1, #96	; 0x60
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff fbca 	bl	8000a30 <SPI_TR_16>
			SPI_TR_24(0xf5f, 0xe9);	//dMODCFGP
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <AX5243_set_pd+0x80>)
 800129e:	21e9      	movs	r1, #233	; 0xe9
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff fb5f 	bl	8000964 <SPI_TR_24>
 80012a6:	e011      	b.n	80012cc <AX5243_set_pd+0x70>
		}
		else if(p_d==2){
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d109      	bne.n	80012c4 <AX5243_set_pd+0x68>
			SPI_TR_16(0x2, 0x60);// set PWDN
 80012b0:	2160      	movs	r1, #96	; 0x60
 80012b2:	2002      	movs	r0, #2
 80012b4:	f7ff fbbc 	bl	8000a30 <SPI_TR_16>
			SPI_TR_24(0xf5f, 0xf1);	//dMODCFGP
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <AX5243_set_pd+0x80>)
 80012ba:	21f1      	movs	r1, #241	; 0xf1
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fb51 	bl	8000964 <SPI_TR_24>
 80012c2:	e003      	b.n	80012cc <AX5243_set_pd+0x70>
		}
		else{
		error_flag = 1;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
		}
		return error_flag;
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	781b      	ldrb	r3, [r3, #0]
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	00000f5f 	.word	0x00000f5f

080012e0 <AX5243_rs>:



void AX5243_rs() {
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
	SPI_TR_16(0x2, 0x60);	// set PWDN
 80012e6:	2160      	movs	r1, #96	; 0x60
 80012e8:	2002      	movs	r0, #2
 80012ea:	f7ff fba1 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(10000);
 80012ee:	4bab      	ldr	r3, [pc, #684]	; (800159c <AX5243_rs+0x2bc>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff faf7 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x30, 0x09);  	//PLLLOOP
 80012f6:	2109      	movs	r1, #9
 80012f8:	2030      	movs	r0, #48	; 0x30
 80012fa:	f7ff fb99 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x32, 0x01);   		//PLLVCODIV
 80012fe:	2101      	movs	r1, #1
 8001300:	2032      	movs	r0, #50	; 0x32
 8001302:	f7ff fb95 	bl	8000a30 <SPI_TR_16>
	SPI_TR_24(0xF10, 0x04);
 8001306:	23f1      	movs	r3, #241	; 0xf1
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	2104      	movs	r1, #4
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff fb29 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xF35, 0x11);
 8001312:	4ba3      	ldr	r3, [pc, #652]	; (80015a0 <AX5243_rs+0x2c0>)
 8001314:	2111      	movs	r1, #17
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff fb24 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xF34, 0x08); //PERFTUNE52
 800131c:	4ba1      	ldr	r3, [pc, #644]	; (80015a4 <AX5243_rs+0x2c4>)
 800131e:	2108      	movs	r1, #8
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fb1f 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x21, 0x08); //PINFUNCSYSCLK
 8001326:	2108      	movs	r1, #8
 8001328:	2021      	movs	r0, #33	; 0x21
 800132a:	f7ff fb81 	bl	8000a30 <SPI_TR_16>
	FREQA = (uint32_t)((((uint64_t)def_f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 800132e:	4b9e      	ldr	r3, [pc, #632]	; (80015a8 <AX5243_rs+0x2c8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	4b9c      	ldr	r3, [pc, #624]	; (80015ac <AX5243_rs+0x2cc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	6938      	ldr	r0, [r7, #16]
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1880      	adds	r0, r0, r2
 800134c:	4159      	adcs	r1, r3
 800134e:	4a98      	ldr	r2, [pc, #608]	; (80015b0 <AX5243_rs+0x2d0>)
 8001350:	2300      	movs	r3, #0
 8001352:	f7ff f8a5 	bl	80004a0 <__aeabi_lmul>
 8001356:	0002      	movs	r2, r0
 8001358:	000b      	movs	r3, r1
 800135a:	0010      	movs	r0, r2
 800135c:	0019      	movs	r1, r3
 800135e:	4b95      	ldr	r3, [pc, #596]	; (80015b4 <AX5243_rs+0x2d4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f7ff f878 	bl	8000460 <__aeabi_uldivmod>
 8001370:	0002      	movs	r2, r0
 8001372:	000b      	movs	r3, r1
 8001374:	0010      	movs	r0, r2
 8001376:	0019      	movs	r1, r3
 8001378:	0002      	movs	r2, r0
 800137a:	000b      	movs	r3, r1
 800137c:	0a16      	lsrs	r6, r2, #8
 800137e:	061d      	lsls	r5, r3, #24
 8001380:	4335      	orrs	r5, r6
 8001382:	0614      	lsls	r4, r2, #24
 8001384:	1900      	adds	r0, r0, r4
 8001386:	4169      	adcs	r1, r5
 8001388:	4a89      	ldr	r2, [pc, #548]	; (80015b0 <AX5243_rs+0x2d0>)
 800138a:	2300      	movs	r3, #0
 800138c:	f7ff f868 	bl	8000460 <__aeabi_uldivmod>
 8001390:	0002      	movs	r2, r0
 8001392:	000b      	movs	r3, r1
 8001394:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <AX5243_rs+0x2d8>)
 8001396:	601a      	str	r2, [r3, #0]
	SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24));// set FREQA3
 8001398:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <AX5243_rs+0x2d8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0e1b      	lsrs	r3, r3, #24
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	0019      	movs	r1, r3
 80013a2:	2034      	movs	r0, #52	; 0x34
 80013a4:	f7ff fb44 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x35, ((FREQA & 0xFF0000) >> 16));// set FREQA2
 80013a8:	4b83      	ldr	r3, [pc, #524]	; (80015b8 <AX5243_rs+0x2d8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	0019      	movs	r1, r3
 80013b2:	2035      	movs	r0, #53	; 0x35
 80013b4:	f7ff fb3c 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x36, ((FREQA & 0xFF00) >> 8));	// set FREQA1
 80013b8:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <AX5243_rs+0x2d8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	0019      	movs	r1, r3
 80013c2:	2036      	movs	r0, #54	; 0x36
 80013c4:	f7ff fb34 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x37, (FREQA & 0xFF));	// set FREQA0
 80013c8:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <AX5243_rs+0x2d8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	0019      	movs	r1, r3
 80013d0:	2037      	movs	r0, #55	; 0x37
 80013d2:	f7ff fb2d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3C, ((FREQA & 0xFF000000) >> 24));	// set FREQB3
 80013d6:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <AX5243_rs+0x2d8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	0e1b      	lsrs	r3, r3, #24
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	0019      	movs	r1, r3
 80013e0:	203c      	movs	r0, #60	; 0x3c
 80013e2:	f7ff fb25 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3D, ((FREQA & 0xFF0000) >> 16));// set FREQB2
 80013e6:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <AX5243_rs+0x2d8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0c1b      	lsrs	r3, r3, #16
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	0019      	movs	r1, r3
 80013f0:	203d      	movs	r0, #61	; 0x3d
 80013f2:	f7ff fb1d 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3E, ((FREQA & 0xFF00) >> 8));	// set FREQB1
 80013f6:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <AX5243_rs+0x2d8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	0019      	movs	r1, r3
 8001400:	203e      	movs	r0, #62	; 0x3e
 8001402:	f7ff fb15 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x3F, (FREQA & 0xFF));	// set FREQB0
 8001406:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <AX5243_rs+0x2d8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	0019      	movs	r1, r3
 800140e:	203f      	movs	r0, #63	; 0x3f
 8001410:	f7ff fb0e 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x2, 0x65);			// set Standby
 8001414:	2165      	movs	r1, #101	; 0x65
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff fb0a 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(32000);
 800141c:	23fa      	movs	r3, #250	; 0xfa
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fa5f 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 8001426:	23fa      	movs	r3, #250	; 0xfa
 8001428:	01db      	lsls	r3, r3, #7
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fa5a 	bl	80008e4 <AX5243_u_delay>
	SPI_TR_16(0x33, 0x18);			//set PLLRANGINGA
 8001430:	2118      	movs	r1, #24
 8001432:	2033      	movs	r0, #51	; 0x33
 8001434:	f7ff fafc 	bl	8000a30 <SPI_TR_16>
	AX5243_u_delay(32000);
 8001438:	23fa      	movs	r3, #250	; 0xfa
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fa51 	bl	80008e4 <AX5243_u_delay>
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 8001442:	23fa      	movs	r3, #250	; 0xfa
 8001444:	01db      	lsls	r3, r3, #7
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff fa4c 	bl	80008e4 <AX5243_u_delay>
    SPI_TR_24(0x164, 0x05);		//MODCFGA
 800144c:	23b2      	movs	r3, #178	; 0xb2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2105      	movs	r1, #5
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fa86 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0xf5f, 0xe9);			//MODCFGP
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <AX5243_rs+0x2dc>)
 800145a:	21e9      	movs	r1, #233	; 0xe9
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fa81 	bl	8000964 <SPI_TR_24>
	//set MODCFGF filter
	//SPI_TR_24(0x160, 0x3);
	TXPWRCOEFFB = ((DbmToa1(def_PWR_dbm)*4096)+500)/1000;
 8001462:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <AX5243_rs+0x2e0>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fa53 	bl	8000914 <DbmToa1>
 800146e:	0003      	movs	r3, r0
 8001470:	031b      	lsls	r3, r3, #12
 8001472:	33f5      	adds	r3, #245	; 0xf5
 8001474:	33ff      	adds	r3, #255	; 0xff
 8001476:	22fa      	movs	r2, #250	; 0xfa
 8001478:	0091      	lsls	r1, r2, #2
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe fe56 	bl	800012c <__udivsi3>
 8001480:	0003      	movs	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b4f      	ldr	r3, [pc, #316]	; (80015c4 <AX5243_rs+0x2e4>)
 8001486:	801a      	strh	r2, [r3, #0]
	SPI_TR_24(0x168, 0x0); //set TXPWR
 8001488:	23b4      	movs	r3, #180	; 0xb4
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2100      	movs	r1, #0
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff fa68 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x169, 0x0);
 8001494:	236a      	movs	r3, #106	; 0x6a
 8001496:	33ff      	adds	r3, #255	; 0xff
 8001498:	2100      	movs	r1, #0
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff fa62 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16A, ((TXPWRCOEFFB & 0xFF00) >> 8));
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <AX5243_rs+0x2e4>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	23b5      	movs	r3, #181	; 0xb5
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fa57 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16B, (TXPWRCOEFFB & 0xFF));
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <AX5243_rs+0x2e4>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	236c      	movs	r3, #108	; 0x6c
 80014be:	33ff      	adds	r3, #255	; 0xff
 80014c0:	0011      	movs	r1, r2
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fa4e 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16C, 0x0);
 80014c8:	23b6      	movs	r3, #182	; 0xb6
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2100      	movs	r1, #0
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff fa48 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16D, 0x0);
 80014d4:	236e      	movs	r3, #110	; 0x6e
 80014d6:	33ff      	adds	r3, #255	; 0xff
 80014d8:	2100      	movs	r1, #0
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff fa42 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16E, 0x0);
 80014e0:	23b7      	movs	r3, #183	; 0xb7
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2100      	movs	r1, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fa3c 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x16F, 0x0);
 80014ec:	2370      	movs	r3, #112	; 0x70
 80014ee:	33ff      	adds	r3, #255	; 0xff
 80014f0:	2100      	movs	r1, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fa36 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x170, 0x0);
 80014f8:	23b8      	movs	r3, #184	; 0xb8
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2100      	movs	r1, #0
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff fa30 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x171, 0x0);
 8001504:	2372      	movs	r3, #114	; 0x72
 8001506:	33ff      	adds	r3, #255	; 0xff
 8001508:	2100      	movs	r1, #0
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fa2a 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x10, 0x4);	//set MODULATION
 8001510:	2104      	movs	r1, #4
 8001512:	2010      	movs	r0, #16
 8001514:	f7ff fa8c 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x11, 0x0);	//set ENCODING
 8001518:	2100      	movs	r1, #0
 800151a:	2011      	movs	r0, #17
 800151c:	f7ff fa88 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x12, 0x0);	//set FRAMING
 8001520:	2100      	movs	r1, #0
 8001522:	2012      	movs	r0, #18
 8001524:	f7ff fa84 	bl	8000a30 <SPI_TR_16>
	SPI_TR_24(0x165, ((0x23 & 0xFF0000) >> 16));	//set RATE
 8001528:	2366      	movs	r3, #102	; 0x66
 800152a:	33ff      	adds	r3, #255	; 0xff
 800152c:	2100      	movs	r1, #0
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff fa18 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x166, ((0x23 & 0xFF00) >> 8));
 8001534:	23b3      	movs	r3, #179	; 0xb3
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2100      	movs	r1, #0
 800153a:	0018      	movs	r0, r3
 800153c:	f7ff fa12 	bl	8000964 <SPI_TR_24>
	SPI_TR_24(0x167, (0x23 & 0xFF));
 8001540:	2368      	movs	r3, #104	; 0x68
 8001542:	33ff      	adds	r3, #255	; 0xff
 8001544:	2123      	movs	r1, #35	; 0x23
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff fa0c 	bl	8000964 <SPI_TR_24>
	SPI_TR_16(0x2, 0x67);	//set FIFO
 800154c:	2167      	movs	r1, #103	; 0x67
 800154e:	2002      	movs	r0, #2
 8001550:	f7ff fa6e 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x28, 0x2);	//clear error
 8001554:	2102      	movs	r1, #2
 8001556:	2028      	movs	r0, #40	; 0x28
 8001558:	f7ff fa6a 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x28, 0x3);	//clear FIFO
 800155c:	2103      	movs	r1, #3
 800155e:	2028      	movs	r0, #40	; 0x28
 8001560:	f7ff fa66 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x06, 0x0);	//set IRQMASK1
 8001564:	2100      	movs	r1, #0
 8001566:	2006      	movs	r0, #6
 8001568:	f7ff fa62 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x07, 0x40);	//set IRQMASK0
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	2007      	movs	r0, #7
 8001570:	f7ff fa5e 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x08, 0x0);	//set RADIOEVENTMASK1
 8001574:	2100      	movs	r1, #0
 8001576:	2008      	movs	r0, #8
 8001578:	f7ff fa5a 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x09, 0x1);	//set RADIOEVENTMASK0
 800157c:	2101      	movs	r1, #1
 800157e:	2009      	movs	r0, #9
 8001580:	f7ff fa56 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x0A, 0x0);	//set IRQINVERSION1
 8001584:	2100      	movs	r1, #0
 8001586:	200a      	movs	r0, #10
 8001588:	f7ff fa52 	bl	8000a30 <SPI_TR_16>
	SPI_TR_16(0x0B, 0x40);	//set IRQINVERSION0
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	200b      	movs	r0, #11
 8001590:	f7ff fa4e 	bl	8000a30 <SPI_TR_16>
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b007      	add	sp, #28
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159c:	00002710 	.word	0x00002710
 80015a0:	00000f35 	.word	0x00000f35
 80015a4:	00000f34 	.word	0x00000f34
 80015a8:	20000008 	.word	0x20000008
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	3b9aca00 	.word	0x3b9aca00
 80015b4:	20000000 	.word	0x20000000
 80015b8:	200000a4 	.word	0x200000a4
 80015bc:	00000f5f 	.word	0x00000f5f
 80015c0:	20000004 	.word	0x20000004
 80015c4:	200000a8 	.word	0x200000a8

080015c8 <cdelay>:

uint8_t id;



void cdelay(uint16_t ms_delay){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	801a      	strh	r2, [r3, #0]
((used_TIM->CNT) = (0));
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <cdelay+0x2c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <cdelay+0x2c>)
 80015de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3f9      	bcc.n	80015dc <cdelay+0x14>
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40000400 	.word	0x40000400

080015f8 <I2C_Start>:

void I2C_Start(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	uint8_t ind = 0;
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8001604:	2390      	movs	r3, #144	; 0x90
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	2201      	movs	r2, #1
 800160a:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 800160c:	200a      	movs	r0, #10
 800160e:	f7ff ffdb 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8001612:	2390      	movs	r3, #144	; 0x90
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	2202      	movs	r2, #2
 8001618:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 800161a:	200a      	movs	r0, #10
 800161c:	f7ff ffd4 	bl	80015c8 <cdelay>

        while((!(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))) && (ind < 20))
 8001620:	e012      	b.n	8001648 <I2C_Start+0x50>
        {
        I2C_SCL_PORT->BRR  = (1<<I2C_SCL_PIN);
 8001622:	2390      	movs	r3, #144	; 0x90
 8001624:	05db      	lsls	r3, r3, #23
 8001626:	2202      	movs	r2, #2
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
        cdelay(ti_delay);
 800162a:	200a      	movs	r0, #10
 800162c:	f7ff ffcc 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8001630:	2390      	movs	r3, #144	; 0x90
 8001632:	05db      	lsls	r3, r3, #23
 8001634:	2202      	movs	r2, #2
 8001636:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 8001638:	200a      	movs	r0, #10
 800163a:	f7ff ffc5 	bl	80015c8 <cdelay>
        ind++;
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	3201      	adds	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
        while((!(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))) && (ind < 20))
 8001648:	2390      	movs	r3, #144	; 0x90
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2201      	movs	r2, #1
 8001650:	4013      	ands	r3, r2
 8001652:	d103      	bne.n	800165c <I2C_Start+0x64>
 8001654:	1dfb      	adds	r3, r7, #7
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b13      	cmp	r3, #19
 800165a:	d9e2      	bls.n	8001622 <I2C_Start+0x2a>
        }
        I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 800165c:	2390      	movs	r3, #144	; 0x90
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	2201      	movs	r2, #1
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
        cdelay(ti_delay);
 8001664:	200a      	movs	r0, #10
 8001666:	f7ff ffaf 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 800166a:	2390      	movs	r3, #144	; 0x90
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	2202      	movs	r2, #2
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
        cdelay(ti_delay);
 8001672:	200a      	movs	r0, #10
 8001674:	f7ff ffa8 	bl	80015c8 <cdelay>
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <I2C_Stop>:
void I2C_Stop(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
        I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8001684:	2390      	movs	r3, #144	; 0x90
 8001686:	05db      	lsls	r3, r3, #23
 8001688:	2201      	movs	r2, #1
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
        cdelay(ti_delay);
 800168c:	200a      	movs	r0, #10
 800168e:	f7ff ff9b 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8001692:	2390      	movs	r3, #144	; 0x90
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	2202      	movs	r2, #2
 8001698:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 800169a:	200a      	movs	r0, #10
 800169c:	f7ff ff94 	bl	80015c8 <cdelay>
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 80016a0:	2390      	movs	r3, #144	; 0x90
 80016a2:	05db      	lsls	r3, r3, #23
 80016a4:	2201      	movs	r2, #1
 80016a6:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f7ff ff8d 	bl	80015c8 <cdelay>
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <I2C_Write_Byte>:

uint8_t I2C_Write_Byte(uint8_t data)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	701a      	strb	r2, [r3, #0]
       uint8_t i;
       uint8_t ACK;
       for(i=0;i<8;i++)
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e026      	b.n	8001718 <I2C_Write_Byte+0x64>
       {
       if(data & 0x80)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da04      	bge.n	80016de <I2C_Write_Byte+0x2a>
       {
       I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 80016d4:	2390      	movs	r3, #144	; 0x90
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	2201      	movs	r2, #1
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	e003      	b.n	80016e6 <I2C_Write_Byte+0x32>
       }
       else
       {
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 80016de:	2390      	movs	r3, #144	; 0x90
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	2201      	movs	r2, #1
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
       }
       cdelay(ti_delay);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f7ff ff6e 	bl	80015c8 <cdelay>
       I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 80016ec:	2390      	movs	r3, #144	; 0x90
 80016ee:	05db      	lsls	r3, r3, #23
 80016f0:	2202      	movs	r2, #2
 80016f2:	619a      	str	r2, [r3, #24]
       cdelay(ti_delay);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7ff ff67 	bl	80015c8 <cdelay>
       I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 80016fa:	2390      	movs	r3, #144	; 0x90
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	2202      	movs	r2, #2
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
       data=data<<1;
 8001702:	1dfa      	adds	r2, r7, #7
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	18db      	adds	r3, r3, r3
 800170a:	7013      	strb	r3, [r2, #0]
       for(i=0;i<8;i++)
 800170c:	210f      	movs	r1, #15
 800170e:	187b      	adds	r3, r7, r1
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	187b      	adds	r3, r7, r1
 8001714:	3201      	adds	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d9d3      	bls.n	80016ca <I2C_Write_Byte+0x16>
       }
       cdelay(ti_delay);
 8001722:	200a      	movs	r0, #10
 8001724:	f7ff ff50 	bl	80015c8 <cdelay>
       I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8001728:	2390      	movs	r3, #144	; 0x90
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	2202      	movs	r2, #2
 800172e:	619a      	str	r2, [r3, #24]
       cdelay(ti_delay);
 8001730:	200a      	movs	r0, #10
 8001732:	f7ff ff49 	bl	80015c8 <cdelay>
       ACK = !(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN));
 8001736:	2390      	movs	r3, #144	; 0x90
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	425a      	negs	r2, r3
 8001742:	4153      	adcs	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	210e      	movs	r1, #14
 8001748:	187b      	adds	r3, r7, r1
 800174a:	701a      	strb	r2, [r3, #0]
       I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 800174c:	2390      	movs	r3, #144	; 0x90
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	2202      	movs	r2, #2
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8001754:	2390      	movs	r3, #144	; 0x90
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	2201      	movs	r2, #1
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
       return ACK;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	781b      	ldrb	r3, [r3, #0]
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}

08001768 <I2C_Read_Byte>:

uint8_t I2C_Read_Byte(uint8_t ACK)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	0002      	movs	r2, r0
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	701a      	strb	r2, [r3, #0]
        uint8_t i;
        uint8_t data = 0;
 8001774:	230e      	movs	r3, #14
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]

        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 800177c:	2390      	movs	r3, #144	; 0x90
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	2201      	movs	r2, #1
 8001782:	619a      	str	r2, [r3, #24]
      for(i=0;i<8;i++)
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e024      	b.n	80017d8 <I2C_Read_Byte+0x70>
        {
    	cdelay(ti_delay);
 800178e:	200a      	movs	r0, #10
 8001790:	f7ff ff1a 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8001794:	2390      	movs	r3, #144	; 0x90
 8001796:	05db      	lsls	r3, r3, #23
 8001798:	2202      	movs	r2, #2
 800179a:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 800179c:	200a      	movs	r0, #10
 800179e:	f7ff ff13 	bl	80015c8 <cdelay>
        data<<=1;
 80017a2:	210e      	movs	r1, #14
 80017a4:	187a      	adds	r2, r7, r1
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	18db      	adds	r3, r3, r3
 80017ac:	7013      	strb	r3, [r2, #0]
      if(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))
 80017ae:	2390      	movs	r3, #144	; 0x90
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	d004      	beq.n	80017c4 <I2C_Read_Byte+0x5c>
        data++;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	3201      	adds	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
        I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 80017c4:	2390      	movs	r3, #144	; 0x90
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	2202      	movs	r2, #2
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
      for(i=0;i<8;i++)
 80017cc:	210f      	movs	r1, #15
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	3201      	adds	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b07      	cmp	r3, #7
 80017e0:	d9d5      	bls.n	800178e <I2C_Read_Byte+0x26>
        }
      if (ACK)
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <I2C_Read_Byte+0x8a>
        I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 80017ea:	2390      	movs	r3, #144	; 0x90
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	2201      	movs	r2, #1
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
        cdelay(ti_delay);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f7ff fee8 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 80017f8:	2390      	movs	r3, #144	; 0x90
 80017fa:	05db      	lsls	r3, r3, #23
 80017fc:	2202      	movs	r2, #2
 80017fe:	619a      	str	r2, [r3, #24]
        cdelay(ti_delay);
 8001800:	200a      	movs	r0, #10
 8001802:	f7ff fee1 	bl	80015c8 <cdelay>
        I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8001806:	2390      	movs	r3, #144	; 0x90
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	2202      	movs	r2, #2
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	2201      	movs	r2, #1
 8001814:	619a      	str	r2, [r3, #24]
        return data;
 8001816:	230e      	movs	r3, #14
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b004      	add	sp, #16
 8001822:	bd80      	pop	{r7, pc}

08001824 <SPI2_Write_Byte>:


void SPI2_Write_Byte(uint8_t addr, uint8_t data)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	0002      	movs	r2, r0
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	1dbb      	adds	r3, r7, #6
 8001832:	1c0a      	adds	r2, r1, #0
 8001834:	701a      	strb	r2, [r3, #0]
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 8001836:	2390      	movs	r3, #144	; 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	2202      	movs	r2, #2
 800183c:	619a      	str	r2, [r3, #24]
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <SPI2_Write_Byte+0xe4>)
 8001840:	2202      	movs	r2, #2
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
	  uint8_t bit;
	  uint16_t tr_data = 0;
 8001844:	200c      	movs	r0, #12
 8001846:	183b      	adds	r3, r7, r0
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]
	  uint8_t rw = 0;
 800184c:	240b      	movs	r4, #11
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
	  tr_data = data + (((addr)&0x7F)<<8) + (rw<<15);
 8001854:	1dbb      	adds	r3, r7, #6
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b299      	uxth	r1, r3
 8001862:	23fe      	movs	r3, #254	; 0xfe
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	400b      	ands	r3, r1
 8001868:	b29b      	uxth	r3, r3
 800186a:	18d3      	adds	r3, r2, r3
 800186c:	b299      	uxth	r1, r3
 800186e:	193b      	adds	r3, r7, r4
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	03db      	lsls	r3, r3, #15
 8001876:	b29a      	uxth	r2, r3
 8001878:	183b      	adds	r3, r7, r0
 800187a:	188a      	adds	r2, r1, r2
 800187c:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 16; i > 0; i--)
 800187e:	230f      	movs	r3, #15
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	2210      	movs	r2, #16
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e02f      	b.n	80018e8 <SPI2_Write_Byte+0xc4>
	{
		bit = (tr_data >>(i-1)) & 1;
 8001888:	230c      	movs	r3, #12
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	881a      	ldrh	r2, [r3, #0]
 800188e:	230f      	movs	r3, #15
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	411a      	asrs	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	200a      	movs	r0, #10
 800189e:	183b      	adds	r3, r7, r0
 80018a0:	2101      	movs	r1, #1
 80018a2:	400a      	ands	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 80018a6:	2390      	movs	r3, #144	; 0x90
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	2202      	movs	r2, #2
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
		if(bit)
 80018ae:	183b      	adds	r3, r7, r0
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <SPI2_Write_Byte+0x9c>
		{
		SPI_SENS_MOSI_PORT->BSRR = (1<<SPI_SENS_MOSI_PIN);
 80018b6:	2390      	movs	r3, #144	; 0x90
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	2201      	movs	r2, #1
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	e003      	b.n	80018c8 <SPI2_Write_Byte+0xa4>
		}
		else
		{
		SPI_SENS_MOSI_PORT->BRR = (1<<SPI_SENS_MOSI_PIN);
 80018c0:	2390      	movs	r3, #144	; 0x90
 80018c2:	05db      	lsls	r3, r3, #23
 80018c4:	2201      	movs	r2, #1
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
		}
		cdelay(ts_delay);
 80018c8:	2002      	movs	r0, #2
 80018ca:	f7ff fe7d 	bl	80015c8 <cdelay>
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80018ce:	2390      	movs	r3, #144	; 0x90
 80018d0:	05db      	lsls	r3, r3, #23
 80018d2:	2202      	movs	r2, #2
 80018d4:	619a      	str	r2, [r3, #24]
		cdelay(ts_delay);
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7ff fe76 	bl	80015c8 <cdelay>
    for(uint8_t i = 16; i > 0; i--)
 80018dc:	210f      	movs	r1, #15
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	3a01      	subs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	230f      	movs	r3, #15
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ca      	bne.n	8001888 <SPI2_Write_Byte+0x64>
	}
    SPI_SENS_SS_PORT->BSRR = (1<<SPI_SENS_SS_PIN);
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SPI2_Write_Byte+0xe4>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	619a      	str	r2, [r3, #24]
    SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80018f8:	2390      	movs	r3, #144	; 0x90
 80018fa:	05db      	lsls	r3, r3, #23
 80018fc:	2202      	movs	r2, #2
 80018fe:	619a      	str	r2, [r3, #24]
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b005      	add	sp, #20
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	48001400 	.word	0x48001400

0800190c <SPI2_Read_Byte>:

uint8_t SPI2_Read_Byte(uint8_t addr)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	0002      	movs	r2, r0
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	701a      	strb	r2, [r3, #0]
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 8001918:	2390      	movs	r3, #144	; 0x90
 800191a:	05db      	lsls	r3, r3, #23
 800191c:	2202      	movs	r2, #2
 800191e:	619a      	str	r2, [r3, #24]
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <SPI2_Read_Byte+0x14c>)
 8001922:	2202      	movs	r2, #2
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
	  uint8_t bit;
	  uint16_t tr_data = 0;
 8001926:	200a      	movs	r0, #10
 8001928:	183b      	adds	r3, r7, r0
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
	  uint8_t rs_data = 0;
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
	  uint8_t rw = 1;
 8001936:	2409      	movs	r4, #9
 8001938:	193b      	adds	r3, r7, r4
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
	  tr_data = (((addr)&0x7F)<<8) + (rw<<15);
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b29a      	uxth	r2, r3
 8001946:	23fe      	movs	r3, #254	; 0xfe
 8001948:	01db      	lsls	r3, r3, #7
 800194a:	4013      	ands	r3, r2
 800194c:	b299      	uxth	r1, r3
 800194e:	193b      	adds	r3, r7, r4
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	03db      	lsls	r3, r3, #15
 8001956:	b29a      	uxth	r2, r3
 8001958:	183b      	adds	r3, r7, r0
 800195a:	188a      	adds	r2, r1, r2
 800195c:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 16; i > 8; i--)
 800195e:	230e      	movs	r3, #14
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	2210      	movs	r2, #16
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	e02f      	b.n	80019c8 <SPI2_Read_Byte+0xbc>
	{
		bit = (tr_data >>(i-1)) & 1;
 8001968:	230a      	movs	r3, #10
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	881a      	ldrh	r2, [r3, #0]
 800196e:	230e      	movs	r3, #14
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	411a      	asrs	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	2008      	movs	r0, #8
 800197e:	183b      	adds	r3, r7, r0
 8001980:	2101      	movs	r1, #1
 8001982:	400a      	ands	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001986:	2390      	movs	r3, #144	; 0x90
 8001988:	05db      	lsls	r3, r3, #23
 800198a:	2202      	movs	r2, #2
 800198c:	629a      	str	r2, [r3, #40]	; 0x28
		if(bit)
 800198e:	183b      	adds	r3, r7, r0
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <SPI2_Read_Byte+0x94>
		{
		SPI_SENS_MOSI_PORT->BSRR = (1<<SPI_SENS_MOSI_PIN);
 8001996:	2390      	movs	r3, #144	; 0x90
 8001998:	05db      	lsls	r3, r3, #23
 800199a:	2201      	movs	r2, #1
 800199c:	619a      	str	r2, [r3, #24]
 800199e:	e003      	b.n	80019a8 <SPI2_Read_Byte+0x9c>
		}
		else
		{
	  SPI_SENS_MOSI_PORT->BRR = (1<<SPI_SENS_MOSI_PIN);
 80019a0:	2390      	movs	r3, #144	; 0x90
 80019a2:	05db      	lsls	r3, r3, #23
 80019a4:	2201      	movs	r2, #1
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
		}
		cdelay(ts_delay);
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7ff fe0d 	bl	80015c8 <cdelay>
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80019ae:	2390      	movs	r3, #144	; 0x90
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	2202      	movs	r2, #2
 80019b4:	619a      	str	r2, [r3, #24]
		cdelay(ts_delay);
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fe06 	bl	80015c8 <cdelay>
    for(uint8_t i = 16; i > 8; i--)
 80019bc:	210e      	movs	r1, #14
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	3a01      	subs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	230e      	movs	r3, #14
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d8ca      	bhi.n	8001968 <SPI2_Read_Byte+0x5c>
	}

    for(uint8_t i = 8; i > 0; i--)
 80019d2:	230d      	movs	r3, #13
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2208      	movs	r2, #8
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e02a      	b.n	8001a32 <SPI2_Read_Byte+0x126>
	{
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 80019dc:	2390      	movs	r3, #144	; 0x90
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	2202      	movs	r2, #2
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
		cdelay(ts_delay);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7ff fdef 	bl	80015c8 <cdelay>
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80019ea:	2390      	movs	r3, #144	; 0x90
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	2202      	movs	r2, #2
 80019f0:	619a      	str	r2, [r3, #24]
	    if(SPI_SENS_MISO_PORT->IDR & (1<<SPI_SENS_MISO_PIN)){
 80019f2:	2390      	movs	r3, #144	; 0x90
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d00f      	beq.n	8001a20 <SPI2_Read_Byte+0x114>
	    rs_data = rs_data | (0x1)<<(i-1);
 8001a00:	230d      	movs	r3, #13
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	2201      	movs	r2, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	b25a      	sxtb	r2, r3
 8001a10:	210f      	movs	r1, #15
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25a      	sxtb	r2, r3
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
	    }
		cdelay(ts_delay);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff fdd1 	bl	80015c8 <cdelay>
    for(uint8_t i = 8; i > 0; i--)
 8001a26:	210d      	movs	r1, #13
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	230d      	movs	r3, #13
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1cf      	bne.n	80019dc <SPI2_Read_Byte+0xd0>
	}
    SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 8001a3c:	2390      	movs	r3, #144	; 0x90
 8001a3e:	05db      	lsls	r3, r3, #23
 8001a40:	2202      	movs	r2, #2
 8001a42:	619a      	str	r2, [r3, #24]
    SPI_SENS_SS_PORT->BSRR = (1<<SPI_SENS_SS_PIN);
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SPI2_Read_Byte+0x14c>)
 8001a46:	2202      	movs	r2, #2
 8001a48:	619a      	str	r2, [r3, #24]
	  return rs_data;
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	781b      	ldrb	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b005      	add	sp, #20
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	48001400 	.word	0x48001400

08001a5c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <LL_RCC_HSE_EnableBypass+0x18>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <LL_RCC_HSE_EnableBypass+0x18>)
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	02c9      	lsls	r1, r1, #11
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000

08001a78 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <LL_RCC_HSE_Enable+0x18>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <LL_RCC_HSE_Enable+0x18>)
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	0249      	lsls	r1, r1, #9
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <LL_RCC_HSE_IsReady+0x20>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <LL_RCC_HSE_IsReady+0x24>)
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	4463      	add	r3, ip
 8001aa8:	425a      	negs	r2, r3
 8001aaa:	4153      	adcs	r3, r2
 8001aac:	b2db      	uxtb	r3, r3
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	fffe0000 	.word	0xfffe0000

08001abc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <LL_RCC_SetSysClkSource+0x24>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <LL_RCC_SetSysClkSource+0x24>)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <LL_RCC_GetSysClkSource+0x14>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	220c      	movs	r2, #12
 8001aee:	4013      	ands	r3, r2
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	22f0      	movs	r2, #240	; 0xf0
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	fffff8ff 	.word	0xfffff8ff

08001b50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <LL_RCC_PLL_Enable+0x18>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <LL_RCC_PLL_Enable+0x18>)
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	0449      	lsls	r1, r1, #17
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000

08001b6c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <LL_RCC_PLL_IsReady+0x24>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	049b      	lsls	r3, r3, #18
 8001b78:	4013      	ands	r3, r2
 8001b7a:	22fe      	movs	r2, #254	; 0xfe
 8001b7c:	0612      	lsls	r2, r2, #24
 8001b7e:	4694      	mov	ip, r2
 8001b80:	4463      	add	r3, ip
 8001b82:	425a      	negs	r2, r3
 8001b84:	4153      	adcs	r3, r2
 8001b86:	b2db      	uxtb	r3, r3
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	220f      	movs	r2, #15
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b004      	add	sp, #16
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	ffc27fff 	.word	0xffc27fff

08001bd8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001be2:	6959      	ldr	r1, [r3, #20]
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <LL_APB1_GRP1_EnableClock+0x28>)
 8001c0e:	69d9      	ldr	r1, [r3, #28]
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <LL_APB1_GRP1_EnableClock+0x28>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <LL_APB1_GRP1_EnableClock+0x28>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000

08001c30 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c3a:	6999      	ldr	r1, [r3, #24]
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000

08001c5c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <LL_FLASH_SetLatency+0x24>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <LL_FLASH_SetLatency+0x24>)
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	40022000 	.word	0x40022000

08001c84 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <LL_FLASH_GetLatency+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40022000 	.word	0x40022000

08001c9c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <LL_SYSTICK_EnableIT+0x18>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <LL_SYSTICK_EnableIT+0x18>)
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	4393      	bics	r3, r2
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <LL_TIM_SetClockSource+0x24>)
 8001d04:	401a      	ands	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	ffffbff8 	.word	0xffffbff8

08001d1c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2270      	movs	r2, #112	; 0x70
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	001a      	movs	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	4393      	bics	r3, r2
 8001d50:	001a      	movs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <LL_USART_EnableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <LL_USART_DisableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4393      	bics	r3, r2
 8001da6:	001a      	movs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN feature is supported), CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <LL_USART_ConfigAsyncMode+0x2c>)
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
#endif /* USART_LIN_SUPPORT */
#if defined(USART_SMARTCARD_SUPPORT)
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	222a      	movs	r2, #42	; 0x2a
 8001dce:	4393      	bics	r3, r2
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	ffffb7ff 	.word	0xffffb7ff

08001de4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2210      	movs	r2, #16
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d101      	bne.n	8001dfc <LL_USART_IsActiveFlag_IDLE+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	2220      	movs	r2, #32
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d101      	bne.n	8001e1e <LL_USART_IsActiveFlag_RXNE+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d101      	bne.n	8001e40 <LL_USART_IsActiveFlag_TXE+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2210      	movs	r2, #16
 8001e56:	621a      	str	r2, [r3, #32]
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <LL_USART_DisableIT_CTS+0x1c>)
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	fffffbff 	.word	0xfffffbff

08001e80 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	000a      	movs	r2, r1
 8001e8a:	1cfb      	adds	r3, r7, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001e8e:	1cfb      	adds	r3, r7, #3
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	619a      	str	r2, [r3, #24]
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <FLASH_Unlock>:
uint8_t AsciiToHex(uint8_t s_h, uint8_t s_l);
uint16_t Ascii2ToHex(uint8_t *s, uint16_t len, uint8_t number);
void USART_TX_h_VAL(char *string, uint8_t val);
void USART_TX_d_VAL(char *string, uint32_t val, uint8_t len);

void FLASH_Unlock(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	if ((FLASH->CR & FLASH_CR_LOCK) != RESET) {
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <FLASH_Unlock+0x20>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	4013      	ands	r3, r2
 8001edc:	d005      	beq.n	8001eea <FLASH_Unlock+0x1a>
		FLASH->KEYR = FLASH_FKEY1;
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <FLASH_Unlock+0x20>)
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <FLASH_Unlock+0x24>)
 8001ee2:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = FLASH_FKEY2;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <FLASH_Unlock+0x20>)
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <FLASH_Unlock+0x28>)
 8001ee8:	605a      	str	r2, [r3, #4]
	}
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	45670123 	.word	0x45670123
 8001ef8:	cdef89ab 	.word	0xcdef89ab

08001efc <FLASH_Lock>:

void FLASH_Lock(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <FLASH_Lock+0x18>)
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <FLASH_Lock+0x18>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	611a      	str	r2, [r3, #16]
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40022000 	.word	0x40022000

08001f18 <FLASH_ClearPage>:

void FLASH_ClearPage(uint32_t Page_Address) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	FLASH->CR |= FLASH_CR_PER;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f26:	2102      	movs	r1, #2
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	611a      	str	r2, [r3, #16]
	FLASH->AR = Page_Address;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f38:	2140      	movs	r1, #64	; 0x40
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
	while ((FLASH->SR & FLASH_SR_BSY))
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1fa      	bne.n	8001f40 <FLASH_ClearPage+0x28>
		;
	FLASH->CR &= ~FLASH_CR_PER;
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <FLASH_ClearPage+0x48>)
 8001f50:	2102      	movs	r1, #2
 8001f52:	438a      	bics	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40022000 	.word	0x40022000

08001f64 <FLASH_Read>:

uint16_t FLASH_Read(uint32_t Address) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	return (*(__IO uint16_t*) Address);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b002      	add	sp, #8
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <FLASH_Write>:

void FLASH_Write(uint32_t Address, uint16_t Data) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	000a      	movs	r2, r1
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	801a      	strh	r2, [r3, #0]

	FLASH->CR |= FLASH_CR_PG;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <FLASH_Write+0x50>)
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <FLASH_Write+0x50>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
	while ((FLASH->SR & FLASH_SR_BSY))
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <FLASH_Write+0x50>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d1fa      	bne.n	8001f98 <FLASH_Write+0x1c>
		;
	*(__IO uint16_t*) Address = Data;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	1cba      	adds	r2, r7, #2
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
	while ((FLASH->SR & FLASH_SR_BSY))
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <FLASH_Write+0x50>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d1fa      	bne.n	8001fac <FLASH_Write+0x30>
		;
	FLASH->CR &= ~(FLASH_CR_PG);
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <FLASH_Write+0x50>)
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <FLASH_Write+0x50>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	438a      	bics	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]

}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <FLASH_Read_Data>:

void FLASH_Read_Data(struct encrypt_data_t *data) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	memcpy(data, FLASH_CONST_ADDR, sizeof(struct encrypt_data_t));
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <FLASH_Read_Data+0x1c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	229b      	movs	r2, #155	; 0x9b
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f004 fa08 	bl	80063f4 <memcpy>
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	08007e00 	.word	0x08007e00

08001ff0 <FLASH_Write_Data>:

void FLASH_Write_Data(struct encrypt_data_t *data) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	FLASH_Unlock();
 8001ff8:	f7ff ff6a 	bl	8001ed0 <FLASH_Unlock>
	FLASH_ClearPage(FLASH_CONST_ADDR);
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <FLASH_Write_Data+0x50>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff ff8a 	bl	8001f18 <FLASH_ClearPage>
	for (int i = 0; i < sizeof(struct encrypt_data_t) / 2; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e010      	b.n	800202c <FLASH_Write_Data+0x3c>
		FLASH_Write(FLASH_CONST_ADDR + i * 2, ((uint16_t*) data)[i]);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <FLASH_Write_Data+0x54>)
 800200e:	4694      	mov	ip, r2
 8002010:	4463      	add	r3, ip
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	0018      	movs	r0, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	18d3      	adds	r3, r2, r3
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	0019      	movs	r1, r3
 8002022:	f7ff ffab 	bl	8001f7c <FLASH_Write>
	for (int i = 0; i < sizeof(struct encrypt_data_t) / 2; i++) {
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b4c      	cmp	r3, #76	; 0x4c
 8002030:	d9eb      	bls.n	800200a <FLASH_Write_Data+0x1a>
	}
	FLASH_Lock();
 8002032:	f7ff ff63 	bl	8001efc <FLASH_Lock>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	08007e00 	.word	0x08007e00
 8002044:	04003f00 	.word	0x04003f00

08002048 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b0b2      	sub	sp, #200	; 0xc8
 800204c:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff fdee 	bl	8001c30 <LL_APB1_GRP2_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	055b      	lsls	r3, r3, #21
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff fdd3 	bl	8001c04 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800205e:	f000 fd4d 	bl	8002afc <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */


	MX_GPIO_Init();
 8002062:	f000 fe81 	bl	8002d68 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002066:	f000 fe01 	bl	8002c6c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 800206a:	f000 fdc5 	bl	8002bf8 <MX_TIM3_Init>
	MX_TIM2_Init();
 800206e:	f000 fd85 	bl	8002b7c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM3);
 8002072:	4bd5      	ldr	r3, [pc, #852]	; (80023c8 <main+0x380>)
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff fe1f 	bl	8001cb8 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM2);
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	05db      	lsls	r3, r3, #23
 800207e:	0018      	movs	r0, r3
 8002080:	f7ff fe1a 	bl	8001cb8 <LL_TIM_EnableCounter>
	//(TIM2->CNT) = (0);
	LL_SYSTICK_EnableIT();
 8002084:	f7ff fe0a 	bl	8001c9c <LL_SYSTICK_EnableIT>
	// OpenUNB device

	struct encrypt_data_t initData;

	if (FLASH_Read(FLASH_CONST_ADDR) != 0xFFFF) {
 8002088:	4bd0      	ldr	r3, [pc, #832]	; (80023cc <main+0x384>)
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff ff6a 	bl	8001f64 <FLASH_Read>
 8002090:	0003      	movs	r3, r0
 8002092:	001a      	movs	r2, r3
 8002094:	4bce      	ldr	r3, [pc, #824]	; (80023d0 <main+0x388>)
 8002096:	429a      	cmp	r2, r3
 8002098:	d004      	beq.n	80020a4 <main+0x5c>
		FLASH_Read_Data(&initData);
 800209a:	003b      	movs	r3, r7
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff97 	bl	8001fd0 <FLASH_Read_Data>
 80020a2:	e055      	b.n	8002150 <main+0x108>
	} else {
		initData.DevID_len = rand() % 8 + 2;
 80020a4:	f004 f9b8 	bl	8006418 <rand>
 80020a8:	0003      	movs	r3, r0
 80020aa:	4aca      	ldr	r2, [pc, #808]	; (80023d4 <main+0x38c>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	d504      	bpl.n	80020ba <main+0x72>
 80020b0:	3b01      	subs	r3, #1
 80020b2:	2208      	movs	r2, #8
 80020b4:	4252      	negs	r2, r2
 80020b6:	4313      	orrs	r3, r2
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3302      	adds	r3, #2
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	003b      	movs	r3, r7
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	5499      	strb	r1, [r3, r2]

		for (int i = 0; i < initData.DevID_len; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	22c4      	movs	r2, #196	; 0xc4
 80020ca:	18ba      	adds	r2, r7, r2
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00f      	b.n	80020f0 <main+0xa8>
			initData.DevID[i] = rand() & 0xFF;
 80020d0:	f004 f9a2 	bl	8006418 <rand>
 80020d4:	0003      	movs	r3, r0
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	003a      	movs	r2, r7
 80020da:	20c4      	movs	r0, #196	; 0xc4
 80020dc:	183b      	adds	r3, r7, r0
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	1c0a      	adds	r2, r1, #0
 80020e4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < initData.DevID_len; i++) {
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	183a      	adds	r2, r7, r0
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	003b      	movs	r3, r7
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	001a      	movs	r2, r3
 80020f8:	23c4      	movs	r3, #196	; 0xc4
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4293      	cmp	r3, r2
 8002100:	dbe6      	blt.n	80020d0 <main+0x88>
		}

		for (int i = 0; i < sizeof(initData.K0); i++) {
 8002102:	2300      	movs	r3, #0
 8002104:	22c0      	movs	r2, #192	; 0xc0
 8002106:	18ba      	adds	r2, r7, r2
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e011      	b.n	8002130 <main+0xe8>
			initData.K0[i] = rand() & 0xFF;
 800210c:	f004 f984 	bl	8006418 <rand>
 8002110:	0003      	movs	r3, r0
 8002112:	b2d8      	uxtb	r0, r3
 8002114:	003a      	movs	r2, r7
 8002116:	2141      	movs	r1, #65	; 0x41
 8002118:	24c0      	movs	r4, #192	; 0xc0
 800211a:	193b      	adds	r3, r7, r4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	18d3      	adds	r3, r2, r3
 8002120:	185b      	adds	r3, r3, r1
 8002122:	1c02      	adds	r2, r0, #0
 8002124:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(initData.K0); i++) {
 8002126:	193b      	adds	r3, r7, r4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3301      	adds	r3, #1
 800212c:	193a      	adds	r2, r7, r4
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	23c0      	movs	r3, #192	; 0xc0
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	d9e8      	bls.n	800210c <main+0xc4>
		}

		initData.Na = 0;
 800213a:	003b      	movs	r3, r7
 800213c:	2251      	movs	r2, #81	; 0x51
 800213e:	5c99      	ldrb	r1, [r3, r2]
 8002140:	2000      	movs	r0, #0
 8002142:	4001      	ands	r1, r0
 8002144:	5499      	strb	r1, [r3, r2]
 8002146:	189b      	adds	r3, r3, r2
 8002148:	785a      	ldrb	r2, [r3, #1]
 800214a:	2100      	movs	r1, #0
 800214c:	400a      	ands	r2, r1
 800214e:	705a      	strb	r2, [r3, #1]
	}

	initData.Na++;
 8002150:	003b      	movs	r3, r7
 8002152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	b29b      	uxth	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	b299      	uxth	r1, r3
 800215e:	003b      	movs	r3, r7
 8002160:	2251      	movs	r2, #81	; 0x51
 8002162:	20ff      	movs	r0, #255	; 0xff
 8002164:	4008      	ands	r0, r1
 8002166:	0005      	movs	r5, r0
 8002168:	5c98      	ldrb	r0, [r3, r2]
 800216a:	2400      	movs	r4, #0
 800216c:	4020      	ands	r0, r4
 800216e:	1c04      	adds	r4, r0, #0
 8002170:	1c28      	adds	r0, r5, #0
 8002172:	4320      	orrs	r0, r4
 8002174:	5498      	strb	r0, [r3, r2]
 8002176:	0a09      	lsrs	r1, r1, #8
 8002178:	b288      	uxth	r0, r1
 800217a:	189b      	adds	r3, r3, r2
 800217c:	785a      	ldrb	r2, [r3, #1]
 800217e:	2100      	movs	r1, #0
 8002180:	400a      	ands	r2, r1
 8002182:	1c11      	adds	r1, r2, #0
 8002184:	1c02      	adds	r2, r0, #0
 8002186:	430a      	orrs	r2, r1
 8002188:	705a      	strb	r2, [r3, #1]
	FLASH_Write_Data(&initData);
 800218a:	003b      	movs	r3, r7
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff ff2f 	bl	8001ff0 <FLASH_Write_Data>

	initEncrypter(&initData);
 8002192:	003b      	movs	r3, r7
 8002194:	0018      	movs	r0, r3
 8002196:	f001 fdf0 	bl	8003d7a <initEncrypter>

	//encodeActivateMsg(&initData, act_msg, LL_GetTi);

	for (int i = 0; i < 10; i++) {                               //Indication
 800219a:	2300      	movs	r3, #0
 800219c:	22bc      	movs	r2, #188	; 0xbc
 800219e:	18ba      	adds	r2, r7, r2
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e013      	b.n	80021cc <main+0x184>
		LED_PORT->BSRR = (1 << LED_PIN);
 80021a4:	2390      	movs	r3, #144	; 0x90
 80021a6:	05db      	lsls	r3, r3, #23
 80021a8:	2210      	movs	r2, #16
 80021aa:	619a      	str	r2, [r3, #24]
		LL_mDelay(100);
 80021ac:	2064      	movs	r0, #100	; 0x64
 80021ae:	f004 f8c7 	bl	8006340 <LL_mDelay>
		LED_PORT->BRR = (1 << LED_PIN);
 80021b2:	2390      	movs	r3, #144	; 0x90
 80021b4:	05db      	lsls	r3, r3, #23
 80021b6:	2210      	movs	r2, #16
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
		LL_mDelay(100);
 80021ba:	2064      	movs	r0, #100	; 0x64
 80021bc:	f004 f8c0 	bl	8006340 <LL_mDelay>
	for (int i = 0; i < 10; i++) {                               //Indication
 80021c0:	22bc      	movs	r2, #188	; 0xbc
 80021c2:	18bb      	adds	r3, r7, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	18ba      	adds	r2, r7, r2
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	23bc      	movs	r3, #188	; 0xbc
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b09      	cmp	r3, #9
 80021d4:	dde6      	ble.n	80021a4 <main+0x15c>
	}

	f_carrier = default_f_carrier;
 80021d6:	4b80      	ldr	r3, [pc, #512]	; (80023d8 <main+0x390>)
 80021d8:	4a80      	ldr	r2, [pc, #512]	; (80023dc <main+0x394>)
 80021da:	601a      	str	r2, [r3, #0]
	PWR_dbm = default_PWR_dbm;
 80021dc:	4b80      	ldr	r3, [pc, #512]	; (80023e0 <main+0x398>)
 80021de:	220b      	movs	r2, #11
 80021e0:	801a      	strh	r2, [r3, #0]
	shaping_filter = default_shaping;
 80021e2:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <main+0x39c>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]

	AX5243_init();
 80021e8:	f7fe fc92 	bl	8000b10 <AX5243_init>
	USART_TX_Str("TRANSMITTER READY\n\r");
 80021ec:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <main+0x3a0>)
 80021ee:	0018      	movs	r0, r3
 80021f0:	f001 f800 	bl	80031f4 <USART_TX_Str>

	USART_TX_h_VAL("Na: ", initData.Na);
 80021f4:	003b      	movs	r3, r7
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <main+0x3a4>)
 8002202:	0011      	movs	r1, r2
 8002204:	0018      	movs	r0, r3
 8002206:	f001 f82d 	bl	8003264 <USART_TX_h_VAL>

	USART_TX_Str("DevID: ");
 800220a:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <main+0x3a8>)
 800220c:	0018      	movs	r0, r3
 800220e:	f000 fff1 	bl	80031f4 <USART_TX_Str>
	for (int i = 0; i < initData.DevID_len; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	22b8      	movs	r2, #184	; 0xb8
 8002216:	18ba      	adds	r2, r7, r2
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00d      	b.n	8002238 <main+0x1f0>
		USART_TX_h_VAL_without_text(initData.DevID[i]);
 800221c:	003a      	movs	r2, r7
 800221e:	24b8      	movs	r4, #184	; 0xb8
 8002220:	193b      	adds	r3, r7, r4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	f001 f8a7 	bl	800337c <USART_TX_h_VAL_without_text>
	for (int i = 0; i < initData.DevID_len; i++) {
 800222e:	193b      	adds	r3, r7, r4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	193a      	adds	r2, r7, r4
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	003b      	movs	r3, r7
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	5c9b      	ldrb	r3, [r3, r2]
 800223e:	001a      	movs	r2, r3
 8002240:	23b8      	movs	r3, #184	; 0xb8
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4293      	cmp	r3, r2
 8002248:	dbe8      	blt.n	800221c <main+0x1d4>
	}
	USART_TX_Str("\n\r");
 800224a:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <main+0x3ac>)
 800224c:	0018      	movs	r0, r3
 800224e:	f000 ffd1 	bl	80031f4 <USART_TX_Str>

	USART_TX_Str("K0: ");
 8002252:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <main+0x3b0>)
 8002254:	0018      	movs	r0, r3
 8002256:	f000 ffcd 	bl	80031f4 <USART_TX_Str>
	for (int i = 0; i < sizeof(initData.K0); i++) {
 800225a:	2300      	movs	r3, #0
 800225c:	22b4      	movs	r2, #180	; 0xb4
 800225e:	18ba      	adds	r2, r7, r2
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00f      	b.n	8002284 <main+0x23c>
		USART_TX_h_VAL_without_text(initData.K0[i]);
 8002264:	003a      	movs	r2, r7
 8002266:	2141      	movs	r1, #65	; 0x41
 8002268:	24b4      	movs	r4, #180	; 0xb4
 800226a:	193b      	adds	r3, r7, r4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	18d3      	adds	r3, r2, r3
 8002270:	185b      	adds	r3, r3, r1
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	0018      	movs	r0, r3
 8002276:	f001 f881 	bl	800337c <USART_TX_h_VAL_without_text>
	for (int i = 0; i < sizeof(initData.K0); i++) {
 800227a:	193b      	adds	r3, r7, r4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	193a      	adds	r2, r7, r4
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	23b4      	movs	r3, #180	; 0xb4
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d9ea      	bls.n	8002264 <main+0x21c>
	}
	USART_TX_Str("\n\r");
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <main+0x3ac>)
 8002290:	0018      	movs	r0, r3
 8002292:	f000 ffaf 	bl	80031f4 <USART_TX_Str>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		RX_STR_Size = USART_RX_Str();
 8002296:	f001 f9d3 	bl	8003640 <USART_RX_Str>
 800229a:	0003      	movs	r3, r0
 800229c:	001a      	movs	r2, r3
 800229e:	4b57      	ldr	r3, [pc, #348]	; (80023fc <main+0x3b4>)
 80022a0:	801a      	strh	r2, [r3, #0]

		if ((u2_rx_buff[0] == 'A') && (u2_rx_buff[1] == 'T')) {
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <main+0x3b8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b41      	cmp	r3, #65	; 0x41
 80022a8:	d111      	bne.n	80022ce <main+0x286>
 80022aa:	4b55      	ldr	r3, [pc, #340]	; (8002400 <main+0x3b8>)
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	2b54      	cmp	r3, #84	; 0x54
 80022b0:	d10d      	bne.n	80022ce <main+0x286>
			if (RX_STR_Size == 2) {
 80022b2:	4b52      	ldr	r3, [pc, #328]	; (80023fc <main+0x3b4>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d104      	bne.n	80022c4 <main+0x27c>
				error_flag = 0;
 80022ba:	4b52      	ldr	r3, [pc, #328]	; (8002404 <main+0x3bc>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 80022c0:	f000 fbc6 	bl	8002a50 <main+0xa08>
			} else {
				error_flag = 1;
 80022c4:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <main+0x3bc>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 80022ca:	f000 fbc1 	bl	8002a50 <main+0xa08>
			 error_flag = (AX5243_set_fr(f_carrier));
			 } else {
			 error_flag = 1;
			 }
			 */
		} else if ((u2_rx_buff[0] == 'P') && (u2_rx_buff[1] == 'W')) {
 80022ce:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <main+0x3b8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b50      	cmp	r3, #80	; 0x50
 80022d4:	d127      	bne.n	8002326 <main+0x2de>
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <main+0x3b8>)
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	2b57      	cmp	r3, #87	; 0x57
 80022dc:	d123      	bne.n	8002326 <main+0x2de>
			if (RX_STR_Size == 4) {
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <main+0x3b4>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d11a      	bne.n	800231c <main+0x2d4>
				PWR_dbm = AsciiToDec(u2_rx_buff, 2, 3);
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <main+0x3b8>)
 80022e8:	2203      	movs	r2, #3
 80022ea:	2102      	movs	r1, #2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 fa05 	bl	80036fc <AsciiToDec>
 80022f2:	0003      	movs	r3, r0
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <main+0x398>)
 80022f8:	801a      	strh	r2, [r3, #0]
				if (error_flag == 0)
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <main+0x3bc>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <main+0x2be>
 8002302:	f000 fb9a 	bl	8002a3a <main+0x9f2>
					error_flag = (AX5243_set_pw(PWR_dbm));
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <main+0x398>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	0018      	movs	r0, r3
 800230c:	f7fe ff2c 	bl	8001168 <AX5243_set_pw>
 8002310:	0003      	movs	r3, r0
 8002312:	001a      	movs	r2, r3
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <main+0x3bc>)
 8002316:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 4) {
 8002318:	f000 fb8f 	bl	8002a3a <main+0x9f2>
			} else {
				error_flag = 1;
 800231c:	4b39      	ldr	r3, [pc, #228]	; (8002404 <main+0x3bc>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 4) {
 8002322:	f000 fb8a 	bl	8002a3a <main+0x9f2>
			 error_flag = (AX5243_set_fl(shaping_filter));
			 } else {
			 error_flag = 1;
			 }
			 */
		} else if ((u2_rx_buff[0] == 'P') && (u2_rx_buff[1] == 'D')) {
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <main+0x3b8>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b50      	cmp	r3, #80	; 0x50
 800232c:	d127      	bne.n	800237e <main+0x336>
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <main+0x3b8>)
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	2b44      	cmp	r3, #68	; 0x44
 8002334:	d123      	bne.n	800237e <main+0x336>
			if (RX_STR_Size == 3) {
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <main+0x3b4>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d11a      	bne.n	8002374 <main+0x32c>
				p_d = AsciiToDec(u2_rx_buff, 1, 3);
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <main+0x3b8>)
 8002340:	2203      	movs	r2, #3
 8002342:	2101      	movs	r1, #1
 8002344:	0018      	movs	r0, r3
 8002346:	f001 f9d9 	bl	80036fc <AsciiToDec>
 800234a:	0003      	movs	r3, r0
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <main+0x3c0>)
 8002350:	701a      	strb	r2, [r3, #0]
				if (error_flag == 0)
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <main+0x3bc>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <main+0x316>
 800235a:	f000 fb70 	bl	8002a3e <main+0x9f6>
					error_flag = (AX5243_set_pd(p_d));
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <main+0x3c0>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	f7fe ff7a 	bl	800125c <AX5243_set_pd>
 8002368:	0003      	movs	r3, r0
 800236a:	001a      	movs	r2, r3
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <main+0x3bc>)
 800236e:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 3) {
 8002370:	f000 fb65 	bl	8002a3e <main+0x9f6>
			} else {
				error_flag = 1;
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <main+0x3bc>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 3) {
 800237a:	f000 fb60 	bl	8002a3e <main+0x9f6>
			}
		} else if ((u2_rx_buff[0] == 'T') && (u2_rx_buff[1] == 'R')) {
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <main+0x3b8>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b54      	cmp	r3, #84	; 0x54
 8002384:	d146      	bne.n	8002414 <main+0x3cc>
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <main+0x3b8>)
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	2b52      	cmp	r3, #82	; 0x52
 800238c:	d142      	bne.n	8002414 <main+0x3cc>
			RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <main+0x3b4>)
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <main+0x3b8>)
 8002394:	2203      	movs	r2, #3
 8002396:	0018      	movs	r0, r3
 8002398:	f001 fa94 	bl	80038c4 <Ascii2ToHex>
 800239c:	0003      	movs	r3, r0
 800239e:	001a      	movs	r2, r3
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <main+0x3c4>)
 80023a2:	801a      	strh	r2, [r3, #0]
			if (error_flag == 0)
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <main+0x3bc>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d000      	beq.n	80023ae <main+0x366>
 80023ac:	e350      	b.n	8002a50 <main+0xa08>
				error_flag = (AX5243_transmit(tx_buff, RX_Data_Size));
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <main+0x3c4>)
 80023b0:	881a      	ldrh	r2, [r3, #0]
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <main+0x3c8>)
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7fe fd1e 	bl	8000df8 <AX5243_transmit>
 80023bc:	0003      	movs	r3, r0
 80023be:	001a      	movs	r2, r3
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <main+0x3bc>)
 80023c2:	701a      	strb	r2, [r3, #0]
			if (error_flag == 0)
 80023c4:	e344      	b.n	8002a50 <main+0xa08>
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40000400 	.word	0x40000400
 80023cc:	08007e00 	.word	0x08007e00
 80023d0:	0000ffff 	.word	0x0000ffff
 80023d4:	80000007 	.word	0x80000007
 80023d8:	200000ac 	.word	0x200000ac
 80023dc:	33bca100 	.word	0x33bca100
 80023e0:	200002ee 	.word	0x200002ee
 80023e4:	200003f6 	.word	0x200003f6
 80023e8:	080074f8 	.word	0x080074f8
 80023ec:	0800750c 	.word	0x0800750c
 80023f0:	08007514 	.word	0x08007514
 80023f4:	0800751c 	.word	0x0800751c
 80023f8:	08007520 	.word	0x08007520
 80023fc:	200003f4 	.word	0x200003f4
 8002400:	200000b4 	.word	0x200000b4
 8002404:	20000094 	.word	0x20000094
 8002408:	200002ec 	.word	0x200002ec
 800240c:	200000b0 	.word	0x200000b0
 8002410:	200002f0 	.word	0x200002f0
		} else if ((u2_rx_buff[0] == 'I') && (u2_rx_buff[1] == 'R')) { // IR760D
 8002414:	4bd4      	ldr	r3, [pc, #848]	; (8002768 <main+0x720>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b49      	cmp	r3, #73	; 0x49
 800241a:	d154      	bne.n	80024c6 <main+0x47e>
 800241c:	4bd2      	ldr	r3, [pc, #840]	; (8002768 <main+0x720>)
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b52      	cmp	r3, #82	; 0x52
 8002422:	d150      	bne.n	80024c6 <main+0x47e>
			if (RX_STR_Size == 6) {
 8002424:	4bd1      	ldr	r3, [pc, #836]	; (800276c <main+0x724>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	2b06      	cmp	r3, #6
 800242a:	d148      	bne.n	80024be <main+0x476>
				Dev_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 800242c:	4bce      	ldr	r3, [pc, #824]	; (8002768 <main+0x720>)
 800242e:	789a      	ldrb	r2, [r3, #2]
 8002430:	4bcd      	ldr	r3, [pc, #820]	; (8002768 <main+0x720>)
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	0019      	movs	r1, r3
 8002436:	0010      	movs	r0, r2
 8002438:	f001 f9c8 	bl	80037cc <AsciiToHex>
 800243c:	0003      	movs	r3, r0
 800243e:	001a      	movs	r2, r3
 8002440:	4bcb      	ldr	r3, [pc, #812]	; (8002770 <main+0x728>)
 8002442:	701a      	strb	r2, [r3, #0]
				Reg_addr = AsciiToHex(u2_rx_buff[4], u2_rx_buff[5]);
 8002444:	4bc8      	ldr	r3, [pc, #800]	; (8002768 <main+0x720>)
 8002446:	791a      	ldrb	r2, [r3, #4]
 8002448:	4bc7      	ldr	r3, [pc, #796]	; (8002768 <main+0x720>)
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	0019      	movs	r1, r3
 800244e:	0010      	movs	r0, r2
 8002450:	f001 f9bc 	bl	80037cc <AsciiToHex>
 8002454:	0003      	movs	r3, r0
 8002456:	001a      	movs	r2, r3
 8002458:	4bc6      	ldr	r3, [pc, #792]	; (8002774 <main+0x72c>)
 800245a:	701a      	strb	r2, [r3, #0]
				if (error_flag == 0) {
 800245c:	4bc6      	ldr	r3, [pc, #792]	; (8002778 <main+0x730>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d000      	beq.n	8002466 <main+0x41e>
 8002464:	e2ed      	b.n	8002a42 <main+0x9fa>
					I2C_Start();
 8002466:	f7ff f8c7 	bl	80015f8 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1);
 800246a:	4bc1      	ldr	r3, [pc, #772]	; (8002770 <main+0x728>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	18db      	adds	r3, r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff f91e 	bl	80016b4 <I2C_Write_Byte>
					I2C_Write_Byte(Reg_addr);
 8002478:	4bbe      	ldr	r3, [pc, #760]	; (8002774 <main+0x72c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff f919 	bl	80016b4 <I2C_Write_Byte>
					I2C_Start();
 8002482:	f7ff f8b9 	bl	80015f8 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1 | 0x1);
 8002486:	4bba      	ldr	r3, [pc, #744]	; (8002770 <main+0x728>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	b25b      	sxtb	r3, r3
 800248e:	2201      	movs	r2, #1
 8002490:	4313      	orrs	r3, r2
 8002492:	b25b      	sxtb	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff f90c 	bl	80016b4 <I2C_Write_Byte>
					Reg_data = I2C_Read_Byte(1);
 800249c:	2001      	movs	r0, #1
 800249e:	f7ff f963 	bl	8001768 <I2C_Read_Byte>
 80024a2:	0003      	movs	r3, r0
 80024a4:	001a      	movs	r2, r3
 80024a6:	4bb5      	ldr	r3, [pc, #724]	; (800277c <main+0x734>)
 80024a8:	701a      	strb	r2, [r3, #0]
					I2C_Stop();
 80024aa:	f7ff f8e9 	bl	8001680 <I2C_Stop>
					USART_TX_h_VAL("Reg_data:", Reg_data);
 80024ae:	4bb3      	ldr	r3, [pc, #716]	; (800277c <main+0x734>)
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	4bb3      	ldr	r3, [pc, #716]	; (8002780 <main+0x738>)
 80024b4:	0011      	movs	r1, r2
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 fed4 	bl	8003264 <USART_TX_h_VAL>
			if (RX_STR_Size == 6) {
 80024bc:	e2c1      	b.n	8002a42 <main+0x9fa>
				}
			} else {
				error_flag = 1;
 80024be:	4bae      	ldr	r3, [pc, #696]	; (8002778 <main+0x730>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 6) {
 80024c4:	e2bd      	b.n	8002a42 <main+0x9fa>
		 error_flag = 1;
		 }
		 }
		 */

		else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'R')) {    // SR0D
 80024c6:	4ba8      	ldr	r3, [pc, #672]	; (8002768 <main+0x720>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b53      	cmp	r3, #83	; 0x53
 80024cc:	d12d      	bne.n	800252a <main+0x4e2>
 80024ce:	4ba6      	ldr	r3, [pc, #664]	; (8002768 <main+0x720>)
 80024d0:	785b      	ldrb	r3, [r3, #1]
 80024d2:	2b52      	cmp	r3, #82	; 0x52
 80024d4:	d129      	bne.n	800252a <main+0x4e2>
			if (RX_STR_Size == 4) {
 80024d6:	4ba5      	ldr	r3, [pc, #660]	; (800276c <main+0x724>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d121      	bne.n	8002522 <main+0x4da>
				Reg_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 80024de:	4ba2      	ldr	r3, [pc, #648]	; (8002768 <main+0x720>)
 80024e0:	789a      	ldrb	r2, [r3, #2]
 80024e2:	4ba1      	ldr	r3, [pc, #644]	; (8002768 <main+0x720>)
 80024e4:	78db      	ldrb	r3, [r3, #3]
 80024e6:	0019      	movs	r1, r3
 80024e8:	0010      	movs	r0, r2
 80024ea:	f001 f96f 	bl	80037cc <AsciiToHex>
 80024ee:	0003      	movs	r3, r0
 80024f0:	001a      	movs	r2, r3
 80024f2:	4ba0      	ldr	r3, [pc, #640]	; (8002774 <main+0x72c>)
 80024f4:	701a      	strb	r2, [r3, #0]
				if (error_flag == 0) {
 80024f6:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <main+0x730>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <main+0x4b8>
 80024fe:	e2a2      	b.n	8002a46 <main+0x9fe>
					Reg_data = SPI2_Read_Byte(Reg_addr);
 8002500:	4b9c      	ldr	r3, [pc, #624]	; (8002774 <main+0x72c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff fa01 	bl	800190c <SPI2_Read_Byte>
 800250a:	0003      	movs	r3, r0
 800250c:	001a      	movs	r2, r3
 800250e:	4b9b      	ldr	r3, [pc, #620]	; (800277c <main+0x734>)
 8002510:	701a      	strb	r2, [r3, #0]
					USART_TX_h_VAL("Reg_data:", Reg_data);
 8002512:	4b9a      	ldr	r3, [pc, #616]	; (800277c <main+0x734>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b9a      	ldr	r3, [pc, #616]	; (8002780 <main+0x738>)
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fea2 	bl	8003264 <USART_TX_h_VAL>
			if (RX_STR_Size == 4) {
 8002520:	e291      	b.n	8002a46 <main+0x9fe>
				}
			} else {
				error_flag = 1;
 8002522:	4b95      	ldr	r3, [pc, #596]	; (8002778 <main+0x730>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 4) {
 8002528:	e28d      	b.n	8002a46 <main+0x9fe>
			}
		}

		else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'W')) {   // SW0D11
 800252a:	4b8f      	ldr	r3, [pc, #572]	; (8002768 <main+0x720>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b53      	cmp	r3, #83	; 0x53
 8002530:	d131      	bne.n	8002596 <main+0x54e>
 8002532:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <main+0x720>)
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b57      	cmp	r3, #87	; 0x57
 8002538:	d12d      	bne.n	8002596 <main+0x54e>
			if (RX_STR_Size == 6) {
 800253a:	4b8c      	ldr	r3, [pc, #560]	; (800276c <main+0x724>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2b06      	cmp	r3, #6
 8002540:	d125      	bne.n	800258e <main+0x546>
				Reg_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <main+0x720>)
 8002544:	789a      	ldrb	r2, [r3, #2]
 8002546:	4b88      	ldr	r3, [pc, #544]	; (8002768 <main+0x720>)
 8002548:	78db      	ldrb	r3, [r3, #3]
 800254a:	0019      	movs	r1, r3
 800254c:	0010      	movs	r0, r2
 800254e:	f001 f93d 	bl	80037cc <AsciiToHex>
 8002552:	0003      	movs	r3, r0
 8002554:	001a      	movs	r2, r3
 8002556:	4b87      	ldr	r3, [pc, #540]	; (8002774 <main+0x72c>)
 8002558:	701a      	strb	r2, [r3, #0]
				Reg_data = AsciiToHex(u2_rx_buff[4], u2_rx_buff[5]);
 800255a:	4b83      	ldr	r3, [pc, #524]	; (8002768 <main+0x720>)
 800255c:	791a      	ldrb	r2, [r3, #4]
 800255e:	4b82      	ldr	r3, [pc, #520]	; (8002768 <main+0x720>)
 8002560:	795b      	ldrb	r3, [r3, #5]
 8002562:	0019      	movs	r1, r3
 8002564:	0010      	movs	r0, r2
 8002566:	f001 f931 	bl	80037cc <AsciiToHex>
 800256a:	0003      	movs	r3, r0
 800256c:	001a      	movs	r2, r3
 800256e:	4b83      	ldr	r3, [pc, #524]	; (800277c <main+0x734>)
 8002570:	701a      	strb	r2, [r3, #0]
				if (error_flag == 0) {
 8002572:	4b81      	ldr	r3, [pc, #516]	; (8002778 <main+0x730>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d000      	beq.n	800257c <main+0x534>
 800257a:	e266      	b.n	8002a4a <main+0xa02>
					SPI2_Write_Byte(Reg_addr, Reg_data);
 800257c:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <main+0x72c>)
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	4b7e      	ldr	r3, [pc, #504]	; (800277c <main+0x734>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	0019      	movs	r1, r3
 8002586:	0010      	movs	r0, r2
 8002588:	f7ff f94c 	bl	8001824 <SPI2_Write_Byte>
			if (RX_STR_Size == 6) {
 800258c:	e25d      	b.n	8002a4a <main+0xa02>
				}
			} else {
				error_flag = 1;
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <main+0x730>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 6) {
 8002594:	e259      	b.n	8002a4a <main+0xa02>
			}
		}

		else if ((u2_rx_buff[0] == 'N') && (u2_rx_buff[1] == 'T')) {   // NT0201
 8002596:	4b74      	ldr	r3, [pc, #464]	; (8002768 <main+0x720>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b4e      	cmp	r3, #78	; 0x4e
 800259c:	d000      	beq.n	80025a0 <main+0x558>
 800259e:	e0a8      	b.n	80026f2 <main+0x6aa>
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <main+0x720>)
 80025a2:	785b      	ldrb	r3, [r3, #1]
 80025a4:	2b54      	cmp	r3, #84	; 0x54
 80025a6:	d000      	beq.n	80025aa <main+0x562>
 80025a8:	e0a3      	b.n	80026f2 <main+0x6aa>
			if (RX_STR_Size == 6 || RX_STR_Size == 14) {
 80025aa:	4b70      	ldr	r3, [pc, #448]	; (800276c <main+0x724>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d004      	beq.n	80025bc <main+0x574>
 80025b2:	4b6e      	ldr	r3, [pc, #440]	; (800276c <main+0x724>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	2b0e      	cmp	r3, #14
 80025b8:	d000      	beq.n	80025bc <main+0x574>
 80025ba:	e094      	b.n	80026e6 <main+0x69e>
				RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 80025bc:	4b6b      	ldr	r3, [pc, #428]	; (800276c <main+0x724>)
 80025be:	8819      	ldrh	r1, [r3, #0]
 80025c0:	4b69      	ldr	r3, [pc, #420]	; (8002768 <main+0x720>)
 80025c2:	2203      	movs	r2, #3
 80025c4:	0018      	movs	r0, r3
 80025c6:	f001 f97d 	bl	80038c4 <Ascii2ToHex>
 80025ca:	0003      	movs	r3, r0
 80025cc:	001a      	movs	r2, r3
 80025ce:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <main+0x73c>)
 80025d0:	801a      	strh	r2, [r3, #0]
				if (RX_Data_Size == 2 && error_flag == 0) {
 80025d2:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <main+0x73c>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d130      	bne.n	800263c <main+0x5f4>
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <main+0x730>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d12c      	bne.n	800263c <main+0x5f4>

					uint8_t tmp = tx_buff[0];
 80025e2:	219f      	movs	r1, #159	; 0x9f
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	4a68      	ldr	r2, [pc, #416]	; (8002788 <main+0x740>)
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
					tx_buff[0] = tx_buff[1];
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <main+0x740>)
 80025ee:	785a      	ldrb	r2, [r3, #1]
 80025f0:	4b65      	ldr	r3, [pc, #404]	; (8002788 <main+0x740>)
 80025f2:	701a      	strb	r2, [r3, #0]
					tx_buff[1] = tmp;
 80025f4:	4b64      	ldr	r3, [pc, #400]	; (8002788 <main+0x740>)
 80025f6:	187a      	adds	r2, r7, r1
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	705a      	strb	r2, [r3, #1]

					error_flag = preapare_msg_16bit(&initData, tx_buff,
 80025fc:	4a63      	ldr	r2, [pc, #396]	; (800278c <main+0x744>)
 80025fe:	4962      	ldr	r1, [pc, #392]	; (8002788 <main+0x740>)
 8002600:	003b      	movs	r3, r7
 8002602:	0018      	movs	r0, r3
 8002604:	f000 fcc6 	bl	8002f94 <preapare_msg_16bit>
 8002608:	0003      	movs	r3, r0
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <main+0x730>)
 800260e:	701a      	strb	r2, [r3, #0]
							data_after_preapare);
					if (error_flag != 0) {
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <main+0x730>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <main+0x5e0>
						USART_TX_Str("Wait 1 min\n\r");
 8002618:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <main+0x748>)
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fdea 	bl	80031f4 <USART_TX_Str>
						error_flag = 1;
 8002620:	4b55      	ldr	r3, [pc, #340]	; (8002778 <main+0x730>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
				if (RX_Data_Size == 2 && error_flag == 0) {
 8002626:	e05d      	b.n	80026e4 <main+0x69c>
					} else {
						error_flag = (AX5243_transmit(data_after_preapare, 20));
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <main+0x744>)
 800262a:	2114      	movs	r1, #20
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe fbe3 	bl	8000df8 <AX5243_transmit>
 8002632:	0003      	movs	r3, r0
 8002634:	001a      	movs	r2, r3
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <main+0x730>)
 8002638:	701a      	strb	r2, [r3, #0]
				if (RX_Data_Size == 2 && error_flag == 0) {
 800263a:	e053      	b.n	80026e4 <main+0x69c>
					}
				} else if (RX_Data_Size == 6 && error_flag == 0) {
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <main+0x73c>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d154      	bne.n	80026ee <main+0x6a6>
 8002644:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <main+0x730>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d150      	bne.n	80026ee <main+0x6a6>

					for (int i = 0; i < 3; i++) {
 800264c:	2300      	movs	r3, #0
 800264e:	22b0      	movs	r2, #176	; 0xb0
 8002650:	18ba      	adds	r2, r7, r2
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e021      	b.n	800269a <main+0x652>
						uint8_t tmp = tx_buff[i];
 8002656:	249e      	movs	r4, #158	; 0x9e
 8002658:	193b      	adds	r3, r7, r4
 800265a:	494b      	ldr	r1, [pc, #300]	; (8002788 <main+0x740>)
 800265c:	20b0      	movs	r0, #176	; 0xb0
 800265e:	183a      	adds	r2, r7, r0
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	188a      	adds	r2, r1, r2
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	701a      	strb	r2, [r3, #0]
						tx_buff[i] = tx_buff[5 - i];
 8002668:	183b      	adds	r3, r7, r0
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2205      	movs	r2, #5
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a45      	ldr	r2, [pc, #276]	; (8002788 <main+0x740>)
 8002672:	5cd1      	ldrb	r1, [r2, r3]
 8002674:	4a44      	ldr	r2, [pc, #272]	; (8002788 <main+0x740>)
 8002676:	183b      	adds	r3, r7, r0
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	1c0a      	adds	r2, r1, #0
 800267e:	701a      	strb	r2, [r3, #0]
						tx_buff[5 - i] = tmp;
 8002680:	183b      	adds	r3, r7, r0
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2205      	movs	r2, #5
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a3f      	ldr	r2, [pc, #252]	; (8002788 <main+0x740>)
 800268a:	1939      	adds	r1, r7, r4
 800268c:	7809      	ldrb	r1, [r1, #0]
 800268e:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < 3; i++) {
 8002690:	183b      	adds	r3, r7, r0
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	183a      	adds	r2, r7, r0
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	23b0      	movs	r3, #176	; 0xb0
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	ddd8      	ble.n	8002656 <main+0x60e>
					}

					error_flag = preapare_msg_48bit(&initData, tx_buff,
 80026a4:	4a39      	ldr	r2, [pc, #228]	; (800278c <main+0x744>)
 80026a6:	4938      	ldr	r1, [pc, #224]	; (8002788 <main+0x740>)
 80026a8:	003b      	movs	r3, r7
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fcd8 	bl	8003060 <preapare_msg_48bit>
 80026b0:	0003      	movs	r3, r0
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <main+0x730>)
 80026b6:	701a      	strb	r2, [r3, #0]
							data_after_preapare);
					if (error_flag != 0) {
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <main+0x730>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <main+0x688>
						USART_TX_Str("Wait 1 min\n\r");
 80026c0:	4b33      	ldr	r3, [pc, #204]	; (8002790 <main+0x748>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fd96 	bl	80031f4 <USART_TX_Str>
						error_flag = 1;
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <main+0x730>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
				if (RX_Data_Size == 2 && error_flag == 0) {
 80026ce:	e00e      	b.n	80026ee <main+0x6a6>
					} else {
						error_flag = (AX5243_transmit(data_after_preapare, 28));
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <main+0x744>)
 80026d2:	211c      	movs	r1, #28
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7fe fb8f 	bl	8000df8 <AX5243_transmit>
 80026da:	0003      	movs	r3, r0
 80026dc:	001a      	movs	r2, r3
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <main+0x730>)
 80026e0:	701a      	strb	r2, [r3, #0]
				if (RX_Data_Size == 2 && error_flag == 0) {
 80026e2:	e004      	b.n	80026ee <main+0x6a6>
 80026e4:	e003      	b.n	80026ee <main+0x6a6>
					}
				}
			} else {
				error_flag = 1;
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <main+0x730>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 6 || RX_STR_Size == 14) {
 80026ec:	e1b0      	b.n	8002a50 <main+0xa08>
				if (RX_Data_Size == 2 && error_flag == 0) {
 80026ee:	46c0      	nop			; (mov r8, r8)
			if (RX_STR_Size == 6 || RX_STR_Size == 14) {
 80026f0:	e1ae      	b.n	8002a50 <main+0xa08>
			}
		}

		else if ((u2_rx_buff[0] == 'A') && (u2_rx_buff[1] == 'M')) {    // AM
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <main+0x720>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b41      	cmp	r3, #65	; 0x41
 80026f8:	d14c      	bne.n	8002794 <main+0x74c>
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <main+0x720>)
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	2b4d      	cmp	r3, #77	; 0x4d
 8002700:	d148      	bne.n	8002794 <main+0x74c>
			if (RX_STR_Size == 2) {
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <main+0x724>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d129      	bne.n	800275e <main+0x716>
				for (int i = 0; i < MAX_PKT_TX_NUM && error_flag == 0; i++) {
 800270a:	2300      	movs	r3, #0
 800270c:	22ac      	movs	r2, #172	; 0xac
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e019      	b.n	8002748 <main+0x700>
					preapare_msg_activate(&initData, data_after_preapare);
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <main+0x744>)
 8002716:	003b      	movs	r3, r7
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fd14 	bl	8003148 <preapare_msg_activate>
					error_flag = (AX5243_transmit(data_after_preapare, 20));
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <main+0x744>)
 8002722:	2114      	movs	r1, #20
 8002724:	0018      	movs	r0, r3
 8002726:	f7fe fb67 	bl	8000df8 <AX5243_transmit>
 800272a:	0003      	movs	r3, r0
 800272c:	001a      	movs	r2, r3
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <main+0x730>)
 8002730:	701a      	strb	r2, [r3, #0]

					LL_mDelay(500);
 8002732:	23fa      	movs	r3, #250	; 0xfa
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	0018      	movs	r0, r3
 8002738:	f003 fe02 	bl	8006340 <LL_mDelay>
				for (int i = 0; i < MAX_PKT_TX_NUM && error_flag == 0; i++) {
 800273c:	22ac      	movs	r2, #172	; 0xac
 800273e:	18bb      	adds	r3, r7, r2
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	18ba      	adds	r2, r7, r2
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	23ac      	movs	r3, #172	; 0xac
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	dd00      	ble.n	8002754 <main+0x70c>
 8002752:	e17c      	b.n	8002a4e <main+0xa06>
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <main+0x730>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0db      	beq.n	8002714 <main+0x6cc>
			if (RX_STR_Size == 2) {
 800275c:	e177      	b.n	8002a4e <main+0xa06>
				}
			} else {
				error_flag = 1;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <main+0x730>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 8002764:	e173      	b.n	8002a4e <main+0xa06>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	200000b4 	.word	0x200000b4
 800276c:	200003f4 	.word	0x200003f4
 8002770:	200002a8 	.word	0x200002a8
 8002774:	200000b2 	.word	0x200000b2
 8002778:	20000094 	.word	0x20000094
 800277c:	200002ed 	.word	0x200002ed
 8002780:	08007528 	.word	0x08007528
 8002784:	200000b0 	.word	0x200000b0
 8002788:	200002f0 	.word	0x200002f0
 800278c:	200002ac 	.word	0x200002ac
 8002790:	08007534 	.word	0x08007534
		 USART_TX_Str("Software version:2.0 \n\r");
		 } else {
		 error_flag = 1;
		 }
		 } */
		else if ((u2_rx_buff[0] == 'T') && (u2_rx_buff[1] == 'S')) {
 8002794:	4bba      	ldr	r3, [pc, #744]	; (8002a80 <main+0xa38>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b54      	cmp	r3, #84	; 0x54
 800279a:	d127      	bne.n	80027ec <main+0x7a4>
 800279c:	4bb8      	ldr	r3, [pc, #736]	; (8002a80 <main+0xa38>)
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	2b53      	cmp	r3, #83	; 0x53
 80027a2:	d123      	bne.n	80027ec <main+0x7a4>
			if (RX_STR_Size == 2) {
 80027a4:	4bb7      	ldr	r3, [pc, #732]	; (8002a84 <main+0xa3c>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d11b      	bne.n	80027e4 <main+0x79c>
				USART_TX_Str("Transmitter settings\n\r");
 80027ac:	4bb6      	ldr	r3, [pc, #728]	; (8002a88 <main+0xa40>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fd20 	bl	80031f4 <USART_TX_Str>
				USART_TX_d_VAL("carrier frequency:", f_carrier, 9);
 80027b4:	4bb5      	ldr	r3, [pc, #724]	; (8002a8c <main+0xa44>)
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	4bb5      	ldr	r3, [pc, #724]	; (8002a90 <main+0xa48>)
 80027ba:	2209      	movs	r2, #9
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 fe39 	bl	8003434 <USART_TX_d_VAL>
				USART_TX_d_VAL("transmit power:", PWR_dbm, 2);
 80027c2:	4bb4      	ldr	r3, [pc, #720]	; (8002a94 <main+0xa4c>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	0019      	movs	r1, r3
 80027c8:	4bb3      	ldr	r3, [pc, #716]	; (8002a98 <main+0xa50>)
 80027ca:	2202      	movs	r2, #2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 fe31 	bl	8003434 <USART_TX_d_VAL>
				USART_TX_d_VAL("shaping filter:", shaping_filter, 1);
 80027d2:	4bb2      	ldr	r3, [pc, #712]	; (8002a9c <main+0xa54>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	0019      	movs	r1, r3
 80027d8:	4bb1      	ldr	r3, [pc, #708]	; (8002aa0 <main+0xa58>)
 80027da:	2201      	movs	r2, #1
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fe29 	bl	8003434 <USART_TX_d_VAL>
			if (RX_STR_Size == 2) {
 80027e2:	e135      	b.n	8002a50 <main+0xa08>
			} else {
				error_flag = 1;
 80027e4:	4baf      	ldr	r3, [pc, #700]	; (8002aa4 <main+0xa5c>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 80027ea:	e131      	b.n	8002a50 <main+0xa08>
			}
		} else if ((u2_rx_buff[0] == 'R') && (u2_rx_buff[1] == 'S')) {
 80027ec:	4ba4      	ldr	r3, [pc, #656]	; (8002a80 <main+0xa38>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b52      	cmp	r3, #82	; 0x52
 80027f2:	d10e      	bne.n	8002812 <main+0x7ca>
 80027f4:	4ba2      	ldr	r3, [pc, #648]	; (8002a80 <main+0xa38>)
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b53      	cmp	r3, #83	; 0x53
 80027fa:	d10a      	bne.n	8002812 <main+0x7ca>
			if (RX_STR_Size == 2) {
 80027fc:	4ba1      	ldr	r3, [pc, #644]	; (8002a84 <main+0xa3c>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d102      	bne.n	800280a <main+0x7c2>
				AX5243_rs();
 8002804:	f7fe fd6c 	bl	80012e0 <AX5243_rs>
			if (RX_STR_Size == 2) {
 8002808:	e122      	b.n	8002a50 <main+0xa08>
			} else {
				error_flag = 1;
 800280a:	4ba6      	ldr	r3, [pc, #664]	; (8002aa4 <main+0xa5c>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 8002810:	e11e      	b.n	8002a50 <main+0xa08>
			}

		} else if ((u2_rx_buff[0] == 'D') && (u2_rx_buff[1] == 'A')) {
 8002812:	4b9b      	ldr	r3, [pc, #620]	; (8002a80 <main+0xa38>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b44      	cmp	r3, #68	; 0x44
 8002818:	d14e      	bne.n	80028b8 <main+0x870>
 800281a:	4b99      	ldr	r3, [pc, #612]	; (8002a80 <main+0xa38>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b41      	cmp	r3, #65	; 0x41
 8002820:	d14a      	bne.n	80028b8 <main+0x870>
			if (RX_STR_Size > 2 && RX_STR_Size % 2 == 0) {
 8002822:	4b98      	ldr	r3, [pc, #608]	; (8002a84 <main+0xa3c>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d942      	bls.n	80028b0 <main+0x868>
 800282a:	4b96      	ldr	r3, [pc, #600]	; (8002a84 <main+0xa3c>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	2201      	movs	r2, #1
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d13b      	bne.n	80028b0 <main+0x868>
				initData.DevID_len = (RX_STR_Size - 2) / 2;
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <main+0xa3c>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	3b02      	subs	r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	da00      	bge.n	8002844 <main+0x7fc>
 8002842:	3301      	adds	r3, #1
 8002844:	105b      	asrs	r3, r3, #1
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	003b      	movs	r3, r7
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	5499      	strb	r1, [r3, r2]

				for (int i = 0; i < initData.DevID_len; i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	22a8      	movs	r2, #168	; 0xa8
 8002852:	18ba      	adds	r2, r7, r2
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <main+0x84c>
					initData.DevID[i] = AsciiToHex(u2_rx_buff[2 + i * 2],
 8002858:	24a8      	movs	r4, #168	; 0xa8
 800285a:	193b      	adds	r3, r7, r4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4a87      	ldr	r2, [pc, #540]	; (8002a80 <main+0xa38>)
 8002864:	5cd0      	ldrb	r0, [r2, r3]
							u2_rx_buff[2 + i * 2 + 1]);
 8002866:	193b      	adds	r3, r7, r4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	3301      	adds	r3, #1
					initData.DevID[i] = AsciiToHex(u2_rx_buff[2 + i * 2],
 8002870:	4a83      	ldr	r2, [pc, #524]	; (8002a80 <main+0xa38>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	0019      	movs	r1, r3
 8002876:	f000 ffa9 	bl	80037cc <AsciiToHex>
 800287a:	0003      	movs	r3, r0
 800287c:	0019      	movs	r1, r3
 800287e:	003a      	movs	r2, r7
 8002880:	193b      	adds	r3, r7, r4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	18d3      	adds	r3, r2, r3
 8002886:	1c0a      	adds	r2, r1, #0
 8002888:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < initData.DevID_len; i++) {
 800288a:	193b      	adds	r3, r7, r4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	193a      	adds	r2, r7, r4
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	003b      	movs	r3, r7
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	001a      	movs	r2, r3
 800289c:	23a8      	movs	r3, #168	; 0xa8
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	dbd8      	blt.n	8002858 <main+0x810>
				}

				FLASH_Write_Data(&initData);
 80028a6:	003b      	movs	r3, r7
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fba1 	bl	8001ff0 <FLASH_Write_Data>
			if (RX_STR_Size > 2 && RX_STR_Size % 2 == 0) {
 80028ae:	e0cf      	b.n	8002a50 <main+0xa08>
			} else {
				error_flag = 1;
 80028b0:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <main+0xa5c>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size > 2 && RX_STR_Size % 2 == 0) {
 80028b6:	e0cb      	b.n	8002a50 <main+0xa08>
			}
		} else if ((u2_rx_buff[0] == 'K') && (u2_rx_buff[1] == '0')) {
 80028b8:	4b71      	ldr	r3, [pc, #452]	; (8002a80 <main+0xa38>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b4b      	cmp	r3, #75	; 0x4b
 80028be:	d14e      	bne.n	800295e <main+0x916>
 80028c0:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <main+0xa38>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b30      	cmp	r3, #48	; 0x30
 80028c6:	d14a      	bne.n	800295e <main+0x916>
			if (RX_STR_Size == 2) {
 80028c8:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <main+0xa3c>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d142      	bne.n	8002956 <main+0x90e>
				for (int i = 0; i < sizeof(initData.K0); i++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	22a4      	movs	r2, #164	; 0xa4
 80028d4:	18ba      	adds	r2, r7, r2
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e011      	b.n	80028fe <main+0x8b6>
					initData.K0[i] = rand() & 0xFF;
 80028da:	f003 fd9d 	bl	8006418 <rand>
 80028de:	0003      	movs	r3, r0
 80028e0:	b2d8      	uxtb	r0, r3
 80028e2:	003a      	movs	r2, r7
 80028e4:	2141      	movs	r1, #65	; 0x41
 80028e6:	24a4      	movs	r4, #164	; 0xa4
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	185b      	adds	r3, r3, r1
 80028f0:	1c02      	adds	r2, r0, #0
 80028f2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < sizeof(initData.K0); i++) {
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	193a      	adds	r2, r7, r4
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	23a4      	movs	r3, #164	; 0xa4
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b0f      	cmp	r3, #15
 8002906:	d9e8      	bls.n	80028da <main+0x892>
				}

				USART_TX_Str("K0: ");
 8002908:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <main+0xa60>)
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fc72 	bl	80031f4 <USART_TX_Str>
				for (int i = 0; i < sizeof(initData.K0); i++) {
 8002910:	2300      	movs	r3, #0
 8002912:	22a0      	movs	r2, #160	; 0xa0
 8002914:	18ba      	adds	r2, r7, r2
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e00f      	b.n	800293a <main+0x8f2>
					USART_TX_h_VAL_without_text(initData.K0[i]);
 800291a:	003a      	movs	r2, r7
 800291c:	2141      	movs	r1, #65	; 0x41
 800291e:	24a0      	movs	r4, #160	; 0xa0
 8002920:	193b      	adds	r3, r7, r4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	18d3      	adds	r3, r2, r3
 8002926:	185b      	adds	r3, r3, r1
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fd26 	bl	800337c <USART_TX_h_VAL_without_text>
				for (int i = 0; i < sizeof(initData.K0); i++) {
 8002930:	193b      	adds	r3, r7, r4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	193a      	adds	r2, r7, r4
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	23a0      	movs	r3, #160	; 0xa0
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d9ea      	bls.n	800291a <main+0x8d2>
				}
				USART_TX_Str("\n\r");
 8002944:	4b59      	ldr	r3, [pc, #356]	; (8002aac <main+0xa64>)
 8002946:	0018      	movs	r0, r3
 8002948:	f000 fc54 	bl	80031f4 <USART_TX_Str>

				FLASH_Write_Data(&initData);
 800294c:	003b      	movs	r3, r7
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff fb4e 	bl	8001ff0 <FLASH_Write_Data>
			if (RX_STR_Size == 2) {
 8002954:	e07c      	b.n	8002a50 <main+0xa08>
			} else {
				error_flag = 1;
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <main+0xa5c>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 800295c:	e078      	b.n	8002a50 <main+0xa08>
			}

		} else if ((u2_rx_buff[0] == 'E') && (u2_rx_buff[1] == 'F')) {
 800295e:	4b48      	ldr	r3, [pc, #288]	; (8002a80 <main+0xa38>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b45      	cmp	r3, #69	; 0x45
 8002964:	d114      	bne.n	8002990 <main+0x948>
 8002966:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <main+0xa38>)
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	2b46      	cmp	r3, #70	; 0x46
 800296c:	d110      	bne.n	8002990 <main+0x948>
			if (RX_STR_Size == 2) {
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <main+0xa3c>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d108      	bne.n	8002988 <main+0x940>
				FLASH_Unlock();
 8002976:	f7ff faab 	bl	8001ed0 <FLASH_Unlock>
				FLASH_ClearPage(FLASH_CONST_ADDR);
 800297a:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <main+0xa68>)
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff facb 	bl	8001f18 <FLASH_ClearPage>
				FLASH_Lock();
 8002982:	f7ff fabb 	bl	8001efc <FLASH_Lock>
			if (RX_STR_Size == 2) {
 8002986:	e063      	b.n	8002a50 <main+0xa08>
			} else {
				error_flag = 1;
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <main+0xa5c>)
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 800298e:	e05f      	b.n	8002a50 <main+0xa08>
			}

		} else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'C')) {
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <main+0xa38>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b53      	cmp	r3, #83	; 0x53
 8002996:	d14c      	bne.n	8002a32 <main+0x9ea>
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <main+0xa38>)
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	2b43      	cmp	r3, #67	; 0x43
 800299e:	d148      	bne.n	8002a32 <main+0x9ea>
			if (RX_STR_Size == 2) {
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <main+0xa3c>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d140      	bne.n	8002a2a <main+0x9e2>

				USART_TX_Str("Supported Commands:\n\r");
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <main+0xa6c>)
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 fc22 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("AT-communication test,\n\r");
 80029b0:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <main+0xa70>)
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fc1e 	bl	80031f4 <USART_TX_Str>
				//USART_TX_Str("FRxxxxxxxxx-carrier frequency,\n\r");
				USART_TX_Str("PWxx-transmitter power,\n\r");
 80029b8:	4b40      	ldr	r3, [pc, #256]	; (8002abc <main+0xa74>)
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fc1a 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("SV-software version,\n\r");
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <main+0xa78>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fc16 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("TRzz...z-raw data transfer,\n\r");
 80029c8:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <main+0xa7c>)
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fc12 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("TS-transmitter settings,\n\r");
 80029d0:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <main+0xa80>)
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fc0e 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("RS-module reboot,\n\r");
 80029d8:	4b3c      	ldr	r3, [pc, #240]	; (8002acc <main+0xa84>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 fc0a 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("SC-command list,\n\r");
 80029e0:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <main+0xa88>)
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 fc06 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("PDx-Phase direction.\n\r");
 80029e8:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <main+0xa8c>)
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fc02 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("DAxx..xx - device address.\n\r");
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <main+0xa90>)
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fbfe 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("K0 - generate new device key.\n\r");
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <main+0xa94>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fbfa 	bl	80031f4 <USART_TX_Str>
				USART_TX_Str("EF - erase flash data device.\n\r");
 8002a00:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <main+0xa98>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fbf6 	bl	80031f4 <USART_TX_Str>
				//		"IWxxyyzz - Writing to an external sensor by I2C. xx-sensor address, yy-register address, zz-value,\n\r");
				//USART_TX_Str(
				//		"SRxx - Reading an external sensor by SPI. xx- register address,\n\r");
				//USART_TX_Str(
				//		"SWxxyy - Write to external sensor by SPI. xx- register address, yy- register value,\n\r");
				USART_TX_Str(
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <main+0xa9c>)
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 fbf2 	bl	80031f4 <USART_TX_Str>
						"NTxx..x- Data transfer by OpenUNB protocol (data length 2 or 6 bytes),\n\r");
				USART_TX_Str(
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <main+0xaa0>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 fbee 	bl	80031f4 <USART_TX_Str>
						"AM- transmission of the OpenUNB activation message,\n\r");
				USART_TX_Str(
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <main+0xaa4>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fbea 	bl	80031f4 <USART_TX_Str>
						"NIxxyy - Reading external sensor by I2C and send by OpenUNB protocol. xx - sensor address, yy - register address,\n\r");
				USART_TX_Str(
 8002a20:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <main+0xaa8>)
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 fbe6 	bl	80031f4 <USART_TX_Str>
			if (RX_STR_Size == 2) {
 8002a28:	e012      	b.n	8002a50 <main+0xa08>
						"NSxx - Reading external sensor by SPI and sending by OpenUNB protocol. xx- register address.\n\r");

			} else {
				error_flag = 1;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <main+0xa5c>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
			if (RX_STR_Size == 2) {
 8002a30:	e00e      	b.n	8002a50 <main+0xa08>
			}
		}

		else {
			error_flag = 1;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <main+0xa5c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e00a      	b.n	8002a50 <main+0xa08>
			if (RX_STR_Size == 4) {
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	e008      	b.n	8002a50 <main+0xa08>
			if (RX_STR_Size == 3) {
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	e006      	b.n	8002a50 <main+0xa08>
			if (RX_STR_Size == 6) {
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	e004      	b.n	8002a50 <main+0xa08>
			if (RX_STR_Size == 4) {
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	e002      	b.n	8002a50 <main+0xa08>
			if (RX_STR_Size == 6) {
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	e000      	b.n	8002a50 <main+0xa08>
			if (RX_STR_Size == 2) {
 8002a4e:	46c0      	nop			; (mov r8, r8)
		}
		if (!error_flag) {
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <main+0xa5c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <main+0xa20>
			USART_TX_Str("OK\n\r");
 8002a58:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <main+0xaac>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fbca 	bl	80031f4 <USART_TX_Str>
			error_flag = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <main+0xa5c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e006      	b.n	8002a76 <main+0xa2e>
		} else {
			USART_TX_Str("ERROR\n\r");
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <main+0xab0>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 fbc2 	bl	80031f4 <USART_TX_Str>
			error_flag = 0;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <main+0xa5c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
		}
		LL_mDelay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f003 fc62 	bl	8006340 <LL_mDelay>
		RX_STR_Size = USART_RX_Str();
 8002a7c:	f7ff fc0b 	bl	8002296 <main+0x24e>
 8002a80:	200000b4 	.word	0x200000b4
 8002a84:	200003f4 	.word	0x200003f4
 8002a88:	08007544 	.word	0x08007544
 8002a8c:	200000ac 	.word	0x200000ac
 8002a90:	0800755c 	.word	0x0800755c
 8002a94:	200002ee 	.word	0x200002ee
 8002a98:	08007570 	.word	0x08007570
 8002a9c:	200003f6 	.word	0x200003f6
 8002aa0:	08007580 	.word	0x08007580
 8002aa4:	20000094 	.word	0x20000094
 8002aa8:	08007520 	.word	0x08007520
 8002aac:	0800751c 	.word	0x0800751c
 8002ab0:	08007e00 	.word	0x08007e00
 8002ab4:	08007590 	.word	0x08007590
 8002ab8:	080075a8 	.word	0x080075a8
 8002abc:	080075c4 	.word	0x080075c4
 8002ac0:	080075e0 	.word	0x080075e0
 8002ac4:	080075f8 	.word	0x080075f8
 8002ac8:	08007618 	.word	0x08007618
 8002acc:	08007634 	.word	0x08007634
 8002ad0:	08007648 	.word	0x08007648
 8002ad4:	0800765c 	.word	0x0800765c
 8002ad8:	08007674 	.word	0x08007674
 8002adc:	08007694 	.word	0x08007694
 8002ae0:	080076b4 	.word	0x080076b4
 8002ae4:	080076d4 	.word	0x080076d4
 8002ae8:	08007720 	.word	0x08007720
 8002aec:	08007758 	.word	0x08007758
 8002af0:	080077cc 	.word	0x080077cc
 8002af4:	0800782c 	.word	0x0800782c
 8002af8:	08007834 	.word	0x08007834

08002afc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff f8ab 	bl	8001c5c <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	f7ff f8bc 	bl	8001c84 <LL_FLASH_GetLatency>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d1fb      	bne.n	8002b08 <SystemClock_Config+0xc>
	}
	LL_RCC_HSE_EnableBypass();
 8002b10:	f7fe ffa4 	bl	8001a5c <LL_RCC_HSE_EnableBypass>
	LL_RCC_HSE_Enable();
 8002b14:	f7fe ffb0 	bl	8001a78 <LL_RCC_HSE_Enable>

	/* Wait till HSE is ready */
	while (LL_RCC_HSE_IsReady() != 1) {
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	f7fe ffbb 	bl	8001a94 <LL_RCC_HSE_IsReady>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d1fa      	bne.n	8002b1a <SystemClock_Config+0x1e>

	}
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLL_MUL_8,
 8002b24:	23c0      	movs	r3, #192	; 0xc0
 8002b26:	0359      	lsls	r1, r3, #13
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	025b      	lsls	r3, r3, #9
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff f830 	bl	8001b94 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PREDIV_DIV_1);
	LL_RCC_PLL_Enable();
 8002b34:	f7ff f80c 	bl	8001b50 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	f7ff f817 	bl	8001b6c <LL_RCC_PLL_IsReady>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d1fa      	bne.n	8002b3a <SystemClock_Config+0x3e>

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe ffd9 	bl	8001afc <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe ffea 	bl	8001b24 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002b50:	2002      	movs	r0, #2
 8002b52:	f7fe ffb3 	bl	8001abc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	f7fe ffc4 	bl	8001ae4 <LL_RCC_GetSysClkSource>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d1fa      	bne.n	8002b58 <SystemClock_Config+0x5c>

	}
	LL_Init1msTick(24000000);
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SystemClock_Config+0x7c>)
 8002b64:	0018      	movs	r0, r3
 8002b66:	f003 fbdb 	bl	8006320 <LL_Init1msTick>
	LL_SetSystemCoreClock(24000000);
 8002b6a:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <SystemClock_Config+0x7c>)
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f003 fc09 	bl	8006384 <LL_SetSystemCoreClock>
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	016e3600 	.word	0x016e3600

08002b7c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	0018      	movs	r0, r3
 8002b86:	2314      	movs	r3, #20
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f003 fc3b 	bl	8006406 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f7ff f837 	bl	8001c04 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	TIM_InitStruct.Prescaler = 24000;
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <MX_TIM2_Init+0x78>)
 8002b9a:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 4294967295;
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4252      	negs	r2, r2
 8002ba8:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002bb0:	1d3a      	adds	r2, r7, #4
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	05db      	lsls	r3, r3, #23
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f003 fa41 	bl	8006040 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM2);
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7ff f886 	bl	8001cd4 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	05db      	lsls	r3, r3, #23
 8002bcc:	2100      	movs	r1, #0
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff f890 	bl	8001cf4 <LL_TIM_SetClockSource>
	LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	2100      	movs	r1, #0
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff f89e 	bl	8001d1c <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM2);
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	05db      	lsls	r3, r3, #23
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff f8ab 	bl	8001d40 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	00005dc0 	.word	0x00005dc0

08002bf8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	0018      	movs	r0, r3
 8002c02:	2314      	movs	r3, #20
 8002c04:	001a      	movs	r2, r3
 8002c06:	2100      	movs	r1, #0
 8002c08:	f003 fbfd 	bl	8006406 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f7fe fff9 	bl	8001c04 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	TIM_InitStruct.Prescaler = 21;
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	2215      	movs	r2, #21
 8002c16:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 65533;
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <MX_TIM3_Init+0x6c>)
 8002c22:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <MX_TIM3_Init+0x70>)
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0010      	movs	r0, r2
 8002c32:	f003 fa05 	bl	8006040 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM3);
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_TIM3_Init+0x70>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff f84b 	bl	8001cd4 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <MX_TIM3_Init+0x70>)
 8002c40:	2100      	movs	r1, #0
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff f856 	bl	8001cf4 <LL_TIM_SetClockSource>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <MX_TIM3_Init+0x70>)
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff f865 	bl	8001d1c <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <MX_TIM3_Init+0x70>)
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff f873 	bl	8001d40 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b006      	add	sp, #24
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	0000fffd 	.word	0x0000fffd
 8002c68:	40000400 	.word	0x40000400

08002c6c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b08f      	sub	sp, #60	; 0x3c
 8002c70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8002c72:	241c      	movs	r4, #28
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	0018      	movs	r0, r3
 8002c78:	231c      	movs	r3, #28
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	f003 fbc2 	bl	8006406 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	0018      	movs	r0, r3
 8002c86:	2318      	movs	r3, #24
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	f003 fbbb 	bl	8006406 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	029b      	lsls	r3, r3, #10
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7fe ffb5 	bl	8001c04 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	029b      	lsls	r3, r3, #10
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7fe ff9a 	bl	8001bd8 <LL_AHB1_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2202      	movs	r2, #2
 8002cae:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	1d3a      	adds	r2, r7, #4
 8002cca:	2390      	movs	r3, #144	; 0x90
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f002 ffa5 	bl	8005c20 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	2208      	movs	r2, #8
 8002cda:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2202      	movs	r2, #2
 8002ce0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	1d3a      	adds	r2, r7, #4
 8002cfc:	2390      	movs	r3, #144	; 0x90
 8002cfe:	05db      	lsls	r3, r3, #23
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f002 ff8c 	bl	8005c20 <LL_GPIO_Init>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	22e1      	movs	r2, #225	; 0xe1
 8002d0c:	0252      	lsls	r2, r2, #9
 8002d0e:	601a      	str	r2, [r3, #0]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d10:	0021      	movs	r1, r4
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	220c      	movs	r2, #12
 8002d28:	611a      	str	r2, [r3, #16]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
	LL_USART_Init(USART2, &USART_InitStruct);
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <MX_USART2_UART_Init+0xf8>)
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f003 fa6d 	bl	800621c <LL_USART_Init>
	LL_USART_DisableIT_CTS(USART2);
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <MX_USART2_UART_Init+0xf8>)
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff f88b 	bl	8001e60 <LL_USART_DisableIT_CTS>
	LL_USART_ConfigAsyncMode(USART2);
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_USART2_UART_Init+0xf8>)
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff f831 	bl	8001db4 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <MX_USART2_UART_Init+0xf8>)
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff f802 	bl	8001d5e <LL_USART_Enable>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b00f      	add	sp, #60	; 0x3c
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40004400 	.word	0x40004400

08002d68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002d6e:	003b      	movs	r3, r7
 8002d70:	0018      	movs	r0, r3
 8002d72:	2318      	movs	r3, #24
 8002d74:	001a      	movs	r2, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	f003 fb45 	bl	8006406 <memset>

	/* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	03db      	lsls	r3, r3, #15
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7fe ff29 	bl	8001bd8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	029b      	lsls	r3, r3, #10
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7fe ff24 	bl	8001bd8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	02db      	lsls	r3, r3, #11
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fe ff1f 	bl	8001bd8 <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_SetOutputPin(GPIOF, LL_GPIO_PIN_1);
 8002d9a:	4b7c      	ldr	r3, [pc, #496]	; (8002f8c <MX_GPIO_Init+0x224>)
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7ff f87e 	bl	8001ea0 <LL_GPIO_SetOutputPin>

	/**/
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8002da4:	2390      	movs	r3, #144	; 0x90
 8002da6:	05db      	lsls	r3, r3, #23
 8002da8:	2101      	movs	r1, #1
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7ff f878 	bl	8001ea0 <LL_GPIO_SetOutputPin>

	/**/
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8002db0:	2390      	movs	r3, #144	; 0x90
 8002db2:	05db      	lsls	r3, r3, #23
 8002db4:	2102      	movs	r1, #2
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7ff f872 	bl	8001ea0 <LL_GPIO_SetOutputPin>

	/**/
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	2390      	movs	r3, #144	; 0x90
 8002dc2:	05db      	lsls	r3, r3, #23
 8002dc4:	0011      	movs	r1, r2
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7ff f86a 	bl	8001ea0 <LL_GPIO_SetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002dcc:	2390      	movs	r3, #144	; 0x90
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7ff f870 	bl	8001eb8 <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8002dd8:	2390      	movs	r3, #144	; 0x90
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff f86a 	bl	8001eb8 <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8002de4:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <MX_GPIO_Init+0x228>)
 8002de6:	2102      	movs	r1, #2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff f865 	bl	8001eb8 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002dee:	003b      	movs	r3, r7
 8002df0:	2202      	movs	r2, #2
 8002df2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df4:	003b      	movs	r3, r7
 8002df6:	2201      	movs	r2, #1
 8002df8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002dfa:	003b      	movs	r3, r7
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e00:	003b      	movs	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e06:	003b      	movs	r3, r7
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e0c:	003b      	movs	r3, r7
 8002e0e:	4a5f      	ldr	r2, [pc, #380]	; (8002f8c <MX_GPIO_Init+0x224>)
 8002e10:	0019      	movs	r1, r3
 8002e12:	0010      	movs	r0, r2
 8002e14:	f002 ff04 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002e18:	003b      	movs	r3, r7
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e1e:	003b      	movs	r3, r7
 8002e20:	2201      	movs	r2, #1
 8002e22:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e24:	003b      	movs	r3, r7
 8002e26:	2203      	movs	r2, #3
 8002e28:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002e2a:	003b      	movs	r3, r7
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e30:	003b      	movs	r3, r7
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	003a      	movs	r2, r7
 8002e38:	2390      	movs	r3, #144	; 0x90
 8002e3a:	05db      	lsls	r3, r3, #23
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f002 feee 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002e44:	003b      	movs	r3, r7
 8002e46:	2202      	movs	r2, #2
 8002e48:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e4a:	003b      	movs	r3, r7
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e50:	003b      	movs	r3, r7
 8002e52:	2203      	movs	r2, #3
 8002e54:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002e56:	003b      	movs	r3, r7
 8002e58:	2201      	movs	r2, #1
 8002e5a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	003a      	movs	r2, r7
 8002e64:	2390      	movs	r3, #144	; 0x90
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f002 fed8 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002e70:	003b      	movs	r3, r7
 8002e72:	2210      	movs	r2, #16
 8002e74:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e76:	003b      	movs	r3, r7
 8002e78:	2201      	movs	r2, #1
 8002e7a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e7c:	003b      	movs	r3, r7
 8002e7e:	2203      	movs	r2, #3
 8002e80:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e82:	003b      	movs	r3, r7
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e88:	003b      	movs	r3, r7
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	003a      	movs	r2, r7
 8002e90:	2390      	movs	r3, #144	; 0x90
 8002e92:	05db      	lsls	r3, r3, #23
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f002 fec2 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002e9c:	003b      	movs	r3, r7
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	003a      	movs	r2, r7
 8002eb0:	2390      	movs	r3, #144	; 0x90
 8002eb2:	05db      	lsls	r3, r3, #23
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f002 feb2 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002ebc:	003b      	movs	r3, r7
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ec2:	003b      	movs	r3, r7
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ec8:	003b      	movs	r3, r7
 8002eca:	2203      	movs	r2, #3
 8002ecc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ece:	003b      	movs	r3, r7
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	003a      	movs	r2, r7
 8002edc:	2390      	movs	r3, #144	; 0x90
 8002ede:	05db      	lsls	r3, r3, #23
 8002ee0:	0011      	movs	r1, r2
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f002 fe9c 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002ee8:	003b      	movs	r3, r7
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002eee:	003b      	movs	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ef4:	003b      	movs	r3, r7
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	003a      	movs	r2, r7
 8002efc:	2390      	movs	r3, #144	; 0x90
 8002efe:	05db      	lsls	r3, r3, #23
 8002f00:	0011      	movs	r1, r2
 8002f02:	0018      	movs	r0, r3
 8002f04:	f002 fe8c 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002f08:	003b      	movs	r3, r7
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f0e:	003b      	movs	r3, r7
 8002f10:	2201      	movs	r2, #1
 8002f12:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f14:	003b      	movs	r3, r7
 8002f16:	2203      	movs	r2, #3
 8002f18:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f1a:	003b      	movs	r3, r7
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f20:	003b      	movs	r3, r7
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	003b      	movs	r3, r7
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <MX_GPIO_Init+0x228>)
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	f002 fe77 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002f32:	003b      	movs	r3, r7
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f3a:	003b      	movs	r3, r7
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f40:	003b      	movs	r3, r7
 8002f42:	2203      	movs	r2, #3
 8002f44:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f46:	003b      	movs	r3, r7
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f4c:	003b      	movs	r3, r7
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	003a      	movs	r2, r7
 8002f54:	2390      	movs	r3, #144	; 0x90
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f002 fe60 	bl	8005c20 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002f60:	003b      	movs	r3, r7
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	00d2      	lsls	r2, r2, #3
 8002f66:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002f68:	003b      	movs	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f6e:	003b      	movs	r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	003a      	movs	r2, r7
 8002f76:	2390      	movs	r3, #144	; 0x90
 8002f78:	05db      	lsls	r3, r3, #23
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f002 fe4f 	bl	8005c20 <LL_GPIO_Init>

}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b006      	add	sp, #24
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	48001400 	.word	0x48001400
 8002f90:	48000400 	.word	0x48000400

08002f94 <preapare_msg_16bit>:

/* USER CODE BEGIN 4 */

int preapare_msg_16bit(struct encrypt_data_t *initData, uint8_t *in,
		uint8_t *out) {
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b0c9      	sub	sp, #292	; 0x124
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
	uint8_t buff1[256];

	int ret = encodeData(initData, in, buff1, 2, msTicks);
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <preapare_msg_16bit+0xb8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	18ba      	adds	r2, r7, r2
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f001 f878 	bl	80040a4 <encodeData>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	2288      	movs	r2, #136	; 0x88
 8002fb8:	0052      	lsls	r2, r2, #1
 8002fba:	18b9      	adds	r1, r7, r2
 8002fbc:	600b      	str	r3, [r1, #0]

	if (ret < 0)
 8002fbe:	18bb      	adds	r3, r7, r2
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da02      	bge.n	8002fcc <preapare_msg_16bit+0x38>
		return ret;
 8002fc6:	18bb      	adds	r3, r7, r2
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	e03b      	b.n	8003044 <preapare_msg_16bit+0xb0>

	USART_TX_Str("Sending data: ");
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <preapare_msg_16bit+0xbc>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f910 	bl	80031f4 <USART_TX_Str>
	for (int i=7; i >= 0; i--) {
 8002fd4:	2307      	movs	r3, #7
 8002fd6:	228a      	movs	r2, #138	; 0x8a
 8002fd8:	0052      	lsls	r2, r2, #1
 8002fda:	18ba      	adds	r2, r7, r2
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e012      	b.n	8003006 <preapare_msg_16bit+0x72>
		USART_TX_h_VAL_without_text(buff1[i]);
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <preapare_msg_16bit+0xc0>)
 8002fe2:	228c      	movs	r2, #140	; 0x8c
 8002fe4:	0052      	lsls	r2, r2, #1
 8002fe6:	18ba      	adds	r2, r7, r2
 8002fe8:	18d2      	adds	r2, r2, r3
 8002fea:	248a      	movs	r4, #138	; 0x8a
 8002fec:	0064      	lsls	r4, r4, #1
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f9c0 	bl	800337c <USART_TX_h_VAL_without_text>
	for (int i=7; i >= 0; i--) {
 8002ffc:	193b      	adds	r3, r7, r4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3b01      	subs	r3, #1
 8003002:	193a      	adds	r2, r7, r4
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	238a      	movs	r3, #138	; 0x8a
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	dae6      	bge.n	8002fe0 <preapare_msg_16bit+0x4c>
	}
	USART_TX_Str("\n\r");
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <preapare_msg_16bit+0xc4>)
 8003014:	0018      	movs	r0, r3
 8003016:	f000 f8ed 	bl	80031f4 <USART_TX_Str>

	encode64(buff1, out + 4);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1d1a      	adds	r2, r3, #4
 800301e:	2310      	movs	r3, #16
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f002 fac1 	bl	80055ac <encode64>
	memcpy(out, &PREAMB, sizeof(PREAMB));
 800302a:	490c      	ldr	r1, [pc, #48]	; (800305c <preapare_msg_16bit+0xc8>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2204      	movs	r2, #4
 8003030:	0018      	movs	r0, r3
 8003032:	f003 f9df 	bl	80063f4 <memcpy>


	to_diff(out, out, 20);
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2214      	movs	r2, #20
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fd49 	bl	8003ad4 <to_diff>

	return 0;
 8003042:	2300      	movs	r3, #0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b047      	add	sp, #284	; 0x11c
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	200003f0 	.word	0x200003f0
 8003050:	0800783c 	.word	0x0800783c
 8003054:	fffffef8 	.word	0xfffffef8
 8003058:	0800751c 	.word	0x0800751c
 800305c:	08007850 	.word	0x08007850

08003060 <preapare_msg_48bit>:

int preapare_msg_48bit(struct encrypt_data_t *initData, uint8_t *in,
		uint8_t *out) {
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b0c9      	sub	sp, #292	; 0x124
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
	uint8_t buff1[256] = {0};
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <preapare_msg_48bit+0xd4>)
 800306e:	228c      	movs	r2, #140	; 0x8c
 8003070:	0052      	lsls	r2, r2, #1
 8003072:	4694      	mov	ip, r2
 8003074:	44bc      	add	ip, r7
 8003076:	4463      	add	r3, ip
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	22fc      	movs	r2, #252	; 0xfc
 8003080:	2100      	movs	r1, #0
 8003082:	0018      	movs	r0, r3
 8003084:	f003 f9bf 	bl	8006406 <memset>

	int ret = encodeData(initData, in, buff1, 6, msTicks);
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <preapare_msg_48bit+0xd8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	18ba      	adds	r2, r7, r2
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2306      	movs	r3, #6
 8003098:	f001 f804 	bl	80040a4 <encodeData>
 800309c:	0003      	movs	r3, r0
 800309e:	2288      	movs	r2, #136	; 0x88
 80030a0:	0052      	lsls	r2, r2, #1
 80030a2:	18b9      	adds	r1, r7, r2
 80030a4:	600b      	str	r3, [r1, #0]

	if (ret < 0)
 80030a6:	18bb      	adds	r3, r7, r2
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da02      	bge.n	80030b4 <preapare_msg_48bit+0x54>
		return ret;
 80030ae:	18bb      	adds	r3, r7, r2
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e03b      	b.n	800312c <preapare_msg_48bit+0xcc>

	USART_TX_Str("Sending data: ");
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <preapare_msg_48bit+0xdc>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f89c 	bl	80031f4 <USART_TX_Str>
	for (int i=11; i >= 0; i--) {
 80030bc:	230b      	movs	r3, #11
 80030be:	228a      	movs	r2, #138	; 0x8a
 80030c0:	0052      	lsls	r2, r2, #1
 80030c2:	18ba      	adds	r2, r7, r2
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e012      	b.n	80030ee <preapare_msg_48bit+0x8e>
		USART_TX_h_VAL_without_text(buff1[i]);
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <preapare_msg_48bit+0xd4>)
 80030ca:	228c      	movs	r2, #140	; 0x8c
 80030cc:	0052      	lsls	r2, r2, #1
 80030ce:	18ba      	adds	r2, r7, r2
 80030d0:	18d2      	adds	r2, r2, r3
 80030d2:	248a      	movs	r4, #138	; 0x8a
 80030d4:	0064      	lsls	r4, r4, #1
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	18d3      	adds	r3, r2, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 f94c 	bl	800337c <USART_TX_h_VAL_without_text>
	for (int i=11; i >= 0; i--) {
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	193a      	adds	r2, r7, r4
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	238a      	movs	r3, #138	; 0x8a
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	dae6      	bge.n	80030c8 <preapare_msg_48bit+0x68>
	}
	USART_TX_Str("\n\r");
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <preapare_msg_48bit+0xe0>)
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f879 	bl	80031f4 <USART_TX_Str>

	encode96(buff1, out + 4);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1d1a      	adds	r2, r3, #4
 8003106:	2310      	movs	r3, #16
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f002 fa19 	bl	8005544 <encode96>
	memcpy(out, &PREAMB, sizeof(PREAMB));
 8003112:	490c      	ldr	r1, [pc, #48]	; (8003144 <preapare_msg_48bit+0xe4>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2204      	movs	r2, #4
 8003118:	0018      	movs	r0, r3
 800311a:	f003 f96b 	bl	80063f4 <memcpy>


	to_diff(out, out, 28);
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	221c      	movs	r2, #28
 8003124:	0018      	movs	r0, r3
 8003126:	f000 fcd5 	bl	8003ad4 <to_diff>

	return 0;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b047      	add	sp, #284	; 0x11c
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	fffffef8 	.word	0xfffffef8
 8003138:	200003f0 	.word	0x200003f0
 800313c:	0800783c 	.word	0x0800783c
 8003140:	0800751c 	.word	0x0800751c
 8003144:	08007850 	.word	0x08007850

08003148 <preapare_msg_activate>:

void preapare_msg_activate(struct encrypt_data_t *initData, uint8_t *out) {
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b0c5      	sub	sp, #276	; 0x114
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	uint8_t buff1[256];

	encodeActivateMsg(initData, buff1, msTicks);
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <preapare_msg_activate+0x98>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	230c      	movs	r3, #12
 8003158:	18f9      	adds	r1, r7, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	0018      	movs	r0, r3
 800315e:	f000 fe4f 	bl	8003e00 <encodeActivateMsg>

	USART_TX_Str("Sending data: ");
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <preapare_msg_activate+0x9c>)
 8003164:	0018      	movs	r0, r3
 8003166:	f000 f845 	bl	80031f4 <USART_TX_Str>
	for (int i=7; i >= 0; i--) {
 800316a:	2307      	movs	r3, #7
 800316c:	2286      	movs	r2, #134	; 0x86
 800316e:	0052      	lsls	r2, r2, #1
 8003170:	18ba      	adds	r2, r7, r2
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e012      	b.n	800319c <preapare_msg_activate+0x54>
		USART_TX_h_VAL_without_text(buff1[i]);
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <preapare_msg_activate+0xa0>)
 8003178:	2288      	movs	r2, #136	; 0x88
 800317a:	0052      	lsls	r2, r2, #1
 800317c:	18ba      	adds	r2, r7, r2
 800317e:	18d2      	adds	r2, r2, r3
 8003180:	2486      	movs	r4, #134	; 0x86
 8003182:	0064      	lsls	r4, r4, #1
 8003184:	193b      	adds	r3, r7, r4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f8f5 	bl	800337c <USART_TX_h_VAL_without_text>
	for (int i=7; i >= 0; i--) {
 8003192:	193b      	adds	r3, r7, r4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3b01      	subs	r3, #1
 8003198:	193a      	adds	r2, r7, r4
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	2386      	movs	r3, #134	; 0x86
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	dae6      	bge.n	8003176 <preapare_msg_activate+0x2e>
	}
	USART_TX_Str("\n\r");
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <preapare_msg_activate+0xa4>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 f822 	bl	80031f4 <USART_TX_Str>

	encode64(buff1, out + 4);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	1d1a      	adds	r2, r3, #4
 80031b4:	230c      	movs	r3, #12
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f002 f9f6 	bl	80055ac <encode64>

	memcpy(out, &PREAMB, sizeof(PREAMB));
 80031c0:	490b      	ldr	r1, [pc, #44]	; (80031f0 <preapare_msg_activate+0xa8>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2204      	movs	r2, #4
 80031c6:	0018      	movs	r0, r3
 80031c8:	f003 f914 	bl	80063f4 <memcpy>

	to_diff(out, out, 20);
 80031cc:	6839      	ldr	r1, [r7, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2214      	movs	r2, #20
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 fc7e 	bl	8003ad4 <to_diff>
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b045      	add	sp, #276	; 0x114
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	200003f0 	.word	0x200003f0
 80031e4:	0800783c 	.word	0x0800783c
 80031e8:	fffffefc 	.word	0xfffffefc
 80031ec:	0800751c 	.word	0x0800751c
 80031f0:	08007850 	.word	0x08007850

080031f4 <USART_TX_Str>:
		LL_USART_TransmitData8(USART2, dt[in]);
		in++;
	}
}

void USART_TX_Str(char *string) {
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(string);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7fc ff82 	bl	8000108 <strlen>
 8003204:	0002      	movs	r2, r0
 8003206:	230c      	movs	r3, #12
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800320c:	230e      	movs	r3, #14
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2200      	movs	r2, #0
 8003212:	801a      	strh	r2, [r3, #0]
	while (i < size) {
 8003214:	e016      	b.n	8003244 <USART_TX_Str+0x50>
		while (!LL_USART_IsActiveFlag_TXE(USART2)) {
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <USART_TX_Str+0x6c>)
 800321a:	0018      	movs	r0, r3
 800321c:	f7fe fe04 	bl	8001e28 <LL_USART_IsActiveFlag_TXE>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d0f9      	beq.n	8003218 <USART_TX_Str+0x24>
		}
		LL_USART_TransmitData8(USART2, (uint8_t) string[i]);
 8003224:	240e      	movs	r4, #14
 8003226:	193b      	adds	r3, r7, r4
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <USART_TX_Str+0x6c>)
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f7fe fe23 	bl	8001e80 <LL_USART_TransmitData8>
		i++;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	193b      	adds	r3, r7, r4
 8003240:	3201      	adds	r2, #1
 8003242:	801a      	strh	r2, [r3, #0]
	while (i < size) {
 8003244:	230e      	movs	r3, #14
 8003246:	18fa      	adds	r2, r7, r3
 8003248:	230c      	movs	r3, #12
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	8812      	ldrh	r2, [r2, #0]
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d3e0      	bcc.n	8003216 <USART_TX_Str+0x22>
	}
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b005      	add	sp, #20
 800325c:	bd90      	pop	{r4, r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40004400 	.word	0x40004400

08003264 <USART_TX_h_VAL>:

void USART_TX_h_VAL(char *string, uint8_t val) {
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	000a      	movs	r2, r1
 800326e:	1cfb      	adds	r3, r7, #3
 8003270:	701a      	strb	r2, [r3, #0]
	uint8_t s_size = strlen(string);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f7fc ff47 	bl	8000108 <strlen>
 800327a:	0002      	movs	r2, r0
 800327c:	230d      	movs	r3, #13
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	701a      	strb	r2, [r3, #0]
	uint8_t i, n = 0;
 8003282:	230e      	movs	r3, #14
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
	uint8_t m_val[4];
	m_val[0] =
			(((val & 0xf0) >> 4) > 9) ?
 800328a:	1cfb      	adds	r3, r7, #3
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	b2db      	uxtb	r3, r3
	m_val[0] =
 8003292:	2b09      	cmp	r3, #9
 8003294:	d906      	bls.n	80032a4 <USART_TX_h_VAL+0x40>
					(((val & 0xf0) >> 4) + 0x57) : (((val & 0xf0) >> 4) + 0x30);
 8003296:	1cfb      	adds	r3, r7, #3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	b2db      	uxtb	r3, r3
	m_val[0] =
 800329e:	3357      	adds	r3, #87	; 0x57
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e005      	b.n	80032b0 <USART_TX_h_VAL+0x4c>
					(((val & 0xf0) >> 4) + 0x57) : (((val & 0xf0) >> 4) + 0x30);
 80032a4:	1cfb      	adds	r3, r7, #3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	b2db      	uxtb	r3, r3
	m_val[0] =
 80032ac:	3330      	adds	r3, #48	; 0x30
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2208      	movs	r2, #8
 80032b2:	18ba      	adds	r2, r7, r2
 80032b4:	7013      	strb	r3, [r2, #0]
	m_val[1] =
			((val & 0x0f) > 9) ? ((val & 0x0f) + 0x57) : ((val & 0x0f) + 0x30);
 80032b6:	1cfb      	adds	r3, r7, #3
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	220f      	movs	r2, #15
 80032bc:	4013      	ands	r3, r2
	m_val[1] =
 80032be:	2b09      	cmp	r3, #9
 80032c0:	dd07      	ble.n	80032d2 <USART_TX_h_VAL+0x6e>
			((val & 0x0f) > 9) ? ((val & 0x0f) + 0x57) : ((val & 0x0f) + 0x30);
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	220f      	movs	r2, #15
 80032c8:	4013      	ands	r3, r2
 80032ca:	b2db      	uxtb	r3, r3
	m_val[1] =
 80032cc:	3357      	adds	r3, #87	; 0x57
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e006      	b.n	80032e0 <USART_TX_h_VAL+0x7c>
			((val & 0x0f) > 9) ? ((val & 0x0f) + 0x57) : ((val & 0x0f) + 0x30);
 80032d2:	1cfb      	adds	r3, r7, #3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	220f      	movs	r2, #15
 80032d8:	4013      	ands	r3, r2
 80032da:	b2db      	uxtb	r3, r3
	m_val[1] =
 80032dc:	3330      	adds	r3, #48	; 0x30
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2108      	movs	r1, #8
 80032e2:	187a      	adds	r2, r7, r1
 80032e4:	7053      	strb	r3, [r2, #1]
	m_val[2] = '\n';
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	220a      	movs	r2, #10
 80032ea:	709a      	strb	r2, [r3, #2]
	m_val[3] = '\r';
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	220d      	movs	r2, #13
 80032f0:	70da      	strb	r2, [r3, #3]
	while (i < s_size) {
 80032f2:	e016      	b.n	8003322 <USART_TX_h_VAL+0xbe>
		while (!LL_USART_IsActiveFlag_TXE(USART2)) {
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <USART_TX_h_VAL+0x114>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fe fd95 	bl	8001e28 <LL_USART_IsActiveFlag_TXE>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d0f9      	beq.n	80032f6 <USART_TX_h_VAL+0x92>
		}
		LL_USART_TransmitData8(USART2, (uint8_t) string[i]);
 8003302:	240f      	movs	r4, #15
 8003304:	193b      	adds	r3, r7, r4
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	18d3      	adds	r3, r2, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <USART_TX_h_VAL+0x114>)
 8003310:	0019      	movs	r1, r3
 8003312:	0010      	movs	r0, r2
 8003314:	f7fe fdb4 	bl	8001e80 <LL_USART_TransmitData8>
		i++;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	193b      	adds	r3, r7, r4
 800331e:	3201      	adds	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
	while (i < s_size) {
 8003322:	230f      	movs	r3, #15
 8003324:	18fa      	adds	r2, r7, r3
 8003326:	230d      	movs	r3, #13
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d3e0      	bcc.n	80032f4 <USART_TX_h_VAL+0x90>
	}
	while (n < 4) {
 8003332:	e016      	b.n	8003362 <USART_TX_h_VAL+0xfe>
		while (!LL_USART_IsActiveFlag_TXE(USART2)) {
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <USART_TX_h_VAL+0x114>)
 8003338:	0018      	movs	r0, r3
 800333a:	f7fe fd75 	bl	8001e28 <LL_USART_IsActiveFlag_TXE>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d0f9      	beq.n	8003336 <USART_TX_h_VAL+0xd2>
		}
		LL_USART_TransmitData8(USART2, m_val[n]);
 8003342:	240e      	movs	r4, #14
 8003344:	193b      	adds	r3, r7, r4
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	18ba      	adds	r2, r7, r2
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <USART_TX_h_VAL+0x114>)
 8003350:	0019      	movs	r1, r3
 8003352:	0010      	movs	r0, r2
 8003354:	f7fe fd94 	bl	8001e80 <LL_USART_TransmitData8>
		n++;
 8003358:	193b      	adds	r3, r7, r4
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	193b      	adds	r3, r7, r4
 800335e:	3201      	adds	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
	while (n < 4) {
 8003362:	230e      	movs	r3, #14
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d9e3      	bls.n	8003334 <USART_TX_h_VAL+0xd0>
	}
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b005      	add	sp, #20
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	40004400 	.word	0x40004400

0800337c <USART_TX_h_VAL_without_text>:

void USART_TX_h_VAL_without_text(uint8_t val) {
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	0002      	movs	r2, r0
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	701a      	strb	r2, [r3, #0]
	uint8_t m_val[4];
	uint8_t i, n = 0;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]

	m_val[0] =
			(((val & 0xf0) >> 4) > 9) ?
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	b2db      	uxtb	r3, r3
	m_val[0] =
 8003398:	2b09      	cmp	r3, #9
 800339a:	d906      	bls.n	80033aa <USART_TX_h_VAL_without_text+0x2e>
					(((val & 0xf0) >> 4) + 0x57) : (((val & 0xf0) >> 4) + 0x30);
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	b2db      	uxtb	r3, r3
	m_val[0] =
 80033a4:	3357      	adds	r3, #87	; 0x57
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e005      	b.n	80033b6 <USART_TX_h_VAL_without_text+0x3a>
					(((val & 0xf0) >> 4) + 0x57) : (((val & 0xf0) >> 4) + 0x30);
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	b2db      	uxtb	r3, r3
	m_val[0] =
 80033b2:	3330      	adds	r3, #48	; 0x30
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2208      	movs	r2, #8
 80033b8:	18ba      	adds	r2, r7, r2
 80033ba:	7013      	strb	r3, [r2, #0]
	m_val[1] =
			((val & 0x0f) > 9) ? ((val & 0x0f) + 0x57) : ((val & 0x0f) + 0x30);
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	220f      	movs	r2, #15
 80033c2:	4013      	ands	r3, r2
	m_val[1] =
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	dd07      	ble.n	80033d8 <USART_TX_h_VAL_without_text+0x5c>
			((val & 0x0f) > 9) ? ((val & 0x0f) + 0x57) : ((val & 0x0f) + 0x30);
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	220f      	movs	r2, #15
 80033ce:	4013      	ands	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
	m_val[1] =
 80033d2:	3357      	adds	r3, #87	; 0x57
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e006      	b.n	80033e6 <USART_TX_h_VAL_without_text+0x6a>
			((val & 0x0f) > 9) ? ((val & 0x0f) + 0x57) : ((val & 0x0f) + 0x30);
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	220f      	movs	r2, #15
 80033de:	4013      	ands	r3, r2
 80033e0:	b2db      	uxtb	r3, r3
	m_val[1] =
 80033e2:	3330      	adds	r3, #48	; 0x30
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2208      	movs	r2, #8
 80033e8:	18ba      	adds	r2, r7, r2
 80033ea:	7053      	strb	r3, [r2, #1]
	while (n < 2) {
 80033ec:	e016      	b.n	800341c <USART_TX_h_VAL_without_text+0xa0>
		while (!LL_USART_IsActiveFlag_TXE(USART2)) {
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <USART_TX_h_VAL_without_text+0xb4>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7fe fd18 	bl	8001e28 <LL_USART_IsActiveFlag_TXE>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d0f9      	beq.n	80033f0 <USART_TX_h_VAL_without_text+0x74>
		}
		LL_USART_TransmitData8(USART2, m_val[n]);
 80033fc:	240f      	movs	r4, #15
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2208      	movs	r2, #8
 8003404:	18ba      	adds	r2, r7, r2
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	4a09      	ldr	r2, [pc, #36]	; (8003430 <USART_TX_h_VAL_without_text+0xb4>)
 800340a:	0019      	movs	r1, r3
 800340c:	0010      	movs	r0, r2
 800340e:	f7fe fd37 	bl	8001e80 <LL_USART_TransmitData8>
		n++;
 8003412:	193b      	adds	r3, r7, r4
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	193b      	adds	r3, r7, r4
 8003418:	3201      	adds	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
	while (n < 2) {
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d9e3      	bls.n	80033ee <USART_TX_h_VAL_without_text+0x72>
	}
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b005      	add	sp, #20
 800342e:	bd90      	pop	{r4, r7, pc}
 8003430:	40004400 	.word	0x40004400

08003434 <USART_TX_d_VAL>:

void USART_TX_d_VAL(char *string, uint32_t val, uint8_t len) {
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	46c6      	mov	lr, r8
 8003438:	b500      	push	{lr}
 800343a:	b090      	sub	sp, #64	; 0x40
 800343c:	af00      	add	r7, sp, #0
 800343e:	6278      	str	r0, [r7, #36]	; 0x24
 8003440:	6239      	str	r1, [r7, #32]
 8003442:	211f      	movs	r1, #31
 8003444:	187b      	adds	r3, r7, r1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	466b      	mov	r3, sp
 800344a:	4698      	mov	r8, r3
	uint8_t m_val[len + 2];
 800344c:	187b      	adds	r3, r7, r1
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3302      	adds	r3, #2
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	633a      	str	r2, [r7, #48]	; 0x30
 8003456:	001a      	movs	r2, r3
 8003458:	60ba      	str	r2, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	60fa      	str	r2, [r7, #12]
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	0002      	movs	r2, r0
 8003464:	0f52      	lsrs	r2, r2, #29
 8003466:	000e      	movs	r6, r1
 8003468:	00f6      	lsls	r6, r6, #3
 800346a:	617e      	str	r6, [r7, #20]
 800346c:	697e      	ldr	r6, [r7, #20]
 800346e:	4316      	orrs	r6, r2
 8003470:	617e      	str	r6, [r7, #20]
 8003472:	0002      	movs	r2, r0
 8003474:	00d2      	lsls	r2, r2, #3
 8003476:	613a      	str	r2, [r7, #16]
 8003478:	001a      	movs	r2, r3
 800347a:	603a      	str	r2, [r7, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	6838      	ldr	r0, [r7, #0]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	0002      	movs	r2, r0
 8003486:	0f52      	lsrs	r2, r2, #29
 8003488:	000e      	movs	r6, r1
 800348a:	00f5      	lsls	r5, r6, #3
 800348c:	4315      	orrs	r5, r2
 800348e:	0002      	movs	r2, r0
 8003490:	00d4      	lsls	r4, r2, #3
 8003492:	3307      	adds	r3, #7
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	466a      	mov	r2, sp
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	469d      	mov	sp, r3
 800349e:	466b      	mov	r3, sp
 80034a0:	3300      	adds	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint8_t x = 0; x < len; x++) {
 80034a4:	231f      	movs	r3, #31
 80034a6:	2218      	movs	r2, #24
 80034a8:	4694      	mov	ip, r2
 80034aa:	44bc      	add	ip, r7
 80034ac:	4463      	add	r3, ip
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e048      	b.n	8003546 <USART_TX_d_VAL+0x112>
		uint32_t Os = 1;
 80034b4:	2301      	movs	r3, #1
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint8_t n = 0; n < x; n++) {
 80034b8:	2325      	movs	r3, #37	; 0x25
 80034ba:	2218      	movs	r2, #24
 80034bc:	4694      	mov	ip, r2
 80034be:	44bc      	add	ip, r7
 80034c0:	4463      	add	r3, ip
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e00e      	b.n	80034e6 <USART_TX_d_VAL+0xb2>
			Os = Os * 10;
 80034c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ca:	0013      	movs	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint8_t n = 0; n < x; n++) {
 80034d4:	2125      	movs	r1, #37	; 0x25
 80034d6:	2018      	movs	r0, #24
 80034d8:	183b      	adds	r3, r7, r0
 80034da:	185b      	adds	r3, r3, r1
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	185b      	adds	r3, r3, r1
 80034e2:	3201      	adds	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	2325      	movs	r3, #37	; 0x25
 80034e8:	2518      	movs	r5, #24
 80034ea:	197a      	adds	r2, r7, r5
 80034ec:	18d2      	adds	r2, r2, r3
 80034ee:	241f      	movs	r4, #31
 80034f0:	197b      	adds	r3, r7, r5
 80034f2:	191b      	adds	r3, r3, r4
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d3e5      	bcc.n	80034c8 <USART_TX_d_VAL+0x94>
		}
		m_val[len - x - 1] = (val % (10 * Os)) / Os + 0x30;
 80034fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034fe:	0013      	movs	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	189b      	adds	r3, r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	001a      	movs	r2, r3
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f7fc fe93 	bl	8000238 <__aeabi_uidivmod>
 8003512:	000b      	movs	r3, r1
 8003514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003516:	0018      	movs	r0, r3
 8003518:	f7fc fe08 	bl	800012c <__udivsi3>
 800351c:	0003      	movs	r3, r0
 800351e:	b2da      	uxtb	r2, r3
 8003520:	231f      	movs	r3, #31
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	197b      	adds	r3, r7, r5
 8003528:	191b      	adds	r3, r3, r4
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	1acb      	subs	r3, r1, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	3230      	adds	r2, #48	; 0x30
 8003532:	b2d1      	uxtb	r1, r2
 8003534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003536:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 0; x < len; x++) {
 8003538:	197b      	adds	r3, r7, r5
 800353a:	191b      	adds	r3, r3, r4
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	197b      	adds	r3, r7, r5
 8003540:	191b      	adds	r3, r3, r4
 8003542:	3201      	adds	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	231f      	movs	r3, #31
 8003548:	2218      	movs	r2, #24
 800354a:	18ba      	adds	r2, r7, r2
 800354c:	18d2      	adds	r2, r2, r3
 800354e:	201f      	movs	r0, #31
 8003550:	183b      	adds	r3, r7, r0
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d3ac      	bcc.n	80034b4 <USART_TX_d_VAL+0x80>
	}
	m_val[len + 1] = '\n';
 800355a:	183b      	adds	r3, r7, r0
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003562:	210a      	movs	r1, #10
 8003564:	54d1      	strb	r1, [r2, r3]
	m_val[len] = '\r';
 8003566:	183b      	adds	r3, r7, r0
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356c:	210d      	movs	r1, #13
 800356e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < (strlen(string)); i++) {
 8003570:	2326      	movs	r3, #38	; 0x26
 8003572:	2218      	movs	r2, #24
 8003574:	4694      	mov	ip, r2
 8003576:	44bc      	add	ip, r7
 8003578:	4463      	add	r3, ip
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e01a      	b.n	80035b6 <USART_TX_d_VAL+0x182>
		while (!LL_USART_IsActiveFlag_TXE(USART2)) {
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <USART_TX_d_VAL+0x208>)
 8003584:	0018      	movs	r0, r3
 8003586:	f7fe fc4f 	bl	8001e28 <LL_USART_IsActiveFlag_TXE>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d0f9      	beq.n	8003582 <USART_TX_d_VAL+0x14e>
		}
		LL_USART_TransmitData8(USART2, (uint8_t) string[i]);
 800358e:	2426      	movs	r4, #38	; 0x26
 8003590:	2518      	movs	r5, #24
 8003592:	197b      	adds	r3, r7, r5
 8003594:	191b      	adds	r3, r3, r4
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4a27      	ldr	r2, [pc, #156]	; (800363c <USART_TX_d_VAL+0x208>)
 80035a0:	0019      	movs	r1, r3
 80035a2:	0010      	movs	r0, r2
 80035a4:	f7fe fc6c 	bl	8001e80 <LL_USART_TransmitData8>
	for (uint8_t i = 0; i < (strlen(string)); i++) {
 80035a8:	197b      	adds	r3, r7, r5
 80035aa:	191b      	adds	r3, r3, r4
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	197b      	adds	r3, r7, r5
 80035b0:	191b      	adds	r3, r3, r4
 80035b2:	3201      	adds	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	2326      	movs	r3, #38	; 0x26
 80035b8:	2218      	movs	r2, #24
 80035ba:	4694      	mov	ip, r2
 80035bc:	44bc      	add	ip, r7
 80035be:	4463      	add	r3, ip
 80035c0:	781c      	ldrb	r4, [r3, #0]
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fc fd9f 	bl	8000108 <strlen>
 80035ca:	0003      	movs	r3, r0
 80035cc:	429c      	cmp	r4, r3
 80035ce:	d3d7      	bcc.n	8003580 <USART_TX_d_VAL+0x14c>
	}
	for (uint8_t i = 0; i < (len + 2); i++) {
 80035d0:	2327      	movs	r3, #39	; 0x27
 80035d2:	2218      	movs	r2, #24
 80035d4:	4694      	mov	ip, r2
 80035d6:	44bc      	add	ip, r7
 80035d8:	4463      	add	r3, ip
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e019      	b.n	8003614 <USART_TX_d_VAL+0x1e0>
		while (!LL_USART_IsActiveFlag_TXE(USART2)) {
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <USART_TX_d_VAL+0x208>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fe fc1f 	bl	8001e28 <LL_USART_IsActiveFlag_TXE>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d0f9      	beq.n	80035e2 <USART_TX_d_VAL+0x1ae>
		}
		LL_USART_TransmitData8(USART2, (uint8_t) m_val[i]);
 80035ee:	2427      	movs	r4, #39	; 0x27
 80035f0:	2518      	movs	r5, #24
 80035f2:	197b      	adds	r3, r7, r5
 80035f4:	191b      	adds	r3, r3, r4
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	4a0f      	ldr	r2, [pc, #60]	; (800363c <USART_TX_d_VAL+0x208>)
 80035fe:	0019      	movs	r1, r3
 8003600:	0010      	movs	r0, r2
 8003602:	f7fe fc3d 	bl	8001e80 <LL_USART_TransmitData8>
	for (uint8_t i = 0; i < (len + 2); i++) {
 8003606:	197b      	adds	r3, r7, r5
 8003608:	191b      	adds	r3, r3, r4
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	197b      	adds	r3, r7, r5
 800360e:	191b      	adds	r3, r3, r4
 8003610:	3201      	adds	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	231f      	movs	r3, #31
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	2327      	movs	r3, #39	; 0x27
 800361e:	2118      	movs	r1, #24
 8003620:	468c      	mov	ip, r1
 8003622:	44bc      	add	ip, r7
 8003624:	4463      	add	r3, ip
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	dad9      	bge.n	80035e0 <USART_TX_d_VAL+0x1ac>
 800362c:	46c5      	mov	sp, r8
	}
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b010      	add	sp, #64	; 0x40
 8003634:	bc80      	pop	{r7}
 8003636:	46b8      	mov	r8, r7
 8003638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40004400 	.word	0x40004400

08003640 <USART_RX_Str>:

uint16_t USART_RX_Str() {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
	LL_USART_EnableDirectionRx(USART2);
 8003646:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <USART_RX_Str+0xb4>)
 8003648:	0018      	movs	r0, r3
 800364a:	f7fe fb96 	bl	8001d7a <LL_USART_EnableDirectionRx>

	uint16_t ind = 0;
 800364e:	1dbb      	adds	r3, r7, #6
 8003650:	2200      	movs	r2, #0
 8003652:	801a      	strh	r2, [r3, #0]

	//memset(u2_rx_buff, 0, sizeof(u2_rx_buff));

	while (!ind) {
 8003654:	e028      	b.n	80036a8 <USART_RX_Str+0x68>
		if (LL_USART_IsActiveFlag_IDLE(USART2)) {
 8003656:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <USART_RX_Str+0xb4>)
 8003658:	0018      	movs	r0, r3
 800365a:	f7fe fbc3 	bl	8001de4 <LL_USART_IsActiveFlag_IDLE>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d01c      	beq.n	800369c <USART_RX_Str+0x5c>
			LL_USART_ClearFlag_IDLE(USART2);
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <USART_RX_Str+0xb4>)
 8003664:	0018      	movs	r0, r3
 8003666:	f7fe fbf0 	bl	8001e4a <LL_USART_ClearFlag_IDLE>
		};

		while (!LL_USART_IsActiveFlag_IDLE(USART2)) {
 800366a:	e017      	b.n	800369c <USART_RX_Str+0x5c>
			if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <USART_RX_Str+0xb4>)
 800366e:	0018      	movs	r0, r3
 8003670:	f7fe fbc9 	bl	8001e06 <LL_USART_IsActiveFlag_RXNE>
 8003674:	0001      	movs	r1, r0
 8003676:	1dbb      	adds	r3, r7, #6
 8003678:	1dba      	adds	r2, r7, #6
 800367a:	8812      	ldrh	r2, [r2, #0]
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	2900      	cmp	r1, #0
 8003680:	d00c      	beq.n	800369c <USART_RX_Str+0x5c>
				u2_rx_buff[ind] = (uint8_t) (USART2->RDR & 0x00FF);
 8003682:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <USART_RX_Str+0xb4>)
 8003684:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003686:	b29a      	uxth	r2, r3
 8003688:	1dbb      	adds	r3, r7, #6
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b2d1      	uxtb	r1, r2
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <USART_RX_Str+0xb8>)
 8003690:	54d1      	strb	r1, [r2, r3]
				ind++;
 8003692:	1dbb      	adds	r3, r7, #6
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	3201      	adds	r2, #1
 800369a:	801a      	strh	r2, [r3, #0]
		while (!LL_USART_IsActiveFlag_IDLE(USART2)) {
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <USART_RX_Str+0xb4>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fe fba0 	bl	8001de4 <LL_USART_IsActiveFlag_IDLE>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d0e1      	beq.n	800366c <USART_RX_Str+0x2c>
	while (!ind) {
 80036a8:	1dbb      	adds	r3, r7, #6
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0d2      	beq.n	8003656 <USART_RX_Str+0x16>
			}
		}
	}
	LL_USART_ClearFlag_IDLE(USART2);
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <USART_RX_Str+0xb4>)
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fe fbc9 	bl	8001e4a <LL_USART_ClearFlag_IDLE>
	LL_USART_DisableDirectionRx(USART2);
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <USART_RX_Str+0xb4>)
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fe fb6b 	bl	8001d96 <LL_USART_DisableDirectionRx>

	while ((u2_rx_buff[ind - 1] == 0x0d) || (u2_rx_buff[ind - 1] == 0x0a)) {
 80036c0:	e004      	b.n	80036cc <USART_RX_Str+0x8c>
		ind--;
 80036c2:	1dbb      	adds	r3, r7, #6
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	1dbb      	adds	r3, r7, #6
 80036c8:	3a01      	subs	r2, #1
 80036ca:	801a      	strh	r2, [r3, #0]
	while ((u2_rx_buff[ind - 1] == 0x0d) || (u2_rx_buff[ind - 1] == 0x0a)) {
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <USART_RX_Str+0xb8>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	2b0d      	cmp	r3, #13
 80036d8:	d0f3      	beq.n	80036c2 <USART_RX_Str+0x82>
 80036da:	1dbb      	adds	r3, r7, #6
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <USART_RX_Str+0xb8>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	2b0a      	cmp	r3, #10
 80036e6:	d0ec      	beq.n	80036c2 <USART_RX_Str+0x82>
	}

	return ind;
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881b      	ldrh	r3, [r3, #0]
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40004400 	.word	0x40004400
 80036f8:	200000b4 	.word	0x200000b4

080036fc <AsciiToDec>:

uint32_t AsciiToDec(uint8_t *s, uint8_t len, uint8_t number) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	0008      	movs	r0, r1
 8003706:	0011      	movs	r1, r2
 8003708:	1cfb      	adds	r3, r7, #3
 800370a:	1c02      	adds	r2, r0, #0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	1c0a      	adds	r2, r1, #0
 8003712:	701a      	strb	r2, [r3, #0]
	uint32_t dec_num = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
	uint32_t dec = 1;
 8003718:	2301      	movs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
	for (uint8_t i = number + len - 2; i > number - 2; i--) {
 800371c:	1cba      	adds	r2, r7, #2
 800371e:	1cfb      	adds	r3, r7, #3
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	18d3      	adds	r3, r2, r3
 8003726:	b2da      	uxtb	r2, r3
 8003728:	230f      	movs	r3, #15
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	3a02      	subs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e03c      	b.n	80037ac <AsciiToDec+0xb0>
		if ((s[i] > 0x2f) && (s[i] < 0x3a)) {
 8003732:	210f      	movs	r1, #15
 8003734:	187b      	adds	r3, r7, r1
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	18d3      	adds	r3, r2, r3
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b2f      	cmp	r3, #47	; 0x2f
 8003740:	d913      	bls.n	800376a <AsciiToDec+0x6e>
 8003742:	187b      	adds	r3, r7, r1
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b39      	cmp	r3, #57	; 0x39
 800374e:	d80c      	bhi.n	800376a <AsciiToDec+0x6e>
			s[i] = s[i] - 0x30;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	187b      	adds	r3, r7, r1
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	18cb      	adds	r3, r1, r3
 8003762:	3a30      	subs	r2, #48	; 0x30
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e009      	b.n	800377e <AsciiToDec+0x82>
		} else {
			s[i] = 0;
 800376a:	230f      	movs	r3, #15
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
			error_flag = 1;         // ERROR
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <AsciiToDec+0xcc>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
		}
		dec_num = s[i] * dec + dec_num;
 800377e:	210f      	movs	r1, #15
 8003780:	187b      	adds	r3, r7, r1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	001a      	movs	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4353      	muls	r3, r2
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
		dec *= 10;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	0013      	movs	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	189b      	adds	r3, r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = number + len - 2; i > number - 2; i--) {
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	3a01      	subs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	230f      	movs	r3, #15
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	ddba      	ble.n	8003732 <AsciiToDec+0x36>
	}
	return dec_num;
 80037bc:	697b      	ldr	r3, [r7, #20]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000094 	.word	0x20000094

080037cc <AsciiToHex>:

uint8_t AsciiToHex(uint8_t s_h, uint8_t s_l) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dfb      	adds	r3, r7, #7
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	1c0a      	adds	r2, r1, #0
 80037dc:	701a      	strb	r2, [r3, #0]
	uint8_t hex_num;
	if ((s_h > 0x2f) && (s_h < 0x3a)) {
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b2f      	cmp	r3, #47	; 0x2f
 80037e4:	d909      	bls.n	80037fa <AsciiToHex+0x2e>
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b39      	cmp	r3, #57	; 0x39
 80037ec:	d805      	bhi.n	80037fa <AsciiToHex+0x2e>
		s_h = s_h - 0x30;
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	1dfa      	adds	r2, r7, #7
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	3a30      	subs	r2, #48	; 0x30
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e021      	b.n	800383e <AsciiToHex+0x72>
	} else if ((s_h > 0x40) && (s_h < 0x47)) {
 80037fa:	1dfb      	adds	r3, r7, #7
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d909      	bls.n	8003816 <AsciiToHex+0x4a>
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b46      	cmp	r3, #70	; 0x46
 8003808:	d805      	bhi.n	8003816 <AsciiToHex+0x4a>
		s_h = s_h - 0x37;
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	1dfa      	adds	r2, r7, #7
 800380e:	7812      	ldrb	r2, [r2, #0]
 8003810:	3a37      	subs	r2, #55	; 0x37
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e013      	b.n	800383e <AsciiToHex+0x72>
	} else if ((s_h > 0x60) && (s_h < 0x67)) {
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b60      	cmp	r3, #96	; 0x60
 800381c:	d909      	bls.n	8003832 <AsciiToHex+0x66>
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b66      	cmp	r3, #102	; 0x66
 8003824:	d805      	bhi.n	8003832 <AsciiToHex+0x66>
		s_h = s_h - 0x57;
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	1dfa      	adds	r2, r7, #7
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	3a57      	subs	r2, #87	; 0x57
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e005      	b.n	800383e <AsciiToHex+0x72>
	} else {
		s_h = 0;
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
		error_flag = 1;
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <AsciiToHex+0xf4>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
	}
	if ((s_l > 0x2f) && (s_l < 0x3a)) {
 800383e:	1dbb      	adds	r3, r7, #6
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b2f      	cmp	r3, #47	; 0x2f
 8003844:	d909      	bls.n	800385a <AsciiToHex+0x8e>
 8003846:	1dbb      	adds	r3, r7, #6
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b39      	cmp	r3, #57	; 0x39
 800384c:	d805      	bhi.n	800385a <AsciiToHex+0x8e>
		s_l = s_l - 0x30;
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	1dba      	adds	r2, r7, #6
 8003852:	7812      	ldrb	r2, [r2, #0]
 8003854:	3a30      	subs	r2, #48	; 0x30
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e021      	b.n	800389e <AsciiToHex+0xd2>
	} else if ((s_l > 0x40) && (s_l < 0x47)) {
 800385a:	1dbb      	adds	r3, r7, #6
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d909      	bls.n	8003876 <AsciiToHex+0xaa>
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b46      	cmp	r3, #70	; 0x46
 8003868:	d805      	bhi.n	8003876 <AsciiToHex+0xaa>
		s_l = s_l - 0x37;
 800386a:	1dbb      	adds	r3, r7, #6
 800386c:	1dba      	adds	r2, r7, #6
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	3a37      	subs	r2, #55	; 0x37
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e013      	b.n	800389e <AsciiToHex+0xd2>
	} else if ((s_l > 0x60) && (s_l < 0x67)) {
 8003876:	1dbb      	adds	r3, r7, #6
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b60      	cmp	r3, #96	; 0x60
 800387c:	d909      	bls.n	8003892 <AsciiToHex+0xc6>
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b66      	cmp	r3, #102	; 0x66
 8003884:	d805      	bhi.n	8003892 <AsciiToHex+0xc6>
		s_l = s_l - 0x57;
 8003886:	1dbb      	adds	r3, r7, #6
 8003888:	1dba      	adds	r2, r7, #6
 800388a:	7812      	ldrb	r2, [r2, #0]
 800388c:	3a57      	subs	r2, #87	; 0x57
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e005      	b.n	800389e <AsciiToHex+0xd2>
	} else {
		s_l = 0;
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
		error_flag = 1;
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <AsciiToHex+0xf4>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
	}
	hex_num = s_l + (s_h << 4);
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	b2d9      	uxtb	r1, r3
 80038a6:	200f      	movs	r0, #15
 80038a8:	183b      	adds	r3, r7, r0
 80038aa:	1dba      	adds	r2, r7, #6
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	188a      	adds	r2, r1, r2
 80038b0:	701a      	strb	r2, [r3, #0]
	return hex_num;
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	781b      	ldrb	r3, [r3, #0]
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	20000094 	.word	0x20000094

080038c4 <Ascii2ToHex>:
uint16_t Ascii2ToHex(uint8_t *s, uint16_t len, uint8_t number) {
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	0008      	movs	r0, r1
 80038ce:	0011      	movs	r1, r2
 80038d0:	1cbb      	adds	r3, r7, #2
 80038d2:	1c02      	adds	r2, r0, #0
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	1c7b      	adds	r3, r7, #1
 80038d8:	1c0a      	adds	r2, r1, #0
 80038da:	701a      	strb	r2, [r3, #0]
	uint16_t ind = 0;
 80038dc:	230e      	movs	r3, #14
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
	if ((len - number) % 2) {
 80038e4:	1cbb      	adds	r3, r7, #2
 80038e6:	881a      	ldrh	r2, [r3, #0]
 80038e8:	1c7b      	adds	r3, r7, #1
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	001a      	movs	r2, r3
 80038f0:	2301      	movs	r3, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	d100      	bne.n	80038f8 <Ascii2ToHex+0x34>
 80038f6:	e0dc      	b.n	8003ab2 <Ascii2ToHex+0x1ee>
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 80038f8:	1c7b      	adds	r3, r7, #1
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	230c      	movs	r3, #12
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	3a01      	subs	r2, #1
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	e0cb      	b.n	8003aa0 <Ascii2ToHex+0x1dc>
			if ((u2_rx_buff[i] > 0x2f) && (u2_rx_buff[i] < 0x3a)) {
 8003908:	210c      	movs	r1, #12
 800390a:	187b      	adds	r3, r7, r1
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	4a6e      	ldr	r2, [pc, #440]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	2b2f      	cmp	r3, #47	; 0x2f
 8003914:	d910      	bls.n	8003938 <Ascii2ToHex+0x74>
 8003916:	187b      	adds	r3, r7, r1
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	4a6b      	ldr	r2, [pc, #428]	; (8003ac8 <Ascii2ToHex+0x204>)
 800391c:	5cd3      	ldrb	r3, [r2, r3]
 800391e:	2b39      	cmp	r3, #57	; 0x39
 8003920:	d80a      	bhi.n	8003938 <Ascii2ToHex+0x74>
				u2_rx_buff[i] = u2_rx_buff[i] - 0x30;
 8003922:	187b      	adds	r3, r7, r1
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	4a68      	ldr	r2, [pc, #416]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003928:	5cd2      	ldrb	r2, [r2, r3]
 800392a:	187b      	adds	r3, r7, r1
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	3a30      	subs	r2, #48	; 0x30
 8003930:	b2d1      	uxtb	r1, r2
 8003932:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003934:	54d1      	strb	r1, [r2, r3]
 8003936:	e038      	b.n	80039aa <Ascii2ToHex+0xe6>
			}				// number
			else if ((u2_rx_buff[i] > 0x40) && (u2_rx_buff[i] < 0x47)) {
 8003938:	210c      	movs	r1, #12
 800393a:	187b      	adds	r3, r7, r1
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	4a62      	ldr	r2, [pc, #392]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003940:	5cd3      	ldrb	r3, [r2, r3]
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d910      	bls.n	8003968 <Ascii2ToHex+0xa4>
 8003946:	187b      	adds	r3, r7, r1
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	4a5f      	ldr	r2, [pc, #380]	; (8003ac8 <Ascii2ToHex+0x204>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	2b46      	cmp	r3, #70	; 0x46
 8003950:	d80a      	bhi.n	8003968 <Ascii2ToHex+0xa4>
				u2_rx_buff[i] = u2_rx_buff[i] - 0x37;
 8003952:	187b      	adds	r3, r7, r1
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	4a5c      	ldr	r2, [pc, #368]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003958:	5cd2      	ldrb	r2, [r2, r3]
 800395a:	187b      	adds	r3, r7, r1
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	3a37      	subs	r2, #55	; 0x37
 8003960:	b2d1      	uxtb	r1, r2
 8003962:	4a59      	ldr	r2, [pc, #356]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003964:	54d1      	strb	r1, [r2, r3]
 8003966:	e020      	b.n	80039aa <Ascii2ToHex+0xe6>
			}					// C letter
			else if ((u2_rx_buff[i] > 0x60) && (u2_rx_buff[i] < 0x67)) {
 8003968:	210c      	movs	r1, #12
 800396a:	187b      	adds	r3, r7, r1
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
 8003972:	2b60      	cmp	r3, #96	; 0x60
 8003974:	d910      	bls.n	8003998 <Ascii2ToHex+0xd4>
 8003976:	187b      	adds	r3, r7, r1
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	4a53      	ldr	r2, [pc, #332]	; (8003ac8 <Ascii2ToHex+0x204>)
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	2b66      	cmp	r3, #102	; 0x66
 8003980:	d80a      	bhi.n	8003998 <Ascii2ToHex+0xd4>
				u2_rx_buff[i] = u2_rx_buff[i] - 0x57;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003988:	5cd2      	ldrb	r2, [r2, r3]
 800398a:	187b      	adds	r3, r7, r1
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	3a57      	subs	r2, #87	; 0x57
 8003990:	b2d1      	uxtb	r1, r2
 8003992:	4a4d      	ldr	r2, [pc, #308]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003994:	54d1      	strb	r1, [r2, r3]
 8003996:	e008      	b.n	80039aa <Ascii2ToHex+0xe6>
			} 					// m letter
			else {
				u2_rx_buff[i] = 0;
 8003998:	230c      	movs	r3, #12
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039a0:	2100      	movs	r1, #0
 80039a2:	54d1      	strb	r1, [r2, r3]
				error_flag = 1;
 80039a4:	4b49      	ldr	r3, [pc, #292]	; (8003acc <Ascii2ToHex+0x208>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
			}											// ERROR
			if ((u2_rx_buff[i + 1] > 0x2f) && (u2_rx_buff[i + 1] < 0x3a)) {
 80039aa:	210c      	movs	r1, #12
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a45      	ldr	r2, [pc, #276]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	2b2f      	cmp	r3, #47	; 0x2f
 80039b8:	d913      	bls.n	80039e2 <Ascii2ToHex+0x11e>
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a41      	ldr	r2, [pc, #260]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	2b39      	cmp	r3, #57	; 0x39
 80039c6:	d80c      	bhi.n	80039e2 <Ascii2ToHex+0x11e>
				u2_rx_buff[i + 1] = u2_rx_buff[i + 1] - 0x30;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	4a3e      	ldr	r2, [pc, #248]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039d0:	5cd2      	ldrb	r2, [r2, r3]
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	3a30      	subs	r2, #48	; 0x30
 80039da:	b2d1      	uxtb	r1, r2
 80039dc:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039de:	54d1      	strb	r1, [r2, r3]
 80039e0:	e041      	b.n	8003a66 <Ascii2ToHex+0x1a2>
			}	// number
			else if ((u2_rx_buff[i + 1] > 0x40) && (u2_rx_buff[i + 1] < 0x47)) {
 80039e2:	210c      	movs	r1, #12
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a37      	ldr	r2, [pc, #220]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d913      	bls.n	8003a1a <Ascii2ToHex+0x156>
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	3301      	adds	r3, #1
 80039f8:	4a33      	ldr	r2, [pc, #204]	; (8003ac8 <Ascii2ToHex+0x204>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	2b46      	cmp	r3, #70	; 0x46
 80039fe:	d80c      	bhi.n	8003a1a <Ascii2ToHex+0x156>
				u2_rx_buff[i + 1] = u2_rx_buff[i + 1] - 0x37;
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a08:	5cd2      	ldrb	r2, [r2, r3]
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	3a37      	subs	r2, #55	; 0x37
 8003a12:	b2d1      	uxtb	r1, r2
 8003a14:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a16:	54d1      	strb	r1, [r2, r3]
 8003a18:	e025      	b.n	8003a66 <Ascii2ToHex+0x1a2>
			}	    // C letter
			else if ((u2_rx_buff[i + 1] > 0x60) && (u2_rx_buff[i + 1] < 0x67)) {
 8003a1a:	210c      	movs	r1, #12
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
 8003a26:	2b60      	cmp	r3, #96	; 0x60
 8003a28:	d913      	bls.n	8003a52 <Ascii2ToHex+0x18e>
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	2b66      	cmp	r3, #102	; 0x66
 8003a36:	d80c      	bhi.n	8003a52 <Ascii2ToHex+0x18e>
				u2_rx_buff[i + 1] = u2_rx_buff[i + 1] - 0x57;
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a40:	5cd2      	ldrb	r2, [r2, r3]
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	3a57      	subs	r2, #87	; 0x57
 8003a4a:	b2d1      	uxtb	r1, r2
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a4e:	54d1      	strb	r1, [r2, r3]
 8003a50:	e009      	b.n	8003a66 <Ascii2ToHex+0x1a2>
			} 	    // m letter
			else {
				u2_rx_buff[i + 1] = 0;
 8003a52:	230c      	movs	r3, #12
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	54d1      	strb	r1, [r2, r3]
				error_flag = 1;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <Ascii2ToHex+0x208>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
			}									// ERROR
			tx_buff[ind] = u2_rx_buff[i + 1] + (u2_rx_buff[i] << 4);
 8003a66:	200c      	movs	r0, #12
 8003a68:	183b      	adds	r3, r7, r0
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a70:	5cd1      	ldrb	r1, [r2, r3]
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <Ascii2ToHex+0x204>)
 8003a78:	5cd3      	ldrb	r3, [r2, r3]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	240e      	movs	r4, #14
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	188a      	adds	r2, r1, r2
 8003a86:	b2d1      	uxtb	r1, r2
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <Ascii2ToHex+0x20c>)
 8003a8a:	54d1      	strb	r1, [r2, r3]
			ind++;
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	3201      	adds	r2, #1
 8003a94:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	183a      	adds	r2, r7, r0
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	3202      	adds	r2, #2
 8003a9e:	801a      	strh	r2, [r3, #0]
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	18fa      	adds	r2, r7, r3
 8003aa4:	1cbb      	adds	r3, r7, #2
 8003aa6:	8812      	ldrh	r2, [r2, #0]
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d200      	bcs.n	8003ab0 <Ascii2ToHex+0x1ec>
 8003aae:	e72b      	b.n	8003908 <Ascii2ToHex+0x44>
 8003ab0:	e002      	b.n	8003ab8 <Ascii2ToHex+0x1f4>
		}
	} else {
		error_flag = 1;
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <Ascii2ToHex+0x208>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
	}
	return ind;
 8003ab8:	230e      	movs	r3, #14
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	881b      	ldrh	r3, [r3, #0]
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b005      	add	sp, #20
 8003ac4:	bd90      	pop	{r4, r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	200000b4 	.word	0x200000b4
 8003acc:	20000094 	.word	0x20000094
 8003ad0:	200002f0 	.word	0x200002f0

08003ad4 <to_diff>:
#include "phy.h"

void to_diff(uint8_t* src, uint8_t* dis, uint16_t len) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	1dbb      	adds	r3, r7, #6
 8003ae0:	801a      	strh	r2, [r3, #0]
	
	uint8_t res = src[0] & 1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	231f      	movs	r3, #31
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2101      	movs	r1, #1
 8003aec:	400a      	ands	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]
	
	for (int i=0; i<len; i++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e03f      	b.n	8003b76 <to_diff+0xa2>
		uint8_t dis_p = 0;
 8003af6:	2317      	movs	r3, #23
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
		
		for (int j=0; j<8; j++) {
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e02b      	b.n	8003b5c <to_diff+0x88>
			if (j != 0 || i != 0)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <to_diff+0x3c>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d013      	beq.n	8003b38 <to_diff+0x64>
				res = (res ^ ((src[i] >> j) & 1));
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	001a      	movs	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	411a      	asrs	r2, r3
 8003b1e:	0013      	movs	r3, r2
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	b25a      	sxtb	r2, r3
 8003b28:	211f      	movs	r1, #31
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	4053      	eors	r3, r2
 8003b32:	b25a      	sxtb	r2, r3
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	701a      	strb	r2, [r3, #0]
			dis_p |= res << j;
 8003b38:	231f      	movs	r3, #31
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	409a      	lsls	r2, r3
 8003b42:	0013      	movs	r3, r2
 8003b44:	b25a      	sxtb	r2, r3
 8003b46:	2117      	movs	r1, #23
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b25a      	sxtb	r2, r3
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<8; j++) {
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b07      	cmp	r3, #7
 8003b60:	ddd0      	ble.n	8003b04 <to_diff+0x30>
		}
		
		dis[i] = dis_p;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	2217      	movs	r2, #23
 8003b6a:	18ba      	adds	r2, r7, r2
 8003b6c:	7812      	ldrb	r2, [r2, #0]
 8003b6e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<len; i++) {
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	3301      	adds	r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	1dbb      	adds	r3, r7, #6
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	dbba      	blt.n	8003af6 <to_diff+0x22>
	}
	
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b008      	add	sp, #32
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <NMI_Handler+0x4>

08003b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <HardFault_Handler+0x4>

08003b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	msTicks++;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <SysTick_Handler+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <SysTick_Handler+0x14>)
 8003bb8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	200003f0 	.word	0x200003f0

08003bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	return 1;
 8003bc8:	2301      	movs	r3, #1
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_kill>:

int _kill(int pid, int sig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bda:	f002 fbe1 	bl	80063a0 <__errno>
 8003bde:	0003      	movs	r3, r0
 8003be0:	2216      	movs	r2, #22
 8003be2:	601a      	str	r2, [r3, #0]
	return -1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	425b      	negs	r3, r3
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_exit>:

void _exit (int status)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	425a      	negs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0011      	movs	r1, r2
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff ffe5 	bl	8003bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c06:	e7fe      	b.n	8003c06 <_exit+0x16>

08003c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e00a      	b.n	8003c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c1a:	e000      	b.n	8003c1e <_read+0x16>
 8003c1c:	bf00      	nop
 8003c1e:	0001      	movs	r1, r0
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	60ba      	str	r2, [r7, #8]
 8003c26:	b2ca      	uxtb	r2, r1
 8003c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dbf0      	blt.n	8003c1a <_read+0x12>
	}

return len;
 8003c38:	687b      	ldr	r3, [r7, #4]
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b006      	add	sp, #24
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e009      	b.n	8003c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60ba      	str	r2, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	e000      	b.n	8003c62 <_write+0x20>
 8003c60:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	3301      	adds	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	dbf1      	blt.n	8003c54 <_write+0x12>
	}
	return len;
 8003c70:	687b      	ldr	r3, [r7, #4]
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b006      	add	sp, #24
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <_close>:

int _close(int file)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	return -1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	425b      	negs	r3, r3
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	0192      	lsls	r2, r2, #6
 8003c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_isatty>:

int _isatty(int file)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <_sbrk+0x5c>)
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <_sbrk+0x60>)
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <_sbrk+0x64>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <_sbrk+0x64>)
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <_sbrk+0x68>)
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <_sbrk+0x64>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d04:	f002 fb4c 	bl	80063a0 <__errno>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	425b      	negs	r3, r3
 8003d12:	e009      	b.n	8003d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <_sbrk+0x64>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	18d2      	adds	r2, r2, r3
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <_sbrk+0x64>)
 8003d24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b006      	add	sp, #24
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20001800 	.word	0x20001800
 8003d34:	00000400 	.word	0x00000400
 8003d38:	20000098 	.word	0x20000098
 8003d3c:	20000408 	.word	0x20000408

08003d40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <htonl>:
#include "encrypt/OpenUNBEncrypterHL.h"

uint32_t htonl(uint32_t net) {
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
    return __builtin_bswap32(net);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	ba1b      	rev	r3, r3
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <htons>:

uint16_t htons(uint16_t net) {
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	0002      	movs	r2, r0
 8003d66:	1dbb      	adds	r3, r7, #6
 8003d68:	801a      	strh	r2, [r3, #0]
    return __builtin_bswap16(net);
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	ba5b      	rev16	r3, r3
 8003d70:	b29b      	uxth	r3, r3
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b002      	add	sp, #8
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <initEncrypter>:

uint64_t htonll(uint64_t net) {
    return __builtin_bswap64(net);
}

void initEncrypter(struct encrypt_data_t* enc_data) {
 8003d7a:	b590      	push	{r4, r7, lr}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
    getKa(enc_data->K0, enc_data->Na, enc_data->Ka);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3341      	adds	r3, #65	; 0x41
 8003d86:	0018      	movs	r0, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2251      	movs	r2, #81	; 0x51
 8003d8c:	5c9a      	ldrb	r2, [r3, r2]
 8003d8e:	2152      	movs	r1, #82	; 0x52
 8003d90:	5c5b      	ldrb	r3, [r3, r1]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b299      	uxth	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3357      	adds	r3, #87	; 0x57
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	f000 fc66 	bl	800466e <getKa>

    enc_data->Ne_last = 0;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2297      	movs	r2, #151	; 0x97
 8003da6:	5c99      	ldrb	r1, [r3, r2]
 8003da8:	2000      	movs	r0, #0
 8003daa:	4001      	ands	r1, r0
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	1899      	adds	r1, r3, r2
 8003db0:	7848      	ldrb	r0, [r1, #1]
 8003db2:	2400      	movs	r4, #0
 8003db4:	4020      	ands	r0, r4
 8003db6:	7048      	strb	r0, [r1, #1]
 8003db8:	1899      	adds	r1, r3, r2
 8003dba:	7888      	ldrb	r0, [r1, #2]
 8003dbc:	2400      	movs	r4, #0
 8003dbe:	4020      	ands	r0, r4
 8003dc0:	7088      	strb	r0, [r1, #2]
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	78da      	ldrb	r2, [r3, #3]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	400a      	ands	r2, r1
 8003dca:	70da      	strb	r2, [r3, #3]
    enc_data->Nn = 0;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	228b      	movs	r2, #139	; 0x8b
 8003dd0:	5c99      	ldrb	r1, [r3, r2]
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	4001      	ands	r1, r0
 8003dd6:	5499      	strb	r1, [r3, r2]
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	785a      	ldrb	r2, [r3, #1]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	400a      	ands	r2, r1
 8003de0:	705a      	strb	r2, [r3, #1]
    enc_data->Nn_last = 0;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2295      	movs	r2, #149	; 0x95
 8003de6:	5c99      	ldrb	r1, [r3, r2]
 8003de8:	2000      	movs	r0, #0
 8003dea:	4001      	ands	r1, r0
 8003dec:	5499      	strb	r1, [r3, r2]
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	785a      	ldrb	r2, [r3, #1]
 8003df2:	2100      	movs	r1, #0
 8003df4:	400a      	ands	r2, r1
 8003df6:	705a      	strb	r2, [r3, #1]
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b003      	add	sp, #12
 8003dfe:	bd90      	pop	{r4, r7, pc}

08003e00 <encodeActivateMsg>:

void encodeActivateMsg(struct encrypt_data_t* enc_data, uint8_t* out, time_t time) {
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	b08d      	sub	sp, #52	; 0x34
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603a      	str	r2, [r7, #0]
 8003e0c:	607b      	str	r3, [r7, #4]


    enc_data->init_time = MS2S(time); // to sec
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	22fa      	movs	r2, #250	; 0xfa
 8003e14:	0092      	lsls	r2, r2, #2
 8003e16:	2300      	movs	r3, #0
 8003e18:	f7fc fafe 	bl	8000418 <__aeabi_ldivmod>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	000b      	movs	r3, r1
 8003e20:	0010      	movs	r0, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	338d      	adds	r3, #141	; 0x8d
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	4002      	ands	r2, r0
 8003e2c:	0015      	movs	r5, r2
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	2400      	movs	r4, #0
 8003e32:	4022      	ands	r2, r4
 8003e34:	1c14      	adds	r4, r2, #0
 8003e36:	1c2a      	adds	r2, r5, #0
 8003e38:	4322      	orrs	r2, r4
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	0a02      	lsrs	r2, r0, #8
 8003e3e:	24ff      	movs	r4, #255	; 0xff
 8003e40:	4022      	ands	r2, r4
 8003e42:	0015      	movs	r5, r2
 8003e44:	785a      	ldrb	r2, [r3, #1]
 8003e46:	2400      	movs	r4, #0
 8003e48:	4022      	ands	r2, r4
 8003e4a:	1c14      	adds	r4, r2, #0
 8003e4c:	1c2a      	adds	r2, r5, #0
 8003e4e:	4322      	orrs	r2, r4
 8003e50:	705a      	strb	r2, [r3, #1]
 8003e52:	0c02      	lsrs	r2, r0, #16
 8003e54:	24ff      	movs	r4, #255	; 0xff
 8003e56:	4022      	ands	r2, r4
 8003e58:	0015      	movs	r5, r2
 8003e5a:	789a      	ldrb	r2, [r3, #2]
 8003e5c:	2400      	movs	r4, #0
 8003e5e:	4022      	ands	r2, r4
 8003e60:	1c14      	adds	r4, r2, #0
 8003e62:	1c2a      	adds	r2, r5, #0
 8003e64:	4322      	orrs	r2, r4
 8003e66:	709a      	strb	r2, [r3, #2]
 8003e68:	0e05      	lsrs	r5, r0, #24
 8003e6a:	78da      	ldrb	r2, [r3, #3]
 8003e6c:	2400      	movs	r4, #0
 8003e6e:	4022      	ands	r2, r4
 8003e70:	1c14      	adds	r4, r2, #0
 8003e72:	1c2a      	adds	r2, r5, #0
 8003e74:	4322      	orrs	r2, r4
 8003e76:	70da      	strb	r2, [r3, #3]
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	0015      	movs	r5, r2
 8003e7e:	791a      	ldrb	r2, [r3, #4]
 8003e80:	2400      	movs	r4, #0
 8003e82:	4022      	ands	r2, r4
 8003e84:	1c14      	adds	r4, r2, #0
 8003e86:	1c2a      	adds	r2, r5, #0
 8003e88:	4322      	orrs	r2, r4
 8003e8a:	711a      	strb	r2, [r3, #4]
 8003e8c:	0a0a      	lsrs	r2, r1, #8
 8003e8e:	24ff      	movs	r4, #255	; 0xff
 8003e90:	4022      	ands	r2, r4
 8003e92:	0015      	movs	r5, r2
 8003e94:	795a      	ldrb	r2, [r3, #5]
 8003e96:	2400      	movs	r4, #0
 8003e98:	4022      	ands	r2, r4
 8003e9a:	1c14      	adds	r4, r2, #0
 8003e9c:	1c2a      	adds	r2, r5, #0
 8003e9e:	4322      	orrs	r2, r4
 8003ea0:	715a      	strb	r2, [r3, #5]
 8003ea2:	0c0a      	lsrs	r2, r1, #16
 8003ea4:	24ff      	movs	r4, #255	; 0xff
 8003ea6:	4022      	ands	r2, r4
 8003ea8:	0015      	movs	r5, r2
 8003eaa:	799a      	ldrb	r2, [r3, #6]
 8003eac:	2400      	movs	r4, #0
 8003eae:	4022      	ands	r2, r4
 8003eb0:	1c14      	adds	r4, r2, #0
 8003eb2:	1c2a      	adds	r2, r5, #0
 8003eb4:	4322      	orrs	r2, r4
 8003eb6:	719a      	strb	r2, [r3, #6]
 8003eb8:	0e08      	lsrs	r0, r1, #24
 8003eba:	79da      	ldrb	r2, [r3, #7]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	1c11      	adds	r1, r2, #0
 8003ec2:	1c02      	adds	r2, r0, #0
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	71da      	strb	r2, [r3, #7]
    enc_data->Ne = 0;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3353      	adds	r3, #83	; 0x53
 8003ecc:	781a      	ldrb	r2, [r3, #0]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	785a      	ldrb	r2, [r3, #1]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	400a      	ands	r2, r1
 8003eda:	705a      	strb	r2, [r3, #1]
 8003edc:	789a      	ldrb	r2, [r3, #2]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	709a      	strb	r2, [r3, #2]
 8003ee4:	78da      	ldrb	r2, [r3, #3]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	400a      	ands	r2, r1
 8003eea:	70da      	strb	r2, [r3, #3]
    getKe(enc_data->Ka, enc_data->Ne, enc_data->Ke);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3357      	adds	r3, #87	; 0x57
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2253      	movs	r2, #83	; 0x53
 8003ef6:	5c9a      	ldrb	r2, [r3, r2]
 8003ef8:	2154      	movs	r1, #84	; 0x54
 8003efa:	5c59      	ldrb	r1, [r3, r1]
 8003efc:	0209      	lsls	r1, r1, #8
 8003efe:	430a      	orrs	r2, r1
 8003f00:	2155      	movs	r1, #85	; 0x55
 8003f02:	5c59      	ldrb	r1, [r3, r1]
 8003f04:	0409      	lsls	r1, r1, #16
 8003f06:	430a      	orrs	r2, r1
 8003f08:	2156      	movs	r1, #86	; 0x56
 8003f0a:	5c5b      	ldrb	r3, [r3, r1]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	337b      	adds	r3, #123	; 0x7b
 8003f16:	001a      	movs	r2, r3
 8003f18:	f000 fc50 	bl	80047bc <getKe>
    getKm(enc_data->Ka, enc_data->Ne, enc_data->Km);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3357      	adds	r3, #87	; 0x57
 8003f20:	0018      	movs	r0, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2253      	movs	r2, #83	; 0x53
 8003f26:	5c9a      	ldrb	r2, [r3, r2]
 8003f28:	2154      	movs	r1, #84	; 0x54
 8003f2a:	5c59      	ldrb	r1, [r3, r1]
 8003f2c:	0209      	lsls	r1, r1, #8
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	2155      	movs	r1, #85	; 0x55
 8003f32:	5c59      	ldrb	r1, [r3, r1]
 8003f34:	0409      	lsls	r1, r1, #16
 8003f36:	430a      	orrs	r2, r1
 8003f38:	2156      	movs	r1, #86	; 0x56
 8003f3a:	5c5b      	ldrb	r3, [r3, r1]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	336b      	adds	r3, #107	; 0x6b
 8003f46:	001a      	movs	r2, r3
 8003f48:	f000 fc07 	bl	800475a <getKm>

    enc_data->dev_addr = getDevAddr(enc_data->Ka, enc_data->Ne);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3357      	adds	r3, #87	; 0x57
 8003f50:	0018      	movs	r0, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2253      	movs	r2, #83	; 0x53
 8003f56:	5c9a      	ldrb	r2, [r3, r2]
 8003f58:	2154      	movs	r1, #84	; 0x54
 8003f5a:	5c59      	ldrb	r1, [r3, r1]
 8003f5c:	0209      	lsls	r1, r1, #8
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	2155      	movs	r1, #85	; 0x55
 8003f62:	5c59      	ldrb	r1, [r3, r1]
 8003f64:	0409      	lsls	r1, r1, #16
 8003f66:	430a      	orrs	r2, r1
 8003f68:	2156      	movs	r1, #86	; 0x56
 8003f6a:	5c5b      	ldrb	r3, [r3, r1]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	f000 fbb1 	bl	80046d8 <getDevAddr>
 8003f76:	0002      	movs	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3367      	adds	r3, #103	; 0x67
 8003f7c:	21ff      	movs	r1, #255	; 0xff
 8003f7e:	4011      	ands	r1, r2
 8003f80:	000c      	movs	r4, r1
 8003f82:	7819      	ldrb	r1, [r3, #0]
 8003f84:	2000      	movs	r0, #0
 8003f86:	4001      	ands	r1, r0
 8003f88:	1c08      	adds	r0, r1, #0
 8003f8a:	1c21      	adds	r1, r4, #0
 8003f8c:	4301      	orrs	r1, r0
 8003f8e:	7019      	strb	r1, [r3, #0]
 8003f90:	0a11      	lsrs	r1, r2, #8
 8003f92:	20ff      	movs	r0, #255	; 0xff
 8003f94:	4001      	ands	r1, r0
 8003f96:	000c      	movs	r4, r1
 8003f98:	7859      	ldrb	r1, [r3, #1]
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	4001      	ands	r1, r0
 8003f9e:	1c08      	adds	r0, r1, #0
 8003fa0:	1c21      	adds	r1, r4, #0
 8003fa2:	4301      	orrs	r1, r0
 8003fa4:	7059      	strb	r1, [r3, #1]
 8003fa6:	0c11      	lsrs	r1, r2, #16
 8003fa8:	20ff      	movs	r0, #255	; 0xff
 8003faa:	4001      	ands	r1, r0
 8003fac:	000c      	movs	r4, r1
 8003fae:	7899      	ldrb	r1, [r3, #2]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	4001      	ands	r1, r0
 8003fb4:	1c08      	adds	r0, r1, #0
 8003fb6:	1c21      	adds	r1, r4, #0
 8003fb8:	4301      	orrs	r1, r0
 8003fba:	7099      	strb	r1, [r3, #2]
 8003fbc:	0e10      	lsrs	r0, r2, #24
 8003fbe:	78da      	ldrb	r2, [r3, #3]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	1c11      	adds	r1, r2, #0
 8003fc6:	1c02      	adds	r2, r0, #0
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	70da      	strb	r2, [r3, #3]

    uint32_t devAddr24 = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t payload[2] = {0};
 8003fd0:	241c      	movs	r4, #28
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	801a      	strh	r2, [r3, #0]
    uint16_t NaNet = htons(enc_data->Na);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2251      	movs	r2, #81	; 0x51
 8003fdc:	5c9a      	ldrb	r2, [r3, r2]
 8003fde:	2152      	movs	r1, #82	; 0x52
 8003fe0:	5c5b      	ldrb	r3, [r3, r1]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff feb8 	bl	8003d5e <htons>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	251a      	movs	r5, #26
 8003ff4:	197b      	adds	r3, r7, r5
 8003ff6:	801a      	strh	r2, [r3, #0]
    memcpy(payload, &NaNet, 2);
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	197a      	adds	r2, r7, r5
 8003ffc:	8812      	ldrh	r2, [r2, #0]
 8003ffe:	801a      	strh	r2, [r3, #0]
    uint8_t MIC[3] = {0};
 8004000:	2614      	movs	r6, #20
 8004002:	19bb      	adds	r3, r7, r6
 8004004:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <encodeActivateMsg+0x2a0>)
 8004006:	8812      	ldrh	r2, [r2, #0]
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	2202      	movs	r2, #2
 800400c:	2100      	movs	r1, #0
 800400e:	5499      	strb	r1, [r3, r2]

    devAddr24 = crc24(enc_data->DevID, sizeof(enc_data->DevID));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2140      	movs	r1, #64	; 0x40
 8004014:	0018      	movs	r0, r3
 8004016:	f001 f9c5 	bl	80053a4 <crc24>
 800401a:	0003      	movs	r3, r0
 800401c:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t devAddr24Net = htonl(devAddr24);
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff fe92 	bl	8003d4a <htonl>
 8004026:	0003      	movs	r3, r0
 8004028:	623b      	str	r3, [r7, #32]
    getMIC(enc_data->Km, devAddr24, payload, MIC, 2, 0);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	336b      	adds	r3, #107	; 0x6b
 800402e:	0018      	movs	r0, r3
 8004030:	19bb      	adds	r3, r7, r6
 8004032:	193a      	adds	r2, r7, r4
 8004034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004036:	2400      	movs	r4, #0
 8004038:	9401      	str	r4, [sp, #4]
 800403a:	2402      	movs	r4, #2
 800403c:	9400      	str	r4, [sp, #0]
 800403e:	f000 fc44 	bl	80048ca <getMIC>


#ifndef AK_BIG_ENDIAN
    devAddr24Net = devAddr24Net >> 8;
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	623b      	str	r3, [r7, #32]
#endif

    memcpy(out, MIC, sizeof(MIC));
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	19bb      	adds	r3, r7, r6
 800404c:	0010      	movs	r0, r2
 800404e:	0019      	movs	r1, r3
 8004050:	2303      	movs	r3, #3
 8004052:	001a      	movs	r2, r3
 8004054:	f002 f9ce 	bl	80063f4 <memcpy>
    //memcpy(out + 3, payload, 2);
    out[3] = (NaNet >> 8) & 0xFF;
 8004058:	197b      	adds	r3, r7, r5
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	b29a      	uxth	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3303      	adds	r3, #3
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]
    out[4] = NaNet & 0xFF;
 8004068:	197b      	adds	r3, r7, r5
 800406a:	881a      	ldrh	r2, [r3, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3304      	adds	r3, #4
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]
    out[5] = (devAddr24Net >> 16) & 0xFF;
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	0c1a      	lsrs	r2, r3, #16
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	3305      	adds	r3, #5
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
    out[6] = (devAddr24Net >> 8) & 0xFF;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	0a1a      	lsrs	r2, r3, #8
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3306      	adds	r3, #6
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]
    out[7] = devAddr24Net & 0xFF;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3307      	adds	r3, #7
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
    //memcpy(out + 2 + sizeof (MIC), &devAddr24Net, 3);
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b00b      	add	sp, #44	; 0x2c
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	0800784c 	.word	0x0800784c

080040a4 <encodeData>:

int encodeData(struct encrypt_data_t* enc_data, uint8_t* in, uint8_t* out, size_t size, time_t time) {
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b08d      	sub	sp, #52	; 0x34
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
    if (size != 2 && size != 6)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d005      	beq.n	80040c4 <encodeData+0x20>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d002      	beq.n	80040c4 <encodeData+0x20>
        return -1;
 80040be:	2301      	movs	r3, #1
 80040c0:	425b      	negs	r3, r3
 80040c2:	e29c      	b.n	80045fe <encodeData+0x55a>

    uint32_t newNe = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t payload[6]= {0};
 80040c8:	231c      	movs	r3, #28
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	2200      	movs	r2, #0
 80040d2:	809a      	strh	r2, [r3, #4]
    int8_t MIC[3] = {0};
 80040d4:	2318      	movs	r3, #24
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	4ae3      	ldr	r2, [pc, #908]	; (8004468 <encodeData+0x3c4>)
 80040da:	8812      	ldrh	r2, [r2, #0]
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

    newNe = (MS2S(time) - enc_data->init_time) / EPOCH_DURATION;
 80040e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80040e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040e8:	22fa      	movs	r2, #250	; 0xfa
 80040ea:	0092      	lsls	r2, r2, #2
 80040ec:	2300      	movs	r3, #0
 80040ee:	f7fc f993 	bl	8000418 <__aeabi_ldivmod>
 80040f2:	0002      	movs	r2, r0
 80040f4:	000b      	movs	r3, r1
 80040f6:	0014      	movs	r4, r2
 80040f8:	001d      	movs	r5, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	228d      	movs	r2, #141	; 0x8d
 80040fe:	5c9a      	ldrb	r2, [r3, r2]
 8004100:	268e      	movs	r6, #142	; 0x8e
 8004102:	5d9e      	ldrb	r6, [r3, r6]
 8004104:	0236      	lsls	r6, r6, #8
 8004106:	4332      	orrs	r2, r6
 8004108:	268f      	movs	r6, #143	; 0x8f
 800410a:	5d9e      	ldrb	r6, [r3, r6]
 800410c:	0436      	lsls	r6, r6, #16
 800410e:	4332      	orrs	r2, r6
 8004110:	2690      	movs	r6, #144	; 0x90
 8004112:	5d9e      	ldrb	r6, [r3, r6]
 8004114:	0636      	lsls	r6, r6, #24
 8004116:	4332      	orrs	r2, r6
 8004118:	0010      	movs	r0, r2
 800411a:	2291      	movs	r2, #145	; 0x91
 800411c:	5c9a      	ldrb	r2, [r3, r2]
 800411e:	2692      	movs	r6, #146	; 0x92
 8004120:	5d9e      	ldrb	r6, [r3, r6]
 8004122:	0236      	lsls	r6, r6, #8
 8004124:	4332      	orrs	r2, r6
 8004126:	2693      	movs	r6, #147	; 0x93
 8004128:	5d9e      	ldrb	r6, [r3, r6]
 800412a:	0436      	lsls	r6, r6, #16
 800412c:	4332      	orrs	r2, r6
 800412e:	2694      	movs	r6, #148	; 0x94
 8004130:	5d9b      	ldrb	r3, [r3, r6]
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	4313      	orrs	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	1a24      	subs	r4, r4, r0
 800413a:	418d      	sbcs	r5, r1
 800413c:	0020      	movs	r0, r4
 800413e:	0029      	movs	r1, r5
 8004140:	22e1      	movs	r2, #225	; 0xe1
 8004142:	0192      	lsls	r2, r2, #6
 8004144:	2300      	movs	r3, #0
 8004146:	f7fc f967 	bl	8000418 <__aeabi_ldivmod>
 800414a:	0002      	movs	r2, r0
 800414c:	000b      	movs	r3, r1
 800414e:	0013      	movs	r3, r2
 8004150:	627b      	str	r3, [r7, #36]	; 0x24

    if (newNe != enc_data->Ne) {
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2253      	movs	r2, #83	; 0x53
 8004156:	5c9a      	ldrb	r2, [r3, r2]
 8004158:	2154      	movs	r1, #84	; 0x54
 800415a:	5c59      	ldrb	r1, [r3, r1]
 800415c:	0209      	lsls	r1, r1, #8
 800415e:	430a      	orrs	r2, r1
 8004160:	2155      	movs	r1, #85	; 0x55
 8004162:	5c59      	ldrb	r1, [r3, r1]
 8004164:	0409      	lsls	r1, r1, #16
 8004166:	430a      	orrs	r2, r1
 8004168:	2156      	movs	r1, #86	; 0x56
 800416a:	5c5b      	ldrb	r3, [r3, r1]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4313      	orrs	r3, r2
 8004170:	001a      	movs	r2, r3
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	4293      	cmp	r3, r2
 8004176:	d100      	bne.n	800417a <encodeData+0xd6>
 8004178:	e099      	b.n	80042ae <encodeData+0x20a>
        enc_data->Ne = newNe;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3353      	adds	r3, #83	; 0x53
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	18ba      	adds	r2, r7, r2
 8004182:	7810      	ldrb	r0, [r2, #0]
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	2100      	movs	r1, #0
 8004188:	400a      	ands	r2, r1
 800418a:	1c11      	adds	r1, r2, #0
 800418c:	1c02      	adds	r2, r0, #0
 800418e:	430a      	orrs	r2, r1
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	2225      	movs	r2, #37	; 0x25
 8004194:	18ba      	adds	r2, r7, r2
 8004196:	7810      	ldrb	r0, [r2, #0]
 8004198:	785a      	ldrb	r2, [r3, #1]
 800419a:	2100      	movs	r1, #0
 800419c:	400a      	ands	r2, r1
 800419e:	1c11      	adds	r1, r2, #0
 80041a0:	1c02      	adds	r2, r0, #0
 80041a2:	430a      	orrs	r2, r1
 80041a4:	705a      	strb	r2, [r3, #1]
 80041a6:	2226      	movs	r2, #38	; 0x26
 80041a8:	18ba      	adds	r2, r7, r2
 80041aa:	7810      	ldrb	r0, [r2, #0]
 80041ac:	789a      	ldrb	r2, [r3, #2]
 80041ae:	2100      	movs	r1, #0
 80041b0:	400a      	ands	r2, r1
 80041b2:	1c11      	adds	r1, r2, #0
 80041b4:	1c02      	adds	r2, r0, #0
 80041b6:	430a      	orrs	r2, r1
 80041b8:	709a      	strb	r2, [r3, #2]
 80041ba:	2227      	movs	r2, #39	; 0x27
 80041bc:	18ba      	adds	r2, r7, r2
 80041be:	7810      	ldrb	r0, [r2, #0]
 80041c0:	78da      	ldrb	r2, [r3, #3]
 80041c2:	2100      	movs	r1, #0
 80041c4:	400a      	ands	r2, r1
 80041c6:	1c11      	adds	r1, r2, #0
 80041c8:	1c02      	adds	r2, r0, #0
 80041ca:	430a      	orrs	r2, r1
 80041cc:	70da      	strb	r2, [r3, #3]

        getKe(enc_data->Ka, enc_data->Ne, enc_data->Ke);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3357      	adds	r3, #87	; 0x57
 80041d2:	0018      	movs	r0, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2253      	movs	r2, #83	; 0x53
 80041d8:	5c9a      	ldrb	r2, [r3, r2]
 80041da:	2154      	movs	r1, #84	; 0x54
 80041dc:	5c59      	ldrb	r1, [r3, r1]
 80041de:	0209      	lsls	r1, r1, #8
 80041e0:	430a      	orrs	r2, r1
 80041e2:	2155      	movs	r1, #85	; 0x55
 80041e4:	5c59      	ldrb	r1, [r3, r1]
 80041e6:	0409      	lsls	r1, r1, #16
 80041e8:	430a      	orrs	r2, r1
 80041ea:	2156      	movs	r1, #86	; 0x56
 80041ec:	5c5b      	ldrb	r3, [r3, r1]
 80041ee:	061b      	lsls	r3, r3, #24
 80041f0:	4313      	orrs	r3, r2
 80041f2:	0019      	movs	r1, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	337b      	adds	r3, #123	; 0x7b
 80041f8:	001a      	movs	r2, r3
 80041fa:	f000 fadf 	bl	80047bc <getKe>
        getKm(enc_data->Ka, enc_data->Ne, enc_data->Km);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3357      	adds	r3, #87	; 0x57
 8004202:	0018      	movs	r0, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2253      	movs	r2, #83	; 0x53
 8004208:	5c9a      	ldrb	r2, [r3, r2]
 800420a:	2154      	movs	r1, #84	; 0x54
 800420c:	5c59      	ldrb	r1, [r3, r1]
 800420e:	0209      	lsls	r1, r1, #8
 8004210:	430a      	orrs	r2, r1
 8004212:	2155      	movs	r1, #85	; 0x55
 8004214:	5c59      	ldrb	r1, [r3, r1]
 8004216:	0409      	lsls	r1, r1, #16
 8004218:	430a      	orrs	r2, r1
 800421a:	2156      	movs	r1, #86	; 0x56
 800421c:	5c5b      	ldrb	r3, [r3, r1]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	4313      	orrs	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	336b      	adds	r3, #107	; 0x6b
 8004228:	001a      	movs	r2, r3
 800422a:	f000 fa96 	bl	800475a <getKm>
        enc_data->dev_addr = getDevAddr(enc_data->Ka, enc_data->Ne);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3357      	adds	r3, #87	; 0x57
 8004232:	0018      	movs	r0, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2253      	movs	r2, #83	; 0x53
 8004238:	5c9a      	ldrb	r2, [r3, r2]
 800423a:	2154      	movs	r1, #84	; 0x54
 800423c:	5c59      	ldrb	r1, [r3, r1]
 800423e:	0209      	lsls	r1, r1, #8
 8004240:	430a      	orrs	r2, r1
 8004242:	2155      	movs	r1, #85	; 0x55
 8004244:	5c59      	ldrb	r1, [r3, r1]
 8004246:	0409      	lsls	r1, r1, #16
 8004248:	430a      	orrs	r2, r1
 800424a:	2156      	movs	r1, #86	; 0x56
 800424c:	5c5b      	ldrb	r3, [r3, r1]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	4313      	orrs	r3, r2
 8004252:	0019      	movs	r1, r3
 8004254:	f000 fa40 	bl	80046d8 <getDevAddr>
 8004258:	0002      	movs	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3367      	adds	r3, #103	; 0x67
 800425e:	21ff      	movs	r1, #255	; 0xff
 8004260:	4011      	ands	r1, r2
 8004262:	000c      	movs	r4, r1
 8004264:	7819      	ldrb	r1, [r3, #0]
 8004266:	2000      	movs	r0, #0
 8004268:	4001      	ands	r1, r0
 800426a:	1c08      	adds	r0, r1, #0
 800426c:	1c21      	adds	r1, r4, #0
 800426e:	4301      	orrs	r1, r0
 8004270:	7019      	strb	r1, [r3, #0]
 8004272:	0a11      	lsrs	r1, r2, #8
 8004274:	20ff      	movs	r0, #255	; 0xff
 8004276:	4001      	ands	r1, r0
 8004278:	000c      	movs	r4, r1
 800427a:	7859      	ldrb	r1, [r3, #1]
 800427c:	2000      	movs	r0, #0
 800427e:	4001      	ands	r1, r0
 8004280:	1c08      	adds	r0, r1, #0
 8004282:	1c21      	adds	r1, r4, #0
 8004284:	4301      	orrs	r1, r0
 8004286:	7059      	strb	r1, [r3, #1]
 8004288:	0c11      	lsrs	r1, r2, #16
 800428a:	20ff      	movs	r0, #255	; 0xff
 800428c:	4001      	ands	r1, r0
 800428e:	000c      	movs	r4, r1
 8004290:	7899      	ldrb	r1, [r3, #2]
 8004292:	2000      	movs	r0, #0
 8004294:	4001      	ands	r1, r0
 8004296:	1c08      	adds	r0, r1, #0
 8004298:	1c21      	adds	r1, r4, #0
 800429a:	4301      	orrs	r1, r0
 800429c:	7099      	strb	r1, [r3, #2]
 800429e:	0e10      	lsrs	r0, r2, #24
 80042a0:	78da      	ldrb	r2, [r3, #3]
 80042a2:	2100      	movs	r1, #0
 80042a4:	400a      	ands	r2, r1
 80042a6:	1c11      	adds	r1, r2, #0
 80042a8:	1c02      	adds	r2, r0, #0
 80042aa:	430a      	orrs	r2, r1
 80042ac:	70da      	strb	r2, [r3, #3]
    }

    enc_data->Nn = S2M((MS2S(time) - enc_data->init_time) % EPOCH_DURATION);
 80042ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80042b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042b2:	22fa      	movs	r2, #250	; 0xfa
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	2300      	movs	r3, #0
 80042b8:	f7fc f8ae 	bl	8000418 <__aeabi_ldivmod>
 80042bc:	0002      	movs	r2, r0
 80042be:	000b      	movs	r3, r1
 80042c0:	0014      	movs	r4, r2
 80042c2:	001d      	movs	r5, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	228d      	movs	r2, #141	; 0x8d
 80042c8:	5c9a      	ldrb	r2, [r3, r2]
 80042ca:	268e      	movs	r6, #142	; 0x8e
 80042cc:	5d9e      	ldrb	r6, [r3, r6]
 80042ce:	0236      	lsls	r6, r6, #8
 80042d0:	4332      	orrs	r2, r6
 80042d2:	268f      	movs	r6, #143	; 0x8f
 80042d4:	5d9e      	ldrb	r6, [r3, r6]
 80042d6:	0436      	lsls	r6, r6, #16
 80042d8:	4332      	orrs	r2, r6
 80042da:	2690      	movs	r6, #144	; 0x90
 80042dc:	5d9e      	ldrb	r6, [r3, r6]
 80042de:	0636      	lsls	r6, r6, #24
 80042e0:	4332      	orrs	r2, r6
 80042e2:	0010      	movs	r0, r2
 80042e4:	2291      	movs	r2, #145	; 0x91
 80042e6:	5c9a      	ldrb	r2, [r3, r2]
 80042e8:	2692      	movs	r6, #146	; 0x92
 80042ea:	5d9e      	ldrb	r6, [r3, r6]
 80042ec:	0236      	lsls	r6, r6, #8
 80042ee:	4332      	orrs	r2, r6
 80042f0:	2693      	movs	r6, #147	; 0x93
 80042f2:	5d9e      	ldrb	r6, [r3, r6]
 80042f4:	0436      	lsls	r6, r6, #16
 80042f6:	4332      	orrs	r2, r6
 80042f8:	2694      	movs	r6, #148	; 0x94
 80042fa:	5d9b      	ldrb	r3, [r3, r6]
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	4313      	orrs	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	1a24      	subs	r4, r4, r0
 8004304:	418d      	sbcs	r5, r1
 8004306:	0020      	movs	r0, r4
 8004308:	0029      	movs	r1, r5
 800430a:	22e1      	movs	r2, #225	; 0xe1
 800430c:	0192      	lsls	r2, r2, #6
 800430e:	2300      	movs	r3, #0
 8004310:	f7fc f882 	bl	8000418 <__aeabi_ldivmod>
 8004314:	0010      	movs	r0, r2
 8004316:	0019      	movs	r1, r3
 8004318:	223c      	movs	r2, #60	; 0x3c
 800431a:	2300      	movs	r3, #0
 800431c:	f7fc f87c 	bl	8000418 <__aeabi_ldivmod>
 8004320:	0002      	movs	r2, r0
 8004322:	000b      	movs	r3, r1
 8004324:	b291      	uxth	r1, r2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	228b      	movs	r2, #139	; 0x8b
 800432a:	20ff      	movs	r0, #255	; 0xff
 800432c:	4008      	ands	r0, r1
 800432e:	0005      	movs	r5, r0
 8004330:	5c98      	ldrb	r0, [r3, r2]
 8004332:	2400      	movs	r4, #0
 8004334:	4020      	ands	r0, r4
 8004336:	1c04      	adds	r4, r0, #0
 8004338:	1c28      	adds	r0, r5, #0
 800433a:	4320      	orrs	r0, r4
 800433c:	5498      	strb	r0, [r3, r2]
 800433e:	0a09      	lsrs	r1, r1, #8
 8004340:	b288      	uxth	r0, r1
 8004342:	189b      	adds	r3, r3, r2
 8004344:	785a      	ldrb	r2, [r3, #1]
 8004346:	2100      	movs	r1, #0
 8004348:	400a      	ands	r2, r1
 800434a:	1c11      	adds	r1, r2, #0
 800434c:	1c02      	adds	r2, r0, #0
 800434e:	430a      	orrs	r2, r1
 8004350:	705a      	strb	r2, [r3, #1]

    if (enc_data->Nn == enc_data->Nn_last && enc_data->Ne == enc_data->Ne_last) {
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	228b      	movs	r2, #139	; 0x8b
 8004356:	5c9a      	ldrb	r2, [r3, r2]
 8004358:	218c      	movs	r1, #140	; 0x8c
 800435a:	5c5b      	ldrb	r3, [r3, r1]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	4313      	orrs	r3, r2
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2195      	movs	r1, #149	; 0x95
 8004366:	5c59      	ldrb	r1, [r3, r1]
 8004368:	2096      	movs	r0, #150	; 0x96
 800436a:	5c1b      	ldrb	r3, [r3, r0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	430b      	orrs	r3, r1
 8004370:	b29b      	uxth	r3, r3
 8004372:	429a      	cmp	r2, r3
 8004374:	d141      	bne.n	80043fa <encodeData+0x356>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2253      	movs	r2, #83	; 0x53
 800437a:	5c9a      	ldrb	r2, [r3, r2]
 800437c:	2154      	movs	r1, #84	; 0x54
 800437e:	5c59      	ldrb	r1, [r3, r1]
 8004380:	0209      	lsls	r1, r1, #8
 8004382:	430a      	orrs	r2, r1
 8004384:	2155      	movs	r1, #85	; 0x55
 8004386:	5c59      	ldrb	r1, [r3, r1]
 8004388:	0409      	lsls	r1, r1, #16
 800438a:	430a      	orrs	r2, r1
 800438c:	2156      	movs	r1, #86	; 0x56
 800438e:	5c5b      	ldrb	r3, [r3, r1]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	4313      	orrs	r3, r2
 8004394:	0018      	movs	r0, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2297      	movs	r2, #151	; 0x97
 800439a:	5c9a      	ldrb	r2, [r3, r2]
 800439c:	2198      	movs	r1, #152	; 0x98
 800439e:	5c59      	ldrb	r1, [r3, r1]
 80043a0:	0209      	lsls	r1, r1, #8
 80043a2:	430a      	orrs	r2, r1
 80043a4:	2199      	movs	r1, #153	; 0x99
 80043a6:	5c59      	ldrb	r1, [r3, r1]
 80043a8:	0409      	lsls	r1, r1, #16
 80043aa:	430a      	orrs	r2, r1
 80043ac:	219a      	movs	r1, #154	; 0x9a
 80043ae:	5c5b      	ldrb	r3, [r3, r1]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	4313      	orrs	r3, r2
 80043b4:	4298      	cmp	r0, r3
 80043b6:	d120      	bne.n	80043fa <encodeData+0x356>
        enc_data->Nn++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	228b      	movs	r2, #139	; 0x8b
 80043bc:	5c9a      	ldrb	r2, [r3, r2]
 80043be:	218c      	movs	r1, #140	; 0x8c
 80043c0:	5c5b      	ldrb	r3, [r3, r1]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	b299      	uxth	r1, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	228b      	movs	r2, #139	; 0x8b
 80043d0:	20ff      	movs	r0, #255	; 0xff
 80043d2:	4008      	ands	r0, r1
 80043d4:	0005      	movs	r5, r0
 80043d6:	5c98      	ldrb	r0, [r3, r2]
 80043d8:	2400      	movs	r4, #0
 80043da:	4020      	ands	r0, r4
 80043dc:	1c04      	adds	r4, r0, #0
 80043de:	1c28      	adds	r0, r5, #0
 80043e0:	4320      	orrs	r0, r4
 80043e2:	5498      	strb	r0, [r3, r2]
 80043e4:	0a09      	lsrs	r1, r1, #8
 80043e6:	b288      	uxth	r0, r1
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	785a      	ldrb	r2, [r3, #1]
 80043ec:	2100      	movs	r1, #0
 80043ee:	400a      	ands	r2, r1
 80043f0:	1c11      	adds	r1, r2, #0
 80043f2:	1c02      	adds	r2, r0, #0
 80043f4:	430a      	orrs	r2, r1
 80043f6:	705a      	strb	r2, [r3, #1]
 80043f8:	e038      	b.n	800446c <encodeData+0x3c8>
    }else if (enc_data->Nn + 1 == enc_data->Nn_last && enc_data->Ne == enc_data->Ne_last) {
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	228b      	movs	r2, #139	; 0x8b
 80043fe:	5c9a      	ldrb	r2, [r3, r2]
 8004400:	218c      	movs	r1, #140	; 0x8c
 8004402:	5c5b      	ldrb	r3, [r3, r1]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	4313      	orrs	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2195      	movs	r1, #149	; 0x95
 8004410:	5c59      	ldrb	r1, [r3, r1]
 8004412:	2096      	movs	r0, #150	; 0x96
 8004414:	5c1b      	ldrb	r3, [r3, r0]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	430b      	orrs	r3, r1
 800441a:	b29b      	uxth	r3, r3
 800441c:	429a      	cmp	r2, r3
 800441e:	d125      	bne.n	800446c <encodeData+0x3c8>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2253      	movs	r2, #83	; 0x53
 8004424:	5c9a      	ldrb	r2, [r3, r2]
 8004426:	2154      	movs	r1, #84	; 0x54
 8004428:	5c59      	ldrb	r1, [r3, r1]
 800442a:	0209      	lsls	r1, r1, #8
 800442c:	430a      	orrs	r2, r1
 800442e:	2155      	movs	r1, #85	; 0x55
 8004430:	5c59      	ldrb	r1, [r3, r1]
 8004432:	0409      	lsls	r1, r1, #16
 8004434:	430a      	orrs	r2, r1
 8004436:	2156      	movs	r1, #86	; 0x56
 8004438:	5c5b      	ldrb	r3, [r3, r1]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	4313      	orrs	r3, r2
 800443e:	0018      	movs	r0, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2297      	movs	r2, #151	; 0x97
 8004444:	5c9a      	ldrb	r2, [r3, r2]
 8004446:	2198      	movs	r1, #152	; 0x98
 8004448:	5c59      	ldrb	r1, [r3, r1]
 800444a:	0209      	lsls	r1, r1, #8
 800444c:	430a      	orrs	r2, r1
 800444e:	2199      	movs	r1, #153	; 0x99
 8004450:	5c59      	ldrb	r1, [r3, r1]
 8004452:	0409      	lsls	r1, r1, #16
 8004454:	430a      	orrs	r2, r1
 8004456:	219a      	movs	r1, #154	; 0x9a
 8004458:	5c5b      	ldrb	r3, [r3, r1]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	4313      	orrs	r3, r2
 800445e:	4298      	cmp	r0, r3
 8004460:	d104      	bne.n	800446c <encodeData+0x3c8>
        return -1;
 8004462:	2301      	movs	r3, #1
 8004464:	425b      	negs	r3, r3
 8004466:	e0ca      	b.n	80045fe <encodeData+0x55a>
 8004468:	0800784c 	.word	0x0800784c
    }

    enc_data->Nn_last = enc_data->Nn;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	228b      	movs	r2, #139	; 0x8b
 8004470:	5c9a      	ldrb	r2, [r3, r2]
 8004472:	218c      	movs	r1, #140	; 0x8c
 8004474:	5c5b      	ldrb	r3, [r3, r1]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	4313      	orrs	r3, r2
 800447a:	b299      	uxth	r1, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2295      	movs	r2, #149	; 0x95
 8004480:	20ff      	movs	r0, #255	; 0xff
 8004482:	4008      	ands	r0, r1
 8004484:	0005      	movs	r5, r0
 8004486:	5c98      	ldrb	r0, [r3, r2]
 8004488:	2400      	movs	r4, #0
 800448a:	4020      	ands	r0, r4
 800448c:	1c04      	adds	r4, r0, #0
 800448e:	1c28      	adds	r0, r5, #0
 8004490:	4320      	orrs	r0, r4
 8004492:	5498      	strb	r0, [r3, r2]
 8004494:	0a09      	lsrs	r1, r1, #8
 8004496:	b288      	uxth	r0, r1
 8004498:	189b      	adds	r3, r3, r2
 800449a:	785a      	ldrb	r2, [r3, #1]
 800449c:	2100      	movs	r1, #0
 800449e:	400a      	ands	r2, r1
 80044a0:	1c11      	adds	r1, r2, #0
 80044a2:	1c02      	adds	r2, r0, #0
 80044a4:	430a      	orrs	r2, r1
 80044a6:	705a      	strb	r2, [r3, #1]
    enc_data->Ne_last = enc_data->Ne;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2253      	movs	r2, #83	; 0x53
 80044ac:	5c9a      	ldrb	r2, [r3, r2]
 80044ae:	2154      	movs	r1, #84	; 0x54
 80044b0:	5c59      	ldrb	r1, [r3, r1]
 80044b2:	0209      	lsls	r1, r1, #8
 80044b4:	430a      	orrs	r2, r1
 80044b6:	2155      	movs	r1, #85	; 0x55
 80044b8:	5c59      	ldrb	r1, [r3, r1]
 80044ba:	0409      	lsls	r1, r1, #16
 80044bc:	430a      	orrs	r2, r1
 80044be:	2156      	movs	r1, #86	; 0x56
 80044c0:	5c5b      	ldrb	r3, [r3, r1]
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	4313      	orrs	r3, r2
 80044c6:	0019      	movs	r1, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2297      	movs	r2, #151	; 0x97
 80044cc:	20ff      	movs	r0, #255	; 0xff
 80044ce:	4008      	ands	r0, r1
 80044d0:	0005      	movs	r5, r0
 80044d2:	5c98      	ldrb	r0, [r3, r2]
 80044d4:	2400      	movs	r4, #0
 80044d6:	4020      	ands	r0, r4
 80044d8:	1c04      	adds	r4, r0, #0
 80044da:	1c28      	adds	r0, r5, #0
 80044dc:	4320      	orrs	r0, r4
 80044de:	5498      	strb	r0, [r3, r2]
 80044e0:	0a08      	lsrs	r0, r1, #8
 80044e2:	24ff      	movs	r4, #255	; 0xff
 80044e4:	4020      	ands	r0, r4
 80044e6:	0006      	movs	r6, r0
 80044e8:	1898      	adds	r0, r3, r2
 80044ea:	7844      	ldrb	r4, [r0, #1]
 80044ec:	2500      	movs	r5, #0
 80044ee:	402c      	ands	r4, r5
 80044f0:	1c25      	adds	r5, r4, #0
 80044f2:	1c34      	adds	r4, r6, #0
 80044f4:	432c      	orrs	r4, r5
 80044f6:	7044      	strb	r4, [r0, #1]
 80044f8:	0c08      	lsrs	r0, r1, #16
 80044fa:	24ff      	movs	r4, #255	; 0xff
 80044fc:	4020      	ands	r0, r4
 80044fe:	0006      	movs	r6, r0
 8004500:	1898      	adds	r0, r3, r2
 8004502:	7884      	ldrb	r4, [r0, #2]
 8004504:	2500      	movs	r5, #0
 8004506:	402c      	ands	r4, r5
 8004508:	1c25      	adds	r5, r4, #0
 800450a:	1c34      	adds	r4, r6, #0
 800450c:	432c      	orrs	r4, r5
 800450e:	7084      	strb	r4, [r0, #2]
 8004510:	0e08      	lsrs	r0, r1, #24
 8004512:	189b      	adds	r3, r3, r2
 8004514:	78da      	ldrb	r2, [r3, #3]
 8004516:	2100      	movs	r1, #0
 8004518:	400a      	ands	r2, r1
 800451a:	1c11      	adds	r1, r2, #0
 800451c:	1c02      	adds	r2, r0, #0
 800451e:	430a      	orrs	r2, r1
 8004520:	70da      	strb	r2, [r3, #3]

    cryptoMacPayload(in, payload, size, enc_data->Ke, enc_data->Nn);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	b2dc      	uxtb	r4, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	337b      	adds	r3, #123	; 0x7b
 800452a:	001d      	movs	r5, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	228b      	movs	r2, #139	; 0x8b
 8004530:	5c9a      	ldrb	r2, [r3, r2]
 8004532:	218c      	movs	r1, #140	; 0x8c
 8004534:	5c5b      	ldrb	r3, [r3, r1]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	4313      	orrs	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	261c      	movs	r6, #28
 800453e:	19b9      	adds	r1, r7, r6
 8004540:	68b8      	ldr	r0, [r7, #8]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	002b      	movs	r3, r5
 8004546:	0022      	movs	r2, r4
 8004548:	f000 f969 	bl	800481e <cryptoMacPayload>

    getMIC(enc_data->Km, enc_data->dev_addr, payload, MIC, size, enc_data->Nn);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	336b      	adds	r3, #107	; 0x6b
 8004550:	0018      	movs	r0, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2267      	movs	r2, #103	; 0x67
 8004556:	5c9a      	ldrb	r2, [r3, r2]
 8004558:	2168      	movs	r1, #104	; 0x68
 800455a:	5c59      	ldrb	r1, [r3, r1]
 800455c:	0209      	lsls	r1, r1, #8
 800455e:	430a      	orrs	r2, r1
 8004560:	2169      	movs	r1, #105	; 0x69
 8004562:	5c59      	ldrb	r1, [r3, r1]
 8004564:	0409      	lsls	r1, r1, #16
 8004566:	430a      	orrs	r2, r1
 8004568:	216a      	movs	r1, #106	; 0x6a
 800456a:	5c5b      	ldrb	r3, [r3, r1]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	4313      	orrs	r3, r2
 8004570:	001d      	movs	r5, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	218b      	movs	r1, #139	; 0x8b
 800457a:	5c59      	ldrb	r1, [r3, r1]
 800457c:	248c      	movs	r4, #140	; 0x8c
 800457e:	5d1b      	ldrb	r3, [r3, r4]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	430b      	orrs	r3, r1
 8004584:	b29b      	uxth	r3, r3
 8004586:	2118      	movs	r1, #24
 8004588:	187c      	adds	r4, r7, r1
 800458a:	19b9      	adds	r1, r7, r6
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	9200      	str	r2, [sp, #0]
 8004590:	0023      	movs	r3, r4
 8004592:	000a      	movs	r2, r1
 8004594:	0029      	movs	r1, r5
 8004596:	f000 f998 	bl	80048ca <getMIC>

    uint32_t devAddr24Net = htonl(enc_data->dev_addr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2267      	movs	r2, #103	; 0x67
 800459e:	5c9a      	ldrb	r2, [r3, r2]
 80045a0:	2168      	movs	r1, #104	; 0x68
 80045a2:	5c59      	ldrb	r1, [r3, r1]
 80045a4:	0209      	lsls	r1, r1, #8
 80045a6:	430a      	orrs	r2, r1
 80045a8:	2169      	movs	r1, #105	; 0x69
 80045aa:	5c59      	ldrb	r1, [r3, r1]
 80045ac:	0409      	lsls	r1, r1, #16
 80045ae:	430a      	orrs	r2, r1
 80045b0:	216a      	movs	r1, #106	; 0x6a
 80045b2:	5c5b      	ldrb	r3, [r3, r1]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	4313      	orrs	r3, r2
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff fbc6 	bl	8003d4a <htonl>
 80045be:	0003      	movs	r3, r0
 80045c0:	617b      	str	r3, [r7, #20]

#ifndef AK_BIG_ENDIAN
    devAddr24Net = devAddr24Net >> 8;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	617b      	str	r3, [r7, #20]
#endif

    memcpy(out, MIC, sizeof (MIC));
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	2118      	movs	r1, #24
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	0010      	movs	r0, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	2303      	movs	r3, #3
 80045d4:	001a      	movs	r2, r3
 80045d6:	f001 ff0d 	bl	80063f4 <memcpy>
    memcpy(out + sizeof (MIC), payload, size);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3303      	adds	r3, #3
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	19b9      	adds	r1, r7, r6
 80045e2:	0018      	movs	r0, r3
 80045e4:	f001 ff06 	bl	80063f4 <memcpy>
    memcpy(out + sizeof (MIC) + size, (char*)&devAddr24Net, 3);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3303      	adds	r3, #3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	18d3      	adds	r3, r2, r3
 80045f0:	2214      	movs	r2, #20
 80045f2:	18b9      	adds	r1, r7, r2
 80045f4:	2203      	movs	r2, #3
 80045f6:	0018      	movs	r0, r3
 80045f8:	f001 fefc 	bl	80063f4 <memcpy>

    return 0;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	b00b      	add	sp, #44	; 0x2c
 8004604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)

08004608 <memcpy_endian>:
        mem_ptr[i] = mem_ptr[n - 1 - i];
        mem_ptr[n - 1 - i] = tmp;
    }
}

void memcpy_endian(void* dest, const void* src, size_t n) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
    uint16_t big_endian_tester = 1;
 8004614:	2110      	movs	r1, #16
 8004616:	187b      	adds	r3, r7, r1
 8004618:	2201      	movs	r2, #1
 800461a:	801a      	strh	r2, [r3, #0]
    uint8_t IS_LITTLE_ENDIAN = ((uint8_t*)&big_endian_tester)[0];
 800461c:	187a      	adds	r2, r7, r1
 800461e:	2113      	movs	r1, #19
 8004620:	187b      	adds	r3, r7, r1
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]

    if (!IS_LITTLE_ENDIAN) {
 8004626:	187b      	adds	r3, r7, r1
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d115      	bne.n	800465a <memcpy_endian+0x52>
        for (int i=0; i < n; i++) {
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e00d      	b.n	8004650 <memcpy_endian+0x48>
            ((char*)dest)[n - 1 - i] = ((char*)src)[i];
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	18d2      	adds	r2, r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	1acb      	subs	r3, r1, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	18cb      	adds	r3, r1, r3
 8004646:	7812      	ldrb	r2, [r2, #0]
 8004648:	701a      	strb	r2, [r3, #0]
        for (int i=0; i < n; i++) {
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	3301      	adds	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d8ed      	bhi.n	8004634 <memcpy_endian+0x2c>
        }
        //memcpy(dest, src, n);
    } else {
        memcpy(dest, src, n);
    }
}
 8004658:	e005      	b.n	8004666 <memcpy_endian+0x5e>
        memcpy(dest, src, n);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0018      	movs	r0, r3
 8004662:	f001 fec7 	bl	80063f4 <memcpy>
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}

0800466e <getKa>:
#endif

    return 0;
}

void getKa(uint8_t* K0, uint16_t Na, uint8_t* Ka) {
 800466e:	b5b0      	push	{r4, r5, r7, lr}
 8004670:	b08e      	sub	sp, #56	; 0x38
 8004672:	af02      	add	r7, sp, #8
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	250a      	movs	r5, #10
 800467a:	197b      	adds	r3, r7, r5
 800467c:	1c0a      	adds	r2, r1, #0
 800467e:	801a      	strh	r2, [r3, #0]
    memset(Ka, 0, KEYSIZE_BYTE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2210      	movs	r2, #16
 8004684:	2100      	movs	r1, #0
 8004686:	0018      	movs	r0, r3
 8004688:	f001 febd 	bl	8006406 <memset>

    uint8_t iv[IVSIZE] = {0};
 800468c:	2420      	movs	r4, #32
 800468e:	193b      	adds	r3, r7, r4
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	3304      	adds	r3, #4
 8004696:	220c      	movs	r2, #12
 8004698:	2100      	movs	r1, #0
 800469a:	0018      	movs	r0, r3
 800469c:	f001 feb3 	bl	8006406 <memset>

    //Na || 00..00
    memcpy_endian(iv, &Na, sizeof(Na));
 80046a0:	1979      	adds	r1, r7, r5
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	2202      	movs	r2, #2
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff ffae 	bl	8004608 <memcpy_endian>

    uint8_t t[KEYSIZE_BYTE] = {0};
 80046ac:	2510      	movs	r5, #16
 80046ae:	197b      	adds	r3, r7, r5
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	220c      	movs	r2, #12
 80046b8:	2100      	movs	r1, #0
 80046ba:	0018      	movs	r0, r3
 80046bc:	f001 fea3 	bl	8006406 <memset>

    encCTR(K0, iv, t, KEYSIZE_BYTE, Ka);
 80046c0:	197a      	adds	r2, r7, r5
 80046c2:	1939      	adds	r1, r7, r4
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	2310      	movs	r3, #16
 80046cc:	f000 fa91 	bl	8004bf2 <encCTR>
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b00c      	add	sp, #48	; 0x30
 80046d6:	bdb0      	pop	{r4, r5, r7, pc}

080046d8 <getDevAddr>:


uint32_t getDevAddr(uint8_t* Ka, uint32_t Ne) {
 80046d8:	b5b0      	push	{r4, r5, r7, lr}
 80046da:	b08c      	sub	sp, #48	; 0x30
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
    uint32_t ret = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp[KEYSIZE_BYTE] = {0};
 80046e6:	241c      	movs	r4, #28
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	3304      	adds	r3, #4
 80046f0:	220c      	movs	r2, #12
 80046f2:	2100      	movs	r1, #0
 80046f4:	0018      	movs	r0, r3
 80046f6:	f001 fe86 	bl	8006406 <memset>
    uint8_t tmp_ret[KEYSIZE_BYTE] = {0};
 80046fa:	250c      	movs	r5, #12
 80046fc:	197b      	adds	r3, r7, r5
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	3304      	adds	r3, #4
 8004704:	220c      	movs	r2, #12
 8004706:	2100      	movs	r1, #0
 8004708:	0018      	movs	r0, r3
 800470a:	f001 fe7c 	bl	8006406 <memset>

    // 0x01 || Ne || 00..00
    memset(tmp, 0, KEYSIZE_BYTE);
 800470e:	193b      	adds	r3, r7, r4
 8004710:	2210      	movs	r2, #16
 8004712:	2100      	movs	r1, #0
 8004714:	0018      	movs	r0, r3
 8004716:	f001 fe76 	bl	8006406 <memset>
    tmp[0] = 0x01;
 800471a:	193b      	adds	r3, r7, r4
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
    memcpy_endian(tmp + 1, &Ne, sizeof(Ne));
 8004720:	193b      	adds	r3, r7, r4
 8004722:	3301      	adds	r3, #1
 8004724:	0039      	movs	r1, r7
 8004726:	2204      	movs	r2, #4
 8004728:	0018      	movs	r0, r3
 800472a:	f7ff ff6d 	bl	8004608 <memcpy_endian>

    encECB(Ka, tmp, tmp_ret);
 800472e:	197a      	adds	r2, r7, r5
 8004730:	1939      	adds	r1, r7, r4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 fa4c 	bl	8004bd2 <encECB>

    memcpy_endian(&ret, tmp_ret, 4);
 800473a:	1979      	adds	r1, r7, r5
 800473c:	232c      	movs	r3, #44	; 0x2c
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2204      	movs	r2, #4
 8004742:	0018      	movs	r0, r3
 8004744:	f7ff ff60 	bl	8004608 <memcpy_endian>

    ret = ret & 0xFFFFFF;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c

    return ret;
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b00c      	add	sp, #48	; 0x30
 8004758:	bdb0      	pop	{r4, r5, r7, pc}

0800475a <getKm>:

void getKm(uint8_t* Ka, uint32_t Ne, uint8_t* ret) {
 800475a:	b5b0      	push	{r4, r5, r7, lr}
 800475c:	b08e      	sub	sp, #56	; 0x38
 800475e:	af02      	add	r7, sp, #8
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
    // 0x02 || Ne || 00..00
    uint8_t iv[IVSIZE] = {0};
 8004766:	2420      	movs	r4, #32
 8004768:	193b      	adds	r3, r7, r4
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	3304      	adds	r3, #4
 8004770:	220c      	movs	r2, #12
 8004772:	2100      	movs	r1, #0
 8004774:	0018      	movs	r0, r3
 8004776:	f001 fe46 	bl	8006406 <memset>
    iv[0] = 0x02;
 800477a:	193b      	adds	r3, r7, r4
 800477c:	2202      	movs	r2, #2
 800477e:	701a      	strb	r2, [r3, #0]
    memcpy_endian(iv + 1, &Ne, sizeof(Ne));
 8004780:	193b      	adds	r3, r7, r4
 8004782:	3301      	adds	r3, #1
 8004784:	2208      	movs	r2, #8
 8004786:	18b9      	adds	r1, r7, r2
 8004788:	2204      	movs	r2, #4
 800478a:	0018      	movs	r0, r3
 800478c:	f7ff ff3c 	bl	8004608 <memcpy_endian>

    uint8_t t[KEYSIZE_BYTE] = {0};
 8004790:	2510      	movs	r5, #16
 8004792:	197b      	adds	r3, r7, r5
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	220c      	movs	r2, #12
 800479c:	2100      	movs	r1, #0
 800479e:	0018      	movs	r0, r3
 80047a0:	f001 fe31 	bl	8006406 <memset>
    encCTR(Ka, iv, t, KEYSIZE_BYTE, ret);
 80047a4:	197a      	adds	r2, r7, r5
 80047a6:	1939      	adds	r1, r7, r4
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2310      	movs	r3, #16
 80047b0:	f000 fa1f 	bl	8004bf2 <encCTR>
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b00c      	add	sp, #48	; 0x30
 80047ba:	bdb0      	pop	{r4, r5, r7, pc}

080047bc <getKe>:



void getKe(uint8_t* Ka, uint32_t Ne, uint8_t* Ke) {
 80047bc:	b5b0      	push	{r4, r5, r7, lr}
 80047be:	b08e      	sub	sp, #56	; 0x38
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
    // 0x03 || Ne || 00..00
    uint8_t iv[IVSIZE] = {0};
 80047c8:	2420      	movs	r4, #32
 80047ca:	193b      	adds	r3, r7, r4
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	3304      	adds	r3, #4
 80047d2:	220c      	movs	r2, #12
 80047d4:	2100      	movs	r1, #0
 80047d6:	0018      	movs	r0, r3
 80047d8:	f001 fe15 	bl	8006406 <memset>
    iv[0] = 0x03;
 80047dc:	193b      	adds	r3, r7, r4
 80047de:	2203      	movs	r2, #3
 80047e0:	701a      	strb	r2, [r3, #0]
    memcpy_endian(iv + 1, &Ne, sizeof(Ne));
 80047e2:	193b      	adds	r3, r7, r4
 80047e4:	3301      	adds	r3, #1
 80047e6:	2208      	movs	r2, #8
 80047e8:	18b9      	adds	r1, r7, r2
 80047ea:	2204      	movs	r2, #4
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff ff0b 	bl	8004608 <memcpy_endian>

    uint8_t t[KEYSIZE_BYTE] = {0};
 80047f2:	2510      	movs	r5, #16
 80047f4:	197b      	adds	r3, r7, r5
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	3304      	adds	r3, #4
 80047fc:	220c      	movs	r2, #12
 80047fe:	2100      	movs	r1, #0
 8004800:	0018      	movs	r0, r3
 8004802:	f001 fe00 	bl	8006406 <memset>
    encCTR(Ka, iv, t, KEYSIZE_BYTE, Ke);
 8004806:	197a      	adds	r2, r7, r5
 8004808:	1939      	adds	r1, r7, r4
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2310      	movs	r3, #16
 8004812:	f000 f9ee 	bl	8004bf2 <encCTR>
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b00c      	add	sp, #48	; 0x30
 800481c:	bdb0      	pop	{r4, r5, r7, pc}

0800481e <cryptoMacPayload>:


int cryptoMacPayload(uint8_t* macPayloadIn, uint8_t* macPayloadOut, uint8_t size, uint8_t* Ke, uint16_t Nn) {
 800481e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004820:	b093      	sub	sp, #76	; 0x4c
 8004822:	af02      	add	r7, sp, #8
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	1dfb      	adds	r3, r7, #7
 800482c:	701a      	strb	r2, [r3, #0]
    if (size != 2 && size != 6)
 800482e:	1dfb      	adds	r3, r7, #7
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d006      	beq.n	8004844 <cryptoMacPayload+0x26>
 8004836:	1dfb      	adds	r3, r7, #7
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b06      	cmp	r3, #6
 800483c:	d002      	beq.n	8004844 <cryptoMacPayload+0x26>
        return -1;
 800483e:	2301      	movs	r3, #1
 8004840:	425b      	negs	r3, r3
 8004842:	e03e      	b.n	80048c2 <cryptoMacPayload+0xa4>

    uint8_t iv[IVSIZE] = {0};
 8004844:	2430      	movs	r4, #48	; 0x30
 8004846:	193b      	adds	r3, r7, r4
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	220c      	movs	r2, #12
 8004850:	2100      	movs	r1, #0
 8004852:	0018      	movs	r0, r3
 8004854:	f001 fdd7 	bl	8006406 <memset>
    uint8_t tmpRet[KEYSIZE_BYTE] = {0};
 8004858:	2520      	movs	r5, #32
 800485a:	197b      	adds	r3, r7, r5
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	3304      	adds	r3, #4
 8004862:	220c      	movs	r2, #12
 8004864:	2100      	movs	r1, #0
 8004866:	0018      	movs	r0, r3
 8004868:	f001 fdcd 	bl	8006406 <memset>

    //Nn || 00..00
    memcpy_endian(iv, &Nn, sizeof(Nn));
 800486c:	2348      	movs	r3, #72	; 0x48
 800486e:	2210      	movs	r2, #16
 8004870:	4694      	mov	ip, r2
 8004872:	44bc      	add	ip, r7
 8004874:	4463      	add	r3, ip
 8004876:	1938      	adds	r0, r7, r4
 8004878:	2202      	movs	r2, #2
 800487a:	0019      	movs	r1, r3
 800487c:	f7ff fec4 	bl	8004608 <memcpy_endian>

    uint8_t t[KEYSIZE_BYTE] = {0};
 8004880:	2610      	movs	r6, #16
 8004882:	19bb      	adds	r3, r7, r6
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	3304      	adds	r3, #4
 800488a:	220c      	movs	r2, #12
 800488c:	2100      	movs	r1, #0
 800488e:	0018      	movs	r0, r3
 8004890:	f001 fdb9 	bl	8006406 <memset>
    memcpy(t, macPayloadIn, size);
 8004894:	1dfb      	adds	r3, r7, #7
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	68f9      	ldr	r1, [r7, #12]
 800489a:	19bb      	adds	r3, r7, r6
 800489c:	0018      	movs	r0, r3
 800489e:	f001 fda9 	bl	80063f4 <memcpy>

    encCTR(Ke, iv, t, KEYSIZE_BYTE, tmpRet);
 80048a2:	19ba      	adds	r2, r7, r6
 80048a4:	1939      	adds	r1, r7, r4
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	197b      	adds	r3, r7, r5
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2310      	movs	r3, #16
 80048ae:	f000 f9a0 	bl	8004bf2 <encCTR>

    memcpy(macPayloadOut, tmpRet, size);
 80048b2:	1dfb      	adds	r3, r7, #7
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	1979      	adds	r1, r7, r5
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f001 fd9a 	bl	80063f4 <memcpy>

    return 0;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b011      	add	sp, #68	; 0x44
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ca <getMIC>:


int getMIC(uint8_t* Km, uint32_t DevAddr, uint8_t* dataIn, uint8_t* dataOut, uint8_t size, uint16_t Nn) {
 80048ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048cc:	b0a3      	sub	sp, #140	; 0x8c
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
    if (size != 2 && size != 6)
 80048d8:	2290      	movs	r2, #144	; 0x90
 80048da:	2108      	movs	r1, #8
 80048dc:	2308      	movs	r3, #8
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	185b      	adds	r3, r3, r1
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d009      	beq.n	80048fe <getMIC+0x34>
 80048ea:	2308      	movs	r3, #8
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	185b      	adds	r3, r3, r1
 80048f0:	189b      	adds	r3, r3, r2
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b06      	cmp	r3, #6
 80048f6:	d002      	beq.n	80048fe <getMIC+0x34>
        return -1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	425b      	negs	r3, r3
 80048fc:	e120      	b.n	8004b40 <getMIC+0x276>

#if defined(AES128) || defined(AES256) || defined(KUZNECHIK)
    uint8_t P[16] = { 0 };
 80048fe:	2460      	movs	r4, #96	; 0x60
 8004900:	193b      	adds	r3, r7, r4
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	3304      	adds	r3, #4
 8004908:	220c      	movs	r2, #12
 800490a:	2100      	movs	r1, #0
 800490c:	0018      	movs	r0, r3
 800490e:	f001 fd7a 	bl	8006406 <memset>
#else
    uint8_t P[8] = { 0 };
#endif
    // 00..00
    memset(P, 0, sizeof(P));
 8004912:	193b      	adds	r3, r7, r4
 8004914:	2210      	movs	r2, #16
 8004916:	2100      	movs	r1, #0
 8004918:	0018      	movs	r0, r3
 800491a:	f001 fd74 	bl	8006406 <memset>
    // DevAddr || 00..00
    memcpy_endian(P, &DevAddr, 4);
 800491e:	2308      	movs	r3, #8
 8004920:	001e      	movs	r6, r3
 8004922:	18f9      	adds	r1, r7, r3
 8004924:	193b      	adds	r3, r7, r4
 8004926:	2204      	movs	r2, #4
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff fe6d 	bl	8004608 <memcpy_endian>
    // DevAddr || cryptoMacPayload || 00..00
    memcpy(P + 3, dataIn, size);
 800492e:	193b      	adds	r3, r7, r4
 8004930:	3303      	adds	r3, #3
 8004932:	2590      	movs	r5, #144	; 0x90
 8004934:	2208      	movs	r2, #8
 8004936:	18ba      	adds	r2, r7, r2
 8004938:	1992      	adds	r2, r2, r6
 800493a:	1952      	adds	r2, r2, r5
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f001 fd57 	bl	80063f4 <memcpy>
    // DevAddr || cryptoMacPayload || Nn || 00..00
    memcpy_endian(P + 3 + size, &Nn, sizeof(Nn));
 8004946:	0031      	movs	r1, r6
 8004948:	2308      	movs	r3, #8
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	199b      	adds	r3, r3, r6
 800494e:	195b      	adds	r3, r3, r5
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	3303      	adds	r3, #3
 8004954:	193a      	adds	r2, r7, r4
 8004956:	18d3      	adds	r3, r2, r3
 8004958:	2294      	movs	r2, #148	; 0x94
 800495a:	2008      	movs	r0, #8
 800495c:	4684      	mov	ip, r0
 800495e:	44bc      	add	ip, r7
 8004960:	4461      	add	r1, ip
 8004962:	1889      	adds	r1, r1, r2
 8004964:	2202      	movs	r2, #2
 8004966:	0018      	movs	r0, r3
 8004968:	f7ff fe4e 	bl	8004608 <memcpy_endian>
    // DevAddr || cryptoMacPayload || Nn || 00..00 || 0x10
    P[sizeof (P) - 1] = 0x10;
 800496c:	193b      	adds	r3, r7, r4
 800496e:	2210      	movs	r2, #16
 8004970:	73da      	strb	r2, [r3, #15]

#if defined(AES128) || defined(AES256)
    uint8_t R[KEYSIZE_BYTE] = {0};
 8004972:	2450      	movs	r4, #80	; 0x50
 8004974:	193b      	adds	r3, r7, r4
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	3304      	adds	r3, #4
 800497c:	220c      	movs	r2, #12
 800497e:	2100      	movs	r1, #0
 8004980:	0018      	movs	r0, r3
 8004982:	f001 fd40 	bl	8006406 <memset>
    uint8_t K1[KEYSIZE_BYTE] = {0};
 8004986:	2340      	movs	r3, #64	; 0x40
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	3304      	adds	r3, #4
 8004990:	220c      	movs	r2, #12
 8004992:	2100      	movs	r1, #0
 8004994:	0018      	movs	r0, r3
 8004996:	f001 fd36 	bl	8006406 <memset>
    uint8_t t[KEYSIZE_BYTE] = {0};
 800499a:	2530      	movs	r5, #48	; 0x30
 800499c:	197b      	adds	r3, r7, r5
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	3304      	adds	r3, #4
 80049a4:	220c      	movs	r2, #12
 80049a6:	2100      	movs	r1, #0
 80049a8:	0018      	movs	r0, r3
 80049aa:	f001 fd2c 	bl	8006406 <memset>

    aesECB(Km, t, R);
 80049ae:	193a      	adds	r2, r7, r4
 80049b0:	1979      	adds	r1, r7, r5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 f8ef 	bl	8004b98 <aesECB>

    uint8_t msb = (R[0] >> 7) & 1;
 80049ba:	193b      	adds	r3, r7, r4
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	2373      	movs	r3, #115	; 0x73
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	09d2      	lsrs	r2, r2, #7
 80049c4:	701a      	strb	r2, [r3, #0]

    // R << 1
    for (int i = sizeof(R) - 1; i >= 0; i--) {
 80049c6:	230f      	movs	r3, #15
 80049c8:	2284      	movs	r2, #132	; 0x84
 80049ca:	18ba      	adds	r2, r7, r2
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e031      	b.n	8004a34 <getMIC+0x16a>
        R[i] = R[i] << 1;
 80049d0:	2450      	movs	r4, #80	; 0x50
 80049d2:	193a      	adds	r2, r7, r4
 80049d4:	2084      	movs	r0, #132	; 0x84
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	18d3      	adds	r3, r2, r3
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	18db      	adds	r3, r3, r3
 80049e0:	b2d9      	uxtb	r1, r3
 80049e2:	193a      	adds	r2, r7, r4
 80049e4:	183b      	adds	r3, r7, r0
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	1c0a      	adds	r2, r1, #0
 80049ec:	701a      	strb	r2, [r3, #0]
        if (i != 0)
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d018      	beq.n	8004a28 <getMIC+0x15e>
            R[i] |= (R[i - 1] >> 7) & 1;
 80049f6:	0021      	movs	r1, r4
 80049f8:	187a      	adds	r2, r7, r1
 80049fa:	183b      	adds	r3, r7, r0
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b25a      	sxtb	r2, r3
 8004a04:	183b      	adds	r3, r7, r0
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	000c      	movs	r4, r1
 8004a0c:	1879      	adds	r1, r7, r1
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	09db      	lsrs	r3, r3, #7
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b25b      	sxtb	r3, r3
 8004a1a:	b2d9      	uxtb	r1, r3
 8004a1c:	193a      	adds	r2, r7, r4
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	18d3      	adds	r3, r2, r3
 8004a24:	1c0a      	adds	r2, r1, #0
 8004a26:	701a      	strb	r2, [r3, #0]
    for (int i = sizeof(R) - 1; i >= 0; i--) {
 8004a28:	2284      	movs	r2, #132	; 0x84
 8004a2a:	18bb      	adds	r3, r7, r2
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	18ba      	adds	r2, r7, r2
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	2384      	movs	r3, #132	; 0x84
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dac8      	bge.n	80049d0 <getMIC+0x106>
    }

    // if ( MSB1(R) = 1)
    if (msb) {
 8004a3e:	2373      	movs	r3, #115	; 0x73
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d032      	beq.n	8004aae <getMIC+0x1e4>
        uint8_t B[KEYSIZE_BYTE] = {0};
 8004a48:	2410      	movs	r4, #16
 8004a4a:	193b      	adds	r3, r7, r4
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	3304      	adds	r3, #4
 8004a52:	220c      	movs	r2, #12
 8004a54:	2100      	movs	r1, #0
 8004a56:	0018      	movs	r0, r3
 8004a58:	f001 fcd5 	bl	8006406 <memset>
        B[0] = 0b10000111;
 8004a5c:	193b      	adds	r3, r7, r4
 8004a5e:	2287      	movs	r2, #135	; 0x87
 8004a60:	701a      	strb	r2, [r3, #0]

        for (unsigned int i = 0; i < sizeof(K1); i++) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	2280      	movs	r2, #128	; 0x80
 8004a66:	18ba      	adds	r2, r7, r2
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01a      	b.n	8004aa2 <getMIC+0x1d8>
            K1[i] = R[i] ^ B[i];
 8004a6c:	2350      	movs	r3, #80	; 0x50
 8004a6e:	18fa      	adds	r2, r7, r3
 8004a70:	2080      	movs	r0, #128	; 0x80
 8004a72:	183b      	adds	r3, r7, r0
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	18d3      	adds	r3, r2, r3
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	18f9      	adds	r1, r7, r3
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	18cb      	adds	r3, r1, r3
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	4053      	eors	r3, r2
 8004a88:	b2d9      	uxtb	r1, r3
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	18fa      	adds	r2, r7, r3
 8004a8e:	183b      	adds	r3, r7, r0
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	18d3      	adds	r3, r2, r3
 8004a94:	1c0a      	adds	r2, r1, #0
 8004a96:	701a      	strb	r2, [r3, #0]
        for (unsigned int i = 0; i < sizeof(K1); i++) {
 8004a98:	183b      	adds	r3, r7, r0
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	183a      	adds	r2, r7, r0
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b0f      	cmp	r3, #15
 8004aaa:	d9df      	bls.n	8004a6c <getMIC+0x1a2>
 8004aac:	e013      	b.n	8004ad6 <getMIC+0x20c>
        }
    }
    // if ( MSB1(R) = 0)
    else {
        for (unsigned int i = 0; i < sizeof(K1); i++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ab2:	e00d      	b.n	8004ad0 <getMIC+0x206>
            K1[i] = R[i];
 8004ab4:	2350      	movs	r3, #80	; 0x50
 8004ab6:	18fa      	adds	r2, r7, r3
 8004ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	7819      	ldrb	r1, [r3, #0]
 8004abe:	2340      	movs	r3, #64	; 0x40
 8004ac0:	18fa      	adds	r2, r7, r3
 8004ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ac4:	18d3      	adds	r3, r2, r3
 8004ac6:	1c0a      	adds	r2, r1, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
        for (unsigned int i = 0; i < sizeof(K1); i++) {
 8004aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004acc:	3301      	adds	r3, #1
 8004ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	d9ee      	bls.n	8004ab4 <getMIC+0x1ea>
        }
    }

    for (unsigned int i = 0; i < sizeof(P); i++) {
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ada:	e013      	b.n	8004b04 <getMIC+0x23a>
        K1[i] ^= P[i];
 8004adc:	2040      	movs	r0, #64	; 0x40
 8004ade:	183a      	adds	r2, r7, r0
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae2:	18d3      	adds	r3, r2, r3
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	2360      	movs	r3, #96	; 0x60
 8004ae8:	18f9      	adds	r1, r7, r3
 8004aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aec:	18cb      	adds	r3, r1, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4053      	eors	r3, r2
 8004af2:	b2d9      	uxtb	r1, r3
 8004af4:	183a      	adds	r2, r7, r0
 8004af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	1c0a      	adds	r2, r1, #0
 8004afc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < sizeof(P); i++) {
 8004afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b00:	3301      	adds	r3, #1
 8004b02:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b06:	2b0f      	cmp	r3, #15
 8004b08:	d9e8      	bls.n	8004adc <getMIC+0x212>
    }

    uint8_t tmp[KEYSIZE_BYTE];

    aesECB(Km, K1, tmp);
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	18fa      	adds	r2, r7, r3
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	18f9      	adds	r1, r7, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f83f 	bl	8004b98 <aesECB>

    for (int i = 0; i < 3; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8004b1e:	e00b      	b.n	8004b38 <getMIC+0x26e>
        dataOut[i] = tmp[i];
 8004b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	2220      	movs	r2, #32
 8004b28:	18b9      	adds	r1, r7, r2
 8004b2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b2c:	188a      	adds	r2, r1, r2
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++)
 8004b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b34:	3301      	adds	r3, #1
 8004b36:	677b      	str	r3, [r7, #116]	; 0x74
 8004b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	ddf0      	ble.n	8004b20 <getMIC+0x256>
    ret = kzchMgmCMAC(Km, P.data, 128 / 8);
#elif defined(MAGMA)
    ret = kzchMgmCMAC(Km, P.data, 64 / 8);
#endif

    return 0;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b023      	add	sp, #140	; 0x8c
 8004b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b48 <aesCTR>:

    AES_init_ctx_iv(&_key, key, iv);
    AES_CTR_xcrypt_buffer(&_key, ret, KEYSIZE_BYTE);
}

void aesCTR(uint8_t* key, uint8_t* iv, uint8_t* data, size_t size, uint8_t* ret) {
 8004b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4a:	b0b5      	sub	sp, #212	; 0xd4
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
    struct AES_ctx _key;
    memcpy(ret, data, size);
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	24d8      	movs	r4, #216	; 0xd8
 8004b5c:	2608      	movs	r6, #8
 8004b5e:	2308      	movs	r3, #8
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	199b      	adds	r3, r3, r6
 8004b64:	191b      	adds	r3, r3, r4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f001 fc43 	bl	80063f4 <memcpy>
    AES_init_ctx_iv(&_key, key, iv);
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	2510      	movs	r5, #16
 8004b74:	197b      	adds	r3, r7, r5
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f94d 	bl	8004e16 <AES_init_ctx_iv>
    AES_CTR_xcrypt_buffer(&_key, ret, size);
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	2308      	movs	r3, #8
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	199b      	adds	r3, r3, r6
 8004b84:	191b      	adds	r3, r3, r4
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	197b      	adds	r3, r7, r5
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 fba3 	bl	80052d6 <AES_CTR_xcrypt_buffer>
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b035      	add	sp, #212	; 0xd4
 8004b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b98 <aesECB>:

void aesECB(uint8_t* key, uint8_t* data, uint8_t* ret) {
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b0b5      	sub	sp, #212	; 0xd4
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
    struct AES_ctx _key;
    memcpy(ret, data, KEYSIZE_BYTE);
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	0018      	movs	r0, r3
 8004bac:	f001 fc22 	bl	80063f4 <memcpy>

    AES_init_ctx(&_key, key);
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	2410      	movs	r4, #16
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	0011      	movs	r1, r2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 f91d 	bl	8004df8 <AES_init_ctx>

    AES_ECB_encrypt(&_key, ret);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 fb77 	bl	80052b8 <AES_ECB_encrypt>
}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b035      	add	sp, #212	; 0xd4
 8004bd0:	bd90      	pop	{r4, r7, pc}

08004bd2 <encECB>:
    ak_bckey_cmac(&bkey, data, size, ret.data, sizeof(ret));
    return ret;
}
#endif

void encECB(uint8_t* key, uint8_t* data, uint8_t* ret) {
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]

#if defined(AES128)
    aesECB(key, data, ret);//aes128Enc(Ka, tmp);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff ffd7 	bl	8004b98 <aesECB>
#endif

#if defined(KUZNECHIK) | defined(MAGMA)
    ret = kzchMgmECB(key, data);
#endif
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <encCTR>:

void encCTR(uint8_t* key, uint8_t* iv, uint8_t* data, size_t size, uint8_t* ret) {
 8004bf2:	b590      	push	{r4, r7, lr}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	603b      	str	r3, [r7, #0]
#if defined(AES128)
    aesCTR(key, iv, data, size, ret);
 8004c00:	683c      	ldr	r4, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	0023      	movs	r3, r4
 8004c0e:	f7ff ff9b 	bl	8004b48 <aesCTR>
#endif
#if defined(KUZNECHIK) | defined(MAGMA)
    ret = kzchMgmCTR(key, iv, data);
#endif
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b005      	add	sp, #20
 8004c18:	bd90      	pop	{r4, r7, pc}
	...

08004c1c <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e030      	b.n	8004c8e <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	18d2      	adds	r2, r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	18cb      	adds	r3, r1, r3
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	3301      	adds	r3, #1
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	18d2      	adds	r2, r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	3301      	adds	r3, #1
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	18cb      	adds	r3, r1, r3
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	18d2      	adds	r2, r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	18cb      	adds	r3, r1, r3
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3303      	adds	r3, #3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	18d2      	adds	r2, r2, r3
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	3303      	adds	r3, #3
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	18cb      	adds	r3, r1, r3
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d9cb      	bls.n	8004c2c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8004c94:	2304      	movs	r3, #4
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e0a0      	b.n	8004ddc <KeyExpansion+0x1c0>
  {
    {
      k = (i - 1) * 4;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	18d3      	adds	r3, r2, r3
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	210c      	movs	r1, #12
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	18d3      	adds	r3, r2, r3
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	18d3      	adds	r3, r2, r3
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	3303      	adds	r3, #3
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2203      	movs	r2, #3
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d13b      	bne.n	8004d5a <KeyExpansion+0x13e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8004ce2:	2417      	movs	r4, #23
 8004ce4:	193b      	adds	r3, r7, r4
 8004ce6:	0008      	movs	r0, r1
 8004ce8:	183a      	adds	r2, r7, r0
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	785a      	ldrb	r2, [r3, #1]
 8004cf2:	183b      	adds	r3, r7, r0
 8004cf4:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	789a      	ldrb	r2, [r3, #2]
 8004cfa:	183b      	adds	r3, r7, r0
 8004cfc:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8004cfe:	183b      	adds	r3, r7, r0
 8004d00:	78da      	ldrb	r2, [r3, #3]
 8004d02:	183b      	adds	r3, r7, r0
 8004d04:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	193a      	adds	r2, r7, r4
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	001a      	movs	r2, r3
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <KeyExpansion+0x1d4>)
 8004d16:	5c9a      	ldrb	r2, [r3, r2]
 8004d18:	183b      	adds	r3, r7, r0
 8004d1a:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8004d1c:	183b      	adds	r3, r7, r0
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	001a      	movs	r2, r3
 8004d22:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <KeyExpansion+0x1d4>)
 8004d24:	5c9a      	ldrb	r2, [r3, r2]
 8004d26:	183b      	adds	r3, r7, r0
 8004d28:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	789b      	ldrb	r3, [r3, #2]
 8004d2e:	001a      	movs	r2, r3
 8004d30:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <KeyExpansion+0x1d4>)
 8004d32:	5c9a      	ldrb	r2, [r3, r2]
 8004d34:	183b      	adds	r3, r7, r0
 8004d36:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	78db      	ldrb	r3, [r3, #3]
 8004d3c:	001a      	movs	r2, r3
 8004d3e:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <KeyExpansion+0x1d4>)
 8004d40:	5c9a      	ldrb	r2, [r3, r2]
 8004d42:	183b      	adds	r3, r7, r0
 8004d44:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8004d46:	183b      	adds	r3, r7, r0
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	4929      	ldr	r1, [pc, #164]	; (8004df4 <KeyExpansion+0x1d8>)
 8004d50:	5ccb      	ldrb	r3, [r1, r3]
 8004d52:	4053      	eors	r3, r2
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3b04      	subs	r3, #4
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	7819      	ldrb	r1, [r3, #0]
 8004d70:	240c      	movs	r4, #12
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	18c3      	adds	r3, r0, r3
 8004d7c:	404a      	eors	r2, r1
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3301      	adds	r3, #1
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	7819      	ldrb	r1, [r3, #0]
 8004d8c:	193b      	adds	r3, r7, r4
 8004d8e:	785a      	ldrb	r2, [r3, #1]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3301      	adds	r3, #1
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	18c3      	adds	r3, r0, r3
 8004d98:	404a      	eors	r2, r1
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	3302      	adds	r3, #2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	18d3      	adds	r3, r2, r3
 8004da6:	7819      	ldrb	r1, [r3, #0]
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	789a      	ldrb	r2, [r3, #2]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3302      	adds	r3, #2
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	18c3      	adds	r3, r0, r3
 8004db4:	404a      	eors	r2, r1
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3303      	adds	r3, #3
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	18d3      	adds	r3, r2, r3
 8004dc2:	7819      	ldrb	r1, [r3, #0]
 8004dc4:	193b      	adds	r3, r7, r4
 8004dc6:	78da      	ldrb	r2, [r3, #3]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3303      	adds	r3, #3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	18c3      	adds	r3, r0, r3
 8004dd0:	404a      	eors	r2, r1
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b2b      	cmp	r3, #43	; 0x2b
 8004de0:	d800      	bhi.n	8004de4 <KeyExpansion+0x1c8>
 8004de2:	e75a      	b.n	8004c9a <KeyExpansion+0x7e>
  }
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b009      	add	sp, #36	; 0x24
 8004dec:	bd90      	pop	{r4, r7, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	0800786c 	.word	0x0800786c
 8004df4:	0800796c 	.word	0x0800796c

08004df8 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	0011      	movs	r1, r2
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff ff07 	bl	8004c1c <KeyExpansion>
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <AES_init_ctx_iv>:
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	0011      	movs	r1, r2
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7ff fef7 	bl	8004c1c <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	33b0      	adds	r3, #176	; 0xb0
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	2210      	movs	r2, #16
 8004e36:	0018      	movs	r0, r3
 8004e38:	f001 fadc 	bl	80063f4 <memcpy>
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b004      	add	sp, #16
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8004e44:	b5b0      	push	{r4, r5, r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	230f      	movs	r3, #15
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	1c02      	adds	r2, r0, #0
 8004e54:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8004e56:	2317      	movs	r3, #23
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e038      	b.n	8004ed2 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8004e60:	2316      	movs	r3, #22
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e028      	b.n	8004ebc <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8004e6a:	2517      	movs	r5, #23
 8004e6c:	197b      	adds	r3, r7, r5
 8004e6e:	781a      	ldrb	r2, [r3, #0]
 8004e70:	2416      	movs	r4, #22
 8004e72:	193b      	adds	r3, r7, r4
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	0092      	lsls	r2, r2, #2
 8004e7a:	188a      	adds	r2, r1, r2
 8004e7c:	5cd0      	ldrb	r0, [r2, r3]
 8004e7e:	230f      	movs	r3, #15
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009a      	lsls	r2, r3, #2
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	009a      	lsls	r2, r3, #2
 8004e8e:	193b      	adds	r3, r7, r4
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	18d3      	adds	r3, r2, r3
 8004e94:	001a      	movs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	7819      	ldrb	r1, [r3, #0]
 8004e9c:	197b      	adds	r3, r7, r5
 8004e9e:	781a      	ldrb	r2, [r3, #0]
 8004ea0:	193b      	adds	r3, r7, r4
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4041      	eors	r1, r0
 8004ea6:	b2c8      	uxtb	r0, r1
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	0092      	lsls	r2, r2, #2
 8004eac:	188a      	adds	r2, r1, r2
 8004eae:	1c01      	adds	r1, r0, #0
 8004eb0:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	193a      	adds	r2, r7, r4
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	3201      	adds	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	2316      	movs	r3, #22
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d9d1      	bls.n	8004e6a <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 8004ec6:	2217      	movs	r2, #23
 8004ec8:	18bb      	adds	r3, r7, r2
 8004eca:	18ba      	adds	r2, r7, r2
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	3201      	adds	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	2317      	movs	r3, #23
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d9c1      	bls.n	8004e60 <AddRoundKey+0x1c>
    }
  }
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b006      	add	sp, #24
 8004ee4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004ee8 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8004ef0:	230f      	movs	r3, #15
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e02a      	b.n	8004f50 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8004efa:	230e      	movs	r3, #14
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e01a      	b.n	8004f3a <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8004f04:	240e      	movs	r4, #14
 8004f06:	193b      	adds	r3, r7, r4
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	250f      	movs	r5, #15
 8004f0c:	197b      	adds	r3, r7, r5
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	188a      	adds	r2, r1, r2
 8004f16:	5cd3      	ldrb	r3, [r2, r3]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	197b      	adds	r3, r7, r5
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	4910      	ldr	r1, [pc, #64]	; (8004f64 <SubBytes+0x7c>)
 8004f24:	5c08      	ldrb	r0, [r1, r0]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	0092      	lsls	r2, r2, #2
 8004f2a:	188a      	adds	r2, r1, r2
 8004f2c:	1c01      	adds	r1, r0, #0
 8004f2e:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8004f30:	193b      	adds	r3, r7, r4
 8004f32:	193a      	adds	r2, r7, r4
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	3201      	adds	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	230e      	movs	r3, #14
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d9df      	bls.n	8004f04 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8004f44:	220f      	movs	r2, #15
 8004f46:	18bb      	adds	r3, r7, r2
 8004f48:	18ba      	adds	r2, r7, r2
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	3201      	adds	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d9cf      	bls.n	8004efa <SubBytes+0x12>
    }
  }
}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b004      	add	sp, #16
 8004f62:	bdb0      	pop	{r4, r5, r7, pc}
 8004f64:	0800786c 	.word	0x0800786c

08004f68 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8004f70:	210f      	movs	r1, #15
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	7852      	ldrb	r2, [r2, #1]
 8004f78:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	795a      	ldrb	r2, [r3, #5]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7a5a      	ldrb	r2, [r3, #9]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7b5a      	ldrb	r2, [r3, #13]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	187a      	adds	r2, r7, r1
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	7892      	ldrb	r2, [r2, #2]
 8004fa0:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7a9a      	ldrb	r2, [r3, #10]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	187a      	adds	r2, r7, r1
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8004fb2:	187b      	adds	r3, r7, r1
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	7992      	ldrb	r2, [r2, #6]
 8004fb8:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7b9a      	ldrb	r2, [r3, #14]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	187a      	adds	r2, r7, r1
 8004fc6:	7812      	ldrb	r2, [r2, #0]
 8004fc8:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8004fca:	187b      	adds	r3, r7, r1
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	78d2      	ldrb	r2, [r2, #3]
 8004fd0:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7bda      	ldrb	r2, [r3, #15]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7ada      	ldrb	r2, [r3, #11]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	79da      	ldrb	r2, [r3, #7]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	187a      	adds	r2, r7, r1
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	71da      	strb	r2, [r3, #7]
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b004      	add	sp, #16
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <xtime>:

static uint8_t xtime(uint8_t x)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	0002      	movs	r2, r0
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	b25a      	sxtb	r2, r3
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	09db      	lsrs	r3, r3, #7
 8005014:	b2db      	uxtb	r3, r3
 8005016:	1c19      	adds	r1, r3, #0
 8005018:	1c0b      	adds	r3, r1, #0
 800501a:	18db      	adds	r3, r3, r3
 800501c:	185b      	adds	r3, r3, r1
 800501e:	1c19      	adds	r1, r3, #0
 8005020:	00c8      	lsls	r0, r1, #3
 8005022:	1c19      	adds	r1, r3, #0
 8005024:	1c03      	adds	r3, r0, #0
 8005026:	18cb      	adds	r3, r1, r3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	b25b      	sxtb	r3, r3
 800502c:	4053      	eors	r3, r2
 800502e:	b25b      	sxtb	r3, r3
 8005030:	b2db      	uxtb	r3, r3
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b002      	add	sp, #8
 8005038:	bd80      	pop	{r7, pc}

0800503a <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 800503a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8005042:	230f      	movs	r3, #15
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e0ef      	b.n	800522c <MixColumns+0x1f2>
  {  
    t   = (*state)[i][0];
 800504c:	250f      	movs	r5, #15
 800504e:	197b      	adds	r3, r7, r5
 8005050:	7819      	ldrb	r1, [r3, #0]
 8005052:	230e      	movs	r3, #14
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	0089      	lsls	r1, r1, #2
 800505a:	5c8a      	ldrb	r2, [r1, r2]
 800505c:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800505e:	197b      	adds	r3, r7, r5
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0092      	lsls	r2, r2, #2
 8005066:	5cd2      	ldrb	r2, [r2, r3]
 8005068:	197b      	adds	r3, r7, r5
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	18cb      	adds	r3, r1, r3
 8005072:	3301      	adds	r3, #1
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	4053      	eors	r3, r2
 8005078:	b2da      	uxtb	r2, r3
 800507a:	197b      	adds	r3, r7, r5
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	18cb      	adds	r3, r1, r3
 8005084:	3302      	adds	r3, #2
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	4053      	eors	r3, r2
 800508a:	b2d9      	uxtb	r1, r3
 800508c:	197b      	adds	r3, r7, r5
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	18d3      	adds	r3, r2, r3
 8005096:	3303      	adds	r3, #3
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	230d      	movs	r3, #13
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	404a      	eors	r2, r1
 80050a0:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80050a2:	197b      	adds	r3, r7, r5
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	0092      	lsls	r2, r2, #2
 80050aa:	5cd1      	ldrb	r1, [r2, r3]
 80050ac:	197b      	adds	r3, r7, r5
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	3301      	adds	r3, #1
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	260c      	movs	r6, #12
 80050bc:	19bb      	adds	r3, r7, r6
 80050be:	404a      	eors	r2, r1
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	19bc      	adds	r4, r7, r6
 80050c4:	19bb      	adds	r3, r7, r6
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7ff ff96 	bl	8004ffa <xtime>
 80050ce:	0003      	movs	r3, r0
 80050d0:	7023      	strb	r3, [r4, #0]
 80050d2:	197b      	adds	r3, r7, r5
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0092      	lsls	r2, r2, #2
 80050da:	5cd1      	ldrb	r1, [r2, r3]
 80050dc:	0030      	movs	r0, r6
 80050de:	183a      	adds	r2, r7, r0
 80050e0:	230d      	movs	r3, #13
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	4053      	eors	r3, r2
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	197a      	adds	r2, r7, r5
 80050ee:	7812      	ldrb	r2, [r2, #0]
 80050f0:	404b      	eors	r3, r1
 80050f2:	b2d9      	uxtb	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0092      	lsls	r2, r2, #2
 80050f8:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80050fa:	197b      	adds	r3, r7, r5
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	18d3      	adds	r3, r2, r3
 8005104:	3301      	adds	r3, #1
 8005106:	7819      	ldrb	r1, [r3, #0]
 8005108:	197b      	adds	r3, r7, r5
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	18d3      	adds	r3, r2, r3
 8005112:	3302      	adds	r3, #2
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	183b      	adds	r3, r7, r0
 8005118:	404a      	eors	r2, r1
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	183c      	adds	r4, r7, r0
 800511e:	0006      	movs	r6, r0
 8005120:	183b      	adds	r3, r7, r0
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	0018      	movs	r0, r3
 8005126:	f7ff ff68 	bl	8004ffa <xtime>
 800512a:	0003      	movs	r3, r0
 800512c:	7023      	strb	r3, [r4, #0]
 800512e:	197b      	adds	r3, r7, r5
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	18d3      	adds	r3, r2, r3
 8005138:	3301      	adds	r3, #1
 800513a:	7819      	ldrb	r1, [r3, #0]
 800513c:	0030      	movs	r0, r6
 800513e:	183a      	adds	r2, r7, r0
 8005140:	230d      	movs	r3, #13
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	4053      	eors	r3, r2
 800514a:	b2da      	uxtb	r2, r3
 800514c:	197b      	adds	r3, r7, r5
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	404a      	eors	r2, r1
 8005152:	b2d1      	uxtb	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	3301      	adds	r3, #1
 800515c:	1c0a      	adds	r2, r1, #0
 800515e:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8005160:	197b      	adds	r3, r7, r5
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	3302      	adds	r3, #2
 800516c:	7819      	ldrb	r1, [r3, #0]
 800516e:	197b      	adds	r3, r7, r5
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	3303      	adds	r3, #3
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	183b      	adds	r3, r7, r0
 800517e:	404a      	eors	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	183c      	adds	r4, r7, r0
 8005184:	0006      	movs	r6, r0
 8005186:	183b      	adds	r3, r7, r0
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	0018      	movs	r0, r3
 800518c:	f7ff ff35 	bl	8004ffa <xtime>
 8005190:	0003      	movs	r3, r0
 8005192:	7023      	strb	r3, [r4, #0]
 8005194:	197b      	adds	r3, r7, r5
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	18d3      	adds	r3, r2, r3
 800519e:	3302      	adds	r3, #2
 80051a0:	7819      	ldrb	r1, [r3, #0]
 80051a2:	0030      	movs	r0, r6
 80051a4:	183a      	adds	r2, r7, r0
 80051a6:	230d      	movs	r3, #13
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	4053      	eors	r3, r2
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	197b      	adds	r3, r7, r5
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	404a      	eors	r2, r1
 80051b8:	b2d1      	uxtb	r1, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	18d3      	adds	r3, r2, r3
 80051c0:	3302      	adds	r3, #2
 80051c2:	1c0a      	adds	r2, r1, #0
 80051c4:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80051c6:	197b      	adds	r3, r7, r5
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	18d3      	adds	r3, r2, r3
 80051d0:	3303      	adds	r3, #3
 80051d2:	7819      	ldrb	r1, [r3, #0]
 80051d4:	183b      	adds	r3, r7, r0
 80051d6:	220e      	movs	r2, #14
 80051d8:	18ba      	adds	r2, r7, r2
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	404a      	eors	r2, r1
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	183c      	adds	r4, r7, r0
 80051e2:	0006      	movs	r6, r0
 80051e4:	183b      	adds	r3, r7, r0
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7ff ff06 	bl	8004ffa <xtime>
 80051ee:	0003      	movs	r3, r0
 80051f0:	7023      	strb	r3, [r4, #0]
 80051f2:	197b      	adds	r3, r7, r5
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	18d3      	adds	r3, r2, r3
 80051fc:	3303      	adds	r3, #3
 80051fe:	7819      	ldrb	r1, [r3, #0]
 8005200:	19ba      	adds	r2, r7, r6
 8005202:	230d      	movs	r3, #13
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4053      	eors	r3, r2
 800520c:	b2da      	uxtb	r2, r3
 800520e:	197b      	adds	r3, r7, r5
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	404a      	eors	r2, r1
 8005214:	b2d1      	uxtb	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	3303      	adds	r3, #3
 800521e:	1c0a      	adds	r2, r1, #0
 8005220:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8005222:	197b      	adds	r3, r7, r5
 8005224:	197a      	adds	r2, r7, r5
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	3201      	adds	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	230f      	movs	r3, #15
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d800      	bhi.n	8005238 <MixColumns+0x1fe>
 8005236:	e709      	b.n	800504c <MixColumns+0x12>
  }
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	46bd      	mov	sp, r7
 800523e:	b005      	add	sp, #20
 8005240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005242 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8005242:	b590      	push	{r4, r7, lr}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800524c:	240f      	movs	r4, #15
 800524e:	193b      	adds	r3, r7, r4
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0019      	movs	r1, r3
 800525a:	2000      	movs	r0, #0
 800525c:	f7ff fdf2 	bl	8004e44 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8005260:	193b      	adds	r3, r7, r4
 8005262:	2201      	movs	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
  {
    SubBytes(state);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	0018      	movs	r0, r3
 800526a:	f7ff fe3d 	bl	8004ee8 <SubBytes>
    ShiftRows(state);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f7ff fe79 	bl	8004f68 <ShiftRows>
    if (round == Nr) {
 8005276:	240f      	movs	r4, #15
 8005278:	193b      	adds	r3, r7, r4
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b0a      	cmp	r3, #10
 800527e:	d010      	beq.n	80052a2 <Cipher+0x60>
      break;
    }
    MixColumns(state);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f7ff fed9 	bl	800503a <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	193b      	adds	r3, r7, r4
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	0018      	movs	r0, r3
 8005292:	f7ff fdd7 	bl	8004e44 <AddRoundKey>
  for (round = 1; ; ++round)
 8005296:	193b      	adds	r3, r7, r4
 8005298:	193a      	adds	r2, r7, r4
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	3201      	adds	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
    SubBytes(state);
 80052a0:	e7e1      	b.n	8005266 <Cipher+0x24>
      break;
 80052a2:	46c0      	nop			; (mov r8, r8)
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	0019      	movs	r1, r3
 80052aa:	200a      	movs	r0, #10
 80052ac:	f7ff fdca 	bl	8004e44 <AddRoundKey>
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b005      	add	sp, #20
 80052b6:	bd90      	pop	{r4, r7, pc}

080052b8 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	0011      	movs	r1, r2
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7ff ffba 	bl	8005242 <Cipher>
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b002      	add	sp, #8
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, uint32_t length)
{
 80052d6:	b590      	push	{r4, r7, lr}
 80052d8:	b08b      	sub	sp, #44	; 0x2c
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];
  
  unsigned i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	2310      	movs	r3, #16
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	e052      	b.n	8005392 <AES_CTR_xcrypt_buffer+0xbc>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d13a      	bne.n	8005368 <AES_CTR_xcrypt_buffer+0x92>
    {
      
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	33b0      	adds	r3, #176	; 0xb0
 80052f6:	2410      	movs	r4, #16
 80052f8:	193a      	adds	r2, r7, r4
 80052fa:	0010      	movs	r0, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	2310      	movs	r3, #16
 8005300:	001a      	movs	r2, r3
 8005302:	f001 f877 	bl	80063f4 <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	193b      	adds	r3, r7, r4
 800530a:	0011      	movs	r1, r2
 800530c:	0018      	movs	r0, r3
 800530e:	f7ff ff98 	bl	8005242 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8005312:	230f      	movs	r3, #15
 8005314:	623b      	str	r3, [r7, #32]
 8005316:	e022      	b.n	800535e <AES_CTR_xcrypt_buffer+0x88>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	21b0      	movs	r1, #176	; 0xb0
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	18d3      	adds	r3, r2, r3
 8005320:	185b      	adds	r3, r3, r1
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2bff      	cmp	r3, #255	; 0xff
 8005326:	d10a      	bne.n	800533e <AES_CTR_xcrypt_buffer+0x68>
	{
          ctx->Iv[bi] = 0;
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	21b0      	movs	r1, #176	; 0xb0
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	18d3      	adds	r3, r2, r3
 8005330:	185b      	adds	r3, r3, r1
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	3b01      	subs	r3, #1
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	e00f      	b.n	800535e <AES_CTR_xcrypt_buffer+0x88>
          continue;
        } 
        ctx->Iv[bi] += 1;
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	21b0      	movs	r1, #176	; 0xb0
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	18d3      	adds	r3, r2, r3
 8005346:	185b      	adds	r3, r3, r1
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	b2d8      	uxtb	r0, r3
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	21b0      	movs	r1, #176	; 0xb0
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	18d3      	adds	r3, r2, r3
 8005356:	185b      	adds	r3, r3, r1
 8005358:	1c02      	adds	r2, r0, #0
 800535a:	701a      	strb	r2, [r3, #0]
        break;   
 800535c:	e002      	b.n	8005364 <AES_CTR_xcrypt_buffer+0x8e>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dad9      	bge.n	8005318 <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	18d3      	adds	r3, r2, r3
 800536e:	7819      	ldrb	r1, [r3, #0]
 8005370:	2310      	movs	r3, #16
 8005372:	18fa      	adds	r2, r7, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	18d3      	adds	r3, r2, r3
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	68b8      	ldr	r0, [r7, #8]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	18c3      	adds	r3, r0, r3
 8005380:	404a      	eors	r2, r1
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	3301      	adds	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	3301      	adds	r3, #1
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d3a8      	bcc.n	80052ec <AES_CTR_xcrypt_buffer+0x16>
  }
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b00b      	add	sp, #44	; 0x2c
 80053a2:	bd90      	pop	{r4, r7, pc}

080053a4 <crc24>:

#define CRC24_INIT      0xFFFFFFUL
#define CRC24_POLY      0x5D6DCBUL
#define CRC24_XOR_OUT   0xFFFFFFUL

uint32_t crc24(unsigned char* octets, size_t len) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
    uint32_t crc = CRC24_INIT;
 80053ae:	4b17      	ldr	r3, [pc, #92]	; (800540c <crc24+0x68>)
 80053b0:	60fb      	str	r3, [r7, #12]
    int i;
    while (len--) {
 80053b2:	e01d      	b.n	80053f0 <crc24+0x4c>
        crc ^= (*octets++) << 16;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	001a      	movs	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4053      	eors	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	e00e      	b.n	80053ea <crc24+0x46>
            crc <<= 1;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
            if (crc & 0x1000000)
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	045b      	lsls	r3, r3, #17
 80053d8:	4013      	ands	r3, r2
 80053da:	d003      	beq.n	80053e4 <crc24+0x40>
                crc ^= CRC24_POLY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <crc24+0x6c>)
 80053e0:	4053      	eors	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < 8; i++) {
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b07      	cmp	r3, #7
 80053ee:	dded      	ble.n	80053cc <crc24+0x28>
    while (len--) {
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1e5a      	subs	r2, r3, #1
 80053f4:	603a      	str	r2, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1dc      	bne.n	80053b4 <crc24+0x10>
        }
    }
    return (crc & 0xFFFFFFL) ^ CRC24_XOR_OUT ;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	0a1b      	lsrs	r3, r3, #8
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b004      	add	sp, #16
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	00ffffff 	.word	0x00ffffff
 8005410:	005d6dcb 	.word	0x005d6dcb

08005414 <byties_to_bits>:

void init_polar() {

}

void byties_to_bits(uint8_t* in, int size, uint8_t* out) {
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
	uint16_t c = 0;
 8005420:	2316      	movs	r3, #22
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	801a      	strh	r2, [r3, #0]

	for (int16_t i=size - 1; i >= 0; i--) {
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	2314      	movs	r3, #20
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e036      	b.n	80054a6 <byties_to_bits+0x92>
	//for (int16_t i=0 ; i < size; i++) {
		for (int8_t bit = 7; bit >= 0; bit--) {
 8005438:	2313      	movs	r3, #19
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	2207      	movs	r2, #7
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e023      	b.n	800548a <byties_to_bits+0x76>
		//for (int8_t bit = 0; bit < 8; bit++) {
			out[c++] = (in[i] >> bit) & 1;
 8005442:	2314      	movs	r3, #20
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	2200      	movs	r2, #0
 8005448:	5e9b      	ldrsh	r3, [r3, r2]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	18d3      	adds	r3, r2, r3
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	001a      	movs	r2, r3
 8005452:	2413      	movs	r4, #19
 8005454:	193b      	adds	r3, r7, r4
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b25b      	sxtb	r3, r3
 800545a:	411a      	asrs	r2, r3
 800545c:	0013      	movs	r3, r2
 800545e:	b2da      	uxtb	r2, r3
 8005460:	2116      	movs	r1, #22
 8005462:	187b      	adds	r3, r7, r1
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	1879      	adds	r1, r7, r1
 8005468:	1c58      	adds	r0, r3, #1
 800546a:	8008      	strh	r0, [r1, #0]
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	185b      	adds	r3, r3, r1
 8005472:	2101      	movs	r1, #1
 8005474:	400a      	ands	r2, r1
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
		for (int8_t bit = 7; bit >= 0; bit--) {
 800547a:	193b      	adds	r3, r7, r4
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b25b      	sxtb	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	193b      	adds	r3, r7, r4
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	2313      	movs	r3, #19
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b7f      	cmp	r3, #127	; 0x7f
 8005492:	d9d6      	bls.n	8005442 <byties_to_bits+0x2e>
	for (int16_t i=size - 1; i >= 0; i--) {
 8005494:	2114      	movs	r1, #20
 8005496:	187b      	adds	r3, r7, r1
 8005498:	2200      	movs	r2, #0
 800549a:	5e9b      	ldrsh	r3, [r3, r2]
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	187b      	adds	r3, r7, r1
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	2314      	movs	r3, #20
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	5e9b      	ldrsh	r3, [r3, r2]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	dac2      	bge.n	8005438 <byties_to_bits+0x24>
		}
	}
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b007      	add	sp, #28
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <bits_to_byties>:

void bits_to_byties(uint8_t* in, int size, uint8_t* out) {
 80054bc:	b5b0      	push	{r4, r5, r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	uint16_t i=0;
 80054c8:	2316      	movs	r3, #22
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	2200      	movs	r2, #0
 80054ce:	801a      	strh	r2, [r3, #0]

	memset(out, 0, size/8);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da00      	bge.n	80054d8 <bits_to_byties+0x1c>
 80054d6:	3307      	adds	r3, #7
 80054d8:	10db      	asrs	r3, r3, #3
 80054da:	001a      	movs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2100      	movs	r1, #0
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 ff90 	bl	8006406 <memset>

	for (; i < size; i++) {
 80054e6:	e022      	b.n	800552e <bits_to_byties+0x72>
		out[i / 8] |= in[i] << (i % 8);
 80054e8:	2516      	movs	r5, #22
 80054ea:	197b      	adds	r3, r7, r5
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	08db      	lsrs	r3, r3, #3
 80054f0:	b298      	uxth	r0, r3
 80054f2:	0002      	movs	r2, r0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b25a      	sxtb	r2, r3
 80054fc:	197b      	adds	r3, r7, r5
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	18cb      	adds	r3, r1, r3
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	001c      	movs	r4, r3
 8005508:	197b      	adds	r3, r7, r5
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	2107      	movs	r1, #7
 800550e:	400b      	ands	r3, r1
 8005510:	409c      	lsls	r4, r3
 8005512:	0023      	movs	r3, r4
 8005514:	b25b      	sxtb	r3, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	b25a      	sxtb	r2, r3
 800551a:	0001      	movs	r1, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	185b      	adds	r3, r3, r1
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
	for (; i < size; i++) {
 8005524:	197b      	adds	r3, r7, r5
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	197b      	adds	r3, r7, r5
 800552a:	3201      	adds	r2, #1
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	2316      	movs	r3, #22
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	dcd6      	bgt.n	80054e8 <bits_to_byties+0x2c>
	}
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b006      	add	sp, #24
 8005542:	bdb0      	pop	{r4, r5, r7, pc}

08005544 <encode96>:

#ifdef USE96

void encode96(uint8_t* in, uint8_t* out) {
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b0f1      	sub	sp, #452	; 0x1c4
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	uint8_t data_bits[96 + 10 + short_96];
	memset(data_bits, 0, sizeof(data_bits));
 800554e:	2486      	movs	r4, #134	; 0x86
 8005550:	0064      	lsls	r4, r4, #1
 8005552:	193b      	adds	r3, r7, r4
 8005554:	22aa      	movs	r2, #170	; 0xaa
 8005556:	2100      	movs	r1, #0
 8005558:	0018      	movs	r0, r3
 800555a:	f000 ff54 	bl	8006406 <memset>

	uint8_t out_bits[256];


	byties_to_bits(in, 12, data_bits);
 800555e:	193a      	adds	r2, r7, r4
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	210c      	movs	r1, #12
 8005564:	0018      	movs	r0, r3
 8005566:	f7ff ff55 	bl	8005414 <byties_to_bits>
	add_crc(0x327, data_bits, 96);
 800556a:	193b      	adds	r3, r7, r4
 800556c:	480d      	ldr	r0, [pc, #52]	; (80055a4 <encode96+0x60>)
 800556e:	2260      	movs	r2, #96	; 0x60
 8005570:	0019      	movs	r1, r3
 8005572:	f000 fa10 	bl	8005996 <add_crc>

	stdpolar_encode_systematic_noperm(data_bits, 106, frozen_indicator_96, sizeof(frozen_indicator_96), out_bits);
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	0059      	lsls	r1, r3, #1
 800557a:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <encode96+0x64>)
 800557c:	1938      	adds	r0, r7, r4
 800557e:	240c      	movs	r4, #12
 8005580:	193b      	adds	r3, r7, r4
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	000b      	movs	r3, r1
 8005586:	216a      	movs	r1, #106	; 0x6a
 8005588:	f000 f842 	bl	8005610 <stdpolar_encode_systematic_noperm>

	bits_to_byties(out_bits, 256, out);
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	0059      	lsls	r1, r3, #1
 8005592:	193b      	adds	r3, r7, r4
 8005594:	0018      	movs	r0, r3
 8005596:	f7ff ff91 	bl	80054bc <bits_to_byties>
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b06f      	add	sp, #444	; 0x1bc
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	00000327 	.word	0x00000327
 80055a8:	080079f8 	.word	0x080079f8

080055ac <encode64>:

#endif

//#ifdef USE64
void encode64(uint8_t* in, uint8_t* out) {
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b0b9      	sub	sp, #228	; 0xe4
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	uint8_t data_bits[64 + 10];
	uint8_t out_bits[128];

	byties_to_bits(in, 8, data_bits);
 80055b6:	2488      	movs	r4, #136	; 0x88
 80055b8:	193a      	adds	r2, r7, r4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2108      	movs	r1, #8
 80055be:	0018      	movs	r0, r3
 80055c0:	f7ff ff28 	bl	8005414 <byties_to_bits>
	add_crc(0x327, data_bits, 64);
 80055c4:	193b      	adds	r3, r7, r4
 80055c6:	4810      	ldr	r0, [pc, #64]	; (8005608 <encode64+0x5c>)
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	0019      	movs	r1, r3
 80055cc:	f000 f9e3 	bl	8005996 <add_crc>

	stdpolar_encode_systematic_noperm(data_bits, 74, frozen_indicator_64, sizeof(frozen_indicator_64), out_bits);
 80055d0:	4a0e      	ldr	r2, [pc, #56]	; (800560c <encode64+0x60>)
 80055d2:	1938      	adds	r0, r7, r4
 80055d4:	2408      	movs	r4, #8
 80055d6:	193b      	adds	r3, r7, r4
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	214a      	movs	r1, #74	; 0x4a
 80055de:	f000 f817 	bl	8005610 <stdpolar_encode_systematic_noperm>

	bits_to_byties(out_bits, 128, out);
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	193b      	adds	r3, r7, r4
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff ff67 	bl	80054bc <bits_to_byties>
	int a = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	22d4      	movs	r2, #212	; 0xd4
 80055f2:	18b9      	adds	r1, r7, r2
 80055f4:	600b      	str	r3, [r1, #0]
	a++;
 80055f6:	18bb      	adds	r3, r7, r2
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	18ba      	adds	r2, r7, r2
 80055fe:	6013      	str	r3, [r2, #0]
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b037      	add	sp, #220	; 0xdc
 8005606:	bd90      	pop	{r4, r7, pc}
 8005608:	00000327 	.word	0x00000327
 800560c:	08007978 	.word	0x08007978

08005610 <stdpolar_encode_systematic_noperm>:

//#endif

void stdpolar_encode_systematic_noperm(uint8_t* _iwd, uint16_t _iwd_size, const uint8_t* _frozen_indicator, uint16_t _frozen_indicator_size, uint8_t* ret) {
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	4c5e      	ldr	r4, [pc, #376]	; (800578c <stdpolar_encode_systematic_noperm+0x17c>)
 8005614:	44a5      	add	sp, r4
 8005616:	af04      	add	r7, sp, #16
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	0008      	movs	r0, r1
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	0019      	movs	r1, r3
 8005620:	4b5b      	ldr	r3, [pc, #364]	; (8005790 <stdpolar_encode_systematic_noperm+0x180>)
 8005622:	22c8      	movs	r2, #200	; 0xc8
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	4694      	mov	ip, r2
 8005628:	44bc      	add	ip, r7
 800562a:	4463      	add	r3, ip
 800562c:	1c02      	adds	r2, r0, #0
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	4b58      	ldr	r3, [pc, #352]	; (8005794 <stdpolar_encode_systematic_noperm+0x184>)
 8005632:	22c8      	movs	r2, #200	; 0xc8
 8005634:	0092      	lsls	r2, r2, #2
 8005636:	4694      	mov	ip, r2
 8005638:	44bc      	add	ip, r7
 800563a:	4463      	add	r3, ip
 800563c:	1c0a      	adds	r2, r1, #0
 800563e:	801a      	strh	r2, [r3, #0]

    int n_polar = _frozen_indicator_size;
 8005640:	4b54      	ldr	r3, [pc, #336]	; (8005794 <stdpolar_encode_systematic_noperm+0x184>)
 8005642:	22c8      	movs	r2, #200	; 0xc8
 8005644:	0092      	lsls	r2, r2, #2
 8005646:	4694      	mov	ip, r2
 8005648:	44bc      	add	ip, r7
 800564a:	4463      	add	r3, ip
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	22c6      	movs	r2, #198	; 0xc6
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	18ba      	adds	r2, r7, r2
 8005654:	6013      	str	r3, [r2, #0]
    uint8_t* iwd_s = ret;
 8005656:	23cc      	movs	r3, #204	; 0xcc
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	22c5      	movs	r2, #197	; 0xc5
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	18ba      	adds	r2, r7, r2
 8005664:	6013      	str	r3, [r2, #0]
    //uint16_t* inf_idx = (uint16_t*)malloc(n_polar * sizeof(uint16_t));//[256];// = (uint16_t*) malloc (sizeof(uint16_t) * 256);

	uint16_t inf_idx[256] = {0};
 8005666:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <stdpolar_encode_systematic_noperm+0x188>)
 8005668:	22c8      	movs	r2, #200	; 0xc8
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	4694      	mov	ip, r2
 800566e:	44bc      	add	ip, r7
 8005670:	4463      	add	r3, ip
 8005672:	0018      	movs	r0, r3
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	001a      	movs	r2, r3
 800567a:	2100      	movs	r1, #0
 800567c:	f000 fec3 	bl	8006406 <memset>
    uint8_t u[256] = {0};// = (uint8_t*) malloc (sizeof(uint8_t) * n_polar);
 8005680:	4b46      	ldr	r3, [pc, #280]	; (800579c <stdpolar_encode_systematic_noperm+0x18c>)
 8005682:	22c8      	movs	r2, #200	; 0xc8
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	4694      	mov	ip, r2
 8005688:	44bc      	add	ip, r7
 800568a:	4463      	add	r3, ip
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	3304      	adds	r3, #4
 8005692:	22fc      	movs	r2, #252	; 0xfc
 8005694:	2100      	movs	r1, #0
 8005696:	0018      	movs	r0, r3
 8005698:	f000 feb5 	bl	8006406 <memset>


    uint16_t i = 0, j = 0;
 800569c:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <stdpolar_encode_systematic_noperm+0x190>)
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2200      	movs	r2, #0
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	23c7      	movs	r3, #199	; 0xc7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2200      	movs	r2, #0
 80056ac:	801a      	strh	r2, [r3, #0]
    for (; i < n_polar; i++) {
 80056ae:	e044      	b.n	800573a <stdpolar_encode_systematic_noperm+0x12a>
        if (_frozen_indicator[i] == 1) {
 80056b0:	4c3b      	ldr	r4, [pc, #236]	; (80057a0 <stdpolar_encode_systematic_noperm+0x190>)
 80056b2:	193b      	adds	r3, r7, r4
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	18d3      	adds	r3, r2, r3
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d122      	bne.n	8005706 <stdpolar_encode_systematic_noperm+0xf6>
            iwd_s[i] = _iwd[j];
 80056c0:	20c7      	movs	r0, #199	; 0xc7
 80056c2:	0080      	lsls	r0, r0, #2
 80056c4:	183b      	adds	r3, r7, r0
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	18d2      	adds	r2, r2, r3
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	21c5      	movs	r1, #197	; 0xc5
 80056d2:	0089      	lsls	r1, r1, #2
 80056d4:	1879      	adds	r1, r7, r1
 80056d6:	6809      	ldr	r1, [r1, #0]
 80056d8:	18cb      	adds	r3, r1, r3
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	701a      	strb	r2, [r3, #0]
            inf_idx[j] = i + 1;
 80056de:	183b      	adds	r3, r7, r0
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	193b      	adds	r3, r7, r4
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	b299      	uxth	r1, r3
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <stdpolar_encode_systematic_noperm+0x188>)
 80056ec:	24c8      	movs	r4, #200	; 0xc8
 80056ee:	00a4      	lsls	r4, r4, #2
 80056f0:	46a4      	mov	ip, r4
 80056f2:	44bc      	add	ip, r7
 80056f4:	4463      	add	r3, ip
 80056f6:	0052      	lsls	r2, r2, #1
 80056f8:	52d1      	strh	r1, [r2, r3]
            j++;
 80056fa:	183b      	adds	r3, r7, r0
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	183b      	adds	r3, r7, r0
 8005700:	3201      	adds	r2, #1
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	e009      	b.n	800571a <stdpolar_encode_systematic_noperm+0x10a>
        }

        else {
            iwd_s[i] = 0;
 8005706:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <stdpolar_encode_systematic_noperm+0x190>)
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	22c5      	movs	r2, #197	; 0xc5
 800570e:	0092      	lsls	r2, r2, #2
 8005710:	18ba      	adds	r2, r7, r2
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	18d3      	adds	r3, r2, r3
 8005716:	2200      	movs	r2, #0
 8005718:	701a      	strb	r2, [r3, #0]
        }
        u[i] = 0;
 800571a:	4821      	ldr	r0, [pc, #132]	; (80057a0 <stdpolar_encode_systematic_noperm+0x190>)
 800571c:	183b      	adds	r3, r7, r0
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	4a1e      	ldr	r2, [pc, #120]	; (800579c <stdpolar_encode_systematic_noperm+0x18c>)
 8005722:	21c8      	movs	r1, #200	; 0xc8
 8005724:	0089      	lsls	r1, r1, #2
 8005726:	468c      	mov	ip, r1
 8005728:	44bc      	add	ip, r7
 800572a:	4462      	add	r2, ip
 800572c:	2100      	movs	r1, #0
 800572e:	54d1      	strb	r1, [r2, r3]
    for (; i < n_polar; i++) {
 8005730:	183b      	adds	r3, r7, r0
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	183b      	adds	r3, r7, r0
 8005736:	3201      	adds	r2, #1
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <stdpolar_encode_systematic_noperm+0x190>)
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	25c6      	movs	r5, #198	; 0xc6
 8005742:	00ad      	lsls	r5, r5, #2
 8005744:	197a      	adds	r2, r7, r5
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	dcb1      	bgt.n	80056b0 <stdpolar_encode_systematic_noperm+0xa0>
    }

    solve_recursively(inf_idx, j, u, n_polar, iwd_s, n_polar, n_polar);
 800574c:	197b      	adds	r3, r7, r5
 800574e:	681c      	ldr	r4, [r3, #0]
 8005750:	2314      	movs	r3, #20
 8005752:	18fa      	adds	r2, r7, r3
 8005754:	23c7      	movs	r3, #199	; 0xc7
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	8819      	ldrh	r1, [r3, #0]
 800575c:	238a      	movs	r3, #138	; 0x8a
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	18f8      	adds	r0, r7, r3
 8005762:	197b      	adds	r3, r7, r5
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	9302      	str	r3, [sp, #8]
 8005768:	197b      	adds	r3, r7, r5
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	23c5      	movs	r3, #197	; 0xc5
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	0023      	movs	r3, r4
 800577a:	f000 f813 	bl	80057a4 <solve_recursively>
		//free(inf_idx);
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	23c8      	movs	r3, #200	; 0xc8
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	449d      	add	sp, r3
 8005788:	bdb0      	pop	{r4, r5, r7, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	fffffcd0 	.word	0xfffffcd0
 8005790:	fffffcea 	.word	0xfffffcea
 8005794:	fffffce8 	.word	0xfffffce8
 8005798:	fffffdf4 	.word	0xfffffdf4
 800579c:	fffffcf4 	.word	0xfffffcf4
 80057a0:	0000031e 	.word	0x0000031e

080057a4 <solve_recursively>:


void solve_recursively(uint16_t* _inf_idx, uint16_t _inf_idx_size, uint8_t* _u, int uSize, uint8_t* _x, int xSize, int last) {
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a6:	b0af      	sub	sp, #188	; 0xbc
 80057a8:	af04      	add	r7, sp, #16
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	230a      	movs	r3, #10
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	1c0a      	adds	r2, r1, #0
 80057b6:	801a      	strh	r2, [r3, #0]
    int n = xSize;
 80057b8:	23c4      	movs	r3, #196	; 0xc4
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2294      	movs	r2, #148	; 0x94
 80057c0:	18b9      	adds	r1, r7, r2
 80057c2:	600b      	str	r3, [r1, #0]

    if (n == 1) {
 80057c4:	18bb      	adds	r3, r7, r2
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d13f      	bne.n	800584c <solve_recursively+0xa8>
        uint8_t f = 0;
 80057cc:	23a7      	movs	r3, #167	; 0xa7
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < _inf_idx_size && !f; i++) {
 80057d4:	2300      	movs	r3, #0
 80057d6:	22a0      	movs	r2, #160	; 0xa0
 80057d8:	18ba      	adds	r2, r7, r2
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e016      	b.n	800580c <solve_recursively+0x68>
            if (_inf_idx[i] == last) {
 80057de:	23a0      	movs	r3, #160	; 0xa0
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	18d3      	adds	r3, r2, r3
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	001a      	movs	r2, r3
 80057ee:	23c8      	movs	r3, #200	; 0xc8
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d103      	bne.n	8005800 <solve_recursively+0x5c>
                f = 1;
 80057f8:	23a7      	movs	r3, #167	; 0xa7
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < _inf_idx_size && !f; i++) {
 8005800:	22a0      	movs	r2, #160	; 0xa0
 8005802:	18bb      	adds	r3, r7, r2
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3301      	adds	r3, #1
 8005808:	18ba      	adds	r2, r7, r2
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	230a      	movs	r3, #10
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	22a0      	movs	r2, #160	; 0xa0
 8005814:	18ba      	adds	r2, r7, r2
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	da04      	bge.n	8005826 <solve_recursively+0x82>
 800581c:	23a7      	movs	r3, #167	; 0xa7
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0db      	beq.n	80057de <solve_recursively+0x3a>
            }
        }

        if (f) {
 8005826:	23a7      	movs	r3, #167	; 0xa7
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <solve_recursively+0x9a>
            *_u = *_x;
 8005830:	23c0      	movs	r3, #192	; 0xc0
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	701a      	strb	r2, [r3, #0]
        }

        //free(x_first);

    }
}
 800583c:	e0a7      	b.n	800598e <solve_recursively+0x1ea>
            *_x = *_u;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	23c0      	movs	r3, #192	; 0xc0
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	701a      	strb	r2, [r3, #0]
}
 800584a:	e0a0      	b.n	800598e <solve_recursively+0x1ea>
        int n0 = n / 2;
 800584c:	2394      	movs	r3, #148	; 0x94
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	da00      	bge.n	8005858 <solve_recursively+0xb4>
 8005856:	3301      	adds	r3, #1
 8005858:	105b      	asrs	r3, r3, #1
 800585a:	2090      	movs	r0, #144	; 0x90
 800585c:	183a      	adds	r2, r7, r0
 800585e:	6013      	str	r3, [r2, #0]
        solve_recursively(_inf_idx, _inf_idx_size, _u + n0, uSize - n0, _x + n0, xSize - n0, last);
 8005860:	183b      	adds	r3, r7, r0
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	18d5      	adds	r5, r2, r3
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	183b      	adds	r3, r7, r0
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	1ad6      	subs	r6, r2, r3
 8005870:	183b      	adds	r3, r7, r0
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	22c0      	movs	r2, #192	; 0xc0
 8005876:	18ba      	adds	r2, r7, r2
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	18d3      	adds	r3, r2, r3
 800587c:	22c4      	movs	r2, #196	; 0xc4
 800587e:	18ba      	adds	r2, r7, r2
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	183a      	adds	r2, r7, r0
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	1a8a      	subs	r2, r1, r2
 8005888:	210a      	movs	r1, #10
 800588a:	1879      	adds	r1, r7, r1
 800588c:	880c      	ldrh	r4, [r1, #0]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	21c8      	movs	r1, #200	; 0xc8
 8005892:	1879      	adds	r1, r7, r1
 8005894:	6809      	ldr	r1, [r1, #0]
 8005896:	9102      	str	r1, [sp, #8]
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	0033      	movs	r3, r6
 800589e:	002a      	movs	r2, r5
 80058a0:	0021      	movs	r1, r4
 80058a2:	f7ff ff7f 	bl	80057a4 <solve_recursively>
        for (int i = 0; i < n0; i++) {
 80058a6:	2300      	movs	r3, #0
 80058a8:	229c      	movs	r2, #156	; 0x9c
 80058aa:	18ba      	adds	r2, r7, r2
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e020      	b.n	80058f2 <solve_recursively+0x14e>
            x_first[i] = _x[i] ^ _x[i + n0];
 80058b0:	209c      	movs	r0, #156	; 0x9c
 80058b2:	183b      	adds	r3, r7, r0
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	24c0      	movs	r4, #192	; 0xc0
 80058b8:	193a      	adds	r2, r7, r4
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	18d3      	adds	r3, r2, r3
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	183b      	adds	r3, r7, r0
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	2390      	movs	r3, #144	; 0x90
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	18cb      	adds	r3, r1, r3
 80058cc:	0019      	movs	r1, r3
 80058ce:	193b      	adds	r3, r7, r4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	185b      	adds	r3, r3, r1
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4053      	eors	r3, r2
 80058d8:	b2d9      	uxtb	r1, r3
 80058da:	2310      	movs	r3, #16
 80058dc:	18fa      	adds	r2, r7, r3
 80058de:	183b      	adds	r3, r7, r0
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	1c0a      	adds	r2, r1, #0
 80058e6:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < n0; i++) {
 80058e8:	183b      	adds	r3, r7, r0
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	183a      	adds	r2, r7, r0
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	239c      	movs	r3, #156	; 0x9c
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2190      	movs	r1, #144	; 0x90
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	dbd6      	blt.n	80058b0 <solve_recursively+0x10c>
        solve_recursively(_inf_idx, _inf_idx_size, _u, n0, x_first, n0, last - n0);
 8005902:	23c8      	movs	r3, #200	; 0xc8
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	187b      	adds	r3, r7, r1
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	000e      	movs	r6, r1
 8005910:	187a      	adds	r2, r7, r1
 8005912:	6815      	ldr	r5, [r2, #0]
 8005914:	687c      	ldr	r4, [r7, #4]
 8005916:	220a      	movs	r2, #10
 8005918:	18ba      	adds	r2, r7, r2
 800591a:	8811      	ldrh	r1, [r2, #0]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	19bb      	adds	r3, r7, r6
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	2310      	movs	r3, #16
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	002b      	movs	r3, r5
 800592e:	0022      	movs	r2, r4
 8005930:	f7ff ff38 	bl	80057a4 <solve_recursively>
        for (int i = 0; i < n0; i++) {
 8005934:	2300      	movs	r3, #0
 8005936:	2298      	movs	r2, #152	; 0x98
 8005938:	18ba      	adds	r2, r7, r2
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e01f      	b.n	800597e <solve_recursively+0x1da>
            _x[i] = _x[n0 + i] ^ x_first[i];
 800593e:	2390      	movs	r3, #144	; 0x90
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	2498      	movs	r4, #152	; 0x98
 8005946:	193b      	adds	r3, r7, r4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	18d3      	adds	r3, r2, r3
 800594c:	001a      	movs	r2, r3
 800594e:	20c0      	movs	r0, #192	; 0xc0
 8005950:	183b      	adds	r3, r7, r0
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	189b      	adds	r3, r3, r2
 8005956:	7819      	ldrb	r1, [r3, #0]
 8005958:	2310      	movs	r3, #16
 800595a:	18fa      	adds	r2, r7, r3
 800595c:	193b      	adds	r3, r7, r4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	18d3      	adds	r3, r2, r3
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	193b      	adds	r3, r7, r4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	1838      	adds	r0, r7, r0
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	18c3      	adds	r3, r0, r3
 800596e:	404a      	eors	r2, r1
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < n0; i++) {
 8005974:	193b      	adds	r3, r7, r4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	193a      	adds	r2, r7, r4
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	2398      	movs	r3, #152	; 0x98
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	2390      	movs	r3, #144	; 0x90
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	dbd7      	blt.n	800593e <solve_recursively+0x19a>
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b02b      	add	sp, #172	; 0xac
 8005994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005996 <add_crc>:


void add_crc(uint32_t polynom, uint8_t* a, uint16_t size) {
 8005996:	b580      	push	{r7, lr}
 8005998:	b088      	sub	sp, #32
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	1dbb      	adds	r3, r7, #6
 80059a2:	801a      	strh	r2, [r3, #0]
    uint32_t reg = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < size; i++) {
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e017      	b.n	80059de <add_crc+0x48>
        reg ^= a[i];
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	18d3      	adds	r3, r2, r3
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	001a      	movs	r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4053      	eors	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]
        if (reg & 1) reg = (reg >> 1) ^ polynom;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	d005      	beq.n	80059d2 <add_crc+0x3c>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4053      	eors	r3, r2
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e002      	b.n	80059d8 <add_crc+0x42>
        else reg >>= 1;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < size; i++) {
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	3301      	adds	r3, #1
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	1dbb      	adds	r3, r7, #6
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	dbe2      	blt.n	80059ae <add_crc+0x18>
    }
    reg = reg & 0x3FF;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	059b      	lsls	r3, r3, #22
 80059ec:	0d9b      	lsrs	r3, r3, #22
 80059ee:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < 10; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e012      	b.n	8005a1c <add_crc+0x86>
        a[size + i] = (reg >> i) & 1;
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	40da      	lsrs	r2, r3
 80059fc:	0013      	movs	r3, r2
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	1dbb      	adds	r3, r7, #6
 8005a02:	8819      	ldrh	r1, [r3, #0]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	18cb      	adds	r3, r1, r3
 8005a08:	0019      	movs	r1, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	185b      	adds	r3, r3, r1
 8005a0e:	2101      	movs	r1, #1
 8005a10:	400a      	ands	r2, r1
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	dde9      	ble.n	80059f6 <add_crc+0x60>
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b008      	add	sp, #32
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a2c:	4813      	ldr	r0, [pc, #76]	; (8005a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a2e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8005a30:	4813      	ldr	r0, [pc, #76]	; (8005a80 <LoopForever+0x6>)
    LDR R1, [R0]
 8005a32:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8005a34:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <LoopForever+0xa>)
    CMP R1, R2
 8005a38:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8005a3a:	d105      	bne.n	8005a48 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8005a3c:	4812      	ldr	r0, [pc, #72]	; (8005a88 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8005a3e:	4913      	ldr	r1, [pc, #76]	; (8005a8c <LoopForever+0x12>)
    STR R1, [R0]
 8005a40:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8005a42:	4813      	ldr	r0, [pc, #76]	; (8005a90 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8005a44:	4913      	ldr	r1, [pc, #76]	; (8005a94 <LoopForever+0x1a>)
    STR R1, [R0]
 8005a46:	6001      	str	r1, [r0, #0]

08005a48 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a48:	4813      	ldr	r0, [pc, #76]	; (8005a98 <LoopForever+0x1e>)
  ldr r1, =_edata
 8005a4a:	4914      	ldr	r1, [pc, #80]	; (8005a9c <LoopForever+0x22>)
  ldr r2, =_sidata
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <LoopForever+0x26>)
  movs r3, #0
 8005a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a50:	e002      	b.n	8005a58 <LoopCopyDataInit>

08005a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a56:	3304      	adds	r3, #4

08005a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a5c:	d3f9      	bcc.n	8005a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a5e:	4a11      	ldr	r2, [pc, #68]	; (8005aa4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8005a60:	4c11      	ldr	r4, [pc, #68]	; (8005aa8 <LoopForever+0x2e>)
  movs r3, #0
 8005a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a64:	e001      	b.n	8005a6a <LoopFillZerobss>

08005a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a68:	3204      	adds	r2, #4

08005a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a6c:	d3fb      	bcc.n	8005a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005a6e:	f7fe f967 	bl	8003d40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005a72:	f000 fc9b 	bl	80063ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a76:	f7fc fae7 	bl	8002048 <main>

08005a7a <LoopForever>:

LoopForever:
    b LoopForever
 8005a7a:	e7fe      	b.n	8005a7a <LoopForever>
  ldr   r0, =_estack
 8005a7c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8005a80:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8005a84:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8005a88:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8005a8c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8005a90:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8005a94:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8005a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005aa0:	08007c54 	.word	0x08007c54
  ldr r2, =_sbss
 8005aa4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005aa8:	20000404 	.word	0x20000404

08005aac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005aac:	e7fe      	b.n	8005aac <ADC1_IRQHandler>

08005aae <LL_GPIO_SetPinMode>:
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	435b      	muls	r3, r3
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	0013      	movs	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	43db      	mvns	r3, r3
 8005acc:	400b      	ands	r3, r1
 8005ace:	001a      	movs	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	435b      	muls	r3, r3
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	434b      	muls	r3, r1
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	601a      	str	r2, [r3, #0]
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b004      	add	sp, #16
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <LL_GPIO_SetPinOutputType>:
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	43d2      	mvns	r2, r2
 8005afa:	401a      	ands	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	434b      	muls	r3, r1
 8005b02:	431a      	orrs	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	605a      	str	r2, [r3, #4]
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <LL_GPIO_SetPinSpeed>:
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	435b      	muls	r3, r3
 8005b24:	001a      	movs	r2, r3
 8005b26:	0013      	movs	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	400b      	ands	r3, r1
 8005b30:	001a      	movs	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	435b      	muls	r3, r3
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	434b      	muls	r3, r1
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b004      	add	sp, #16
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <LL_GPIO_SetPinPull>:
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68d9      	ldr	r1, [r3, #12]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	435b      	muls	r3, r3
 8005b5c:	001a      	movs	r2, r3
 8005b5e:	0013      	movs	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	43db      	mvns	r3, r3
 8005b66:	400b      	ands	r3, r1
 8005b68:	001a      	movs	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	435b      	muls	r3, r3
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	434b      	muls	r3, r1
 8005b72:	431a      	orrs	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	60da      	str	r2, [r3, #12]
}
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b004      	add	sp, #16
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <LL_GPIO_SetAFPin_0_7>:
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a19      	ldr	r1, [r3, #32]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	435b      	muls	r3, r3
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	4353      	muls	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	435a      	muls	r2, r3
 8005b9c:	0013      	movs	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	435b      	muls	r3, r3
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	434b      	muls	r3, r1
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	434b      	muls	r3, r1
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	434b      	muls	r3, r1
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b004      	add	sp, #16
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <LL_GPIO_SetAFPin_8_15>:
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0a12      	lsrs	r2, r2, #8
 8005bde:	4353      	muls	r3, r2
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	0a12      	lsrs	r2, r2, #8
 8005be4:	4353      	muls	r3, r2
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	0a12      	lsrs	r2, r2, #8
 8005bea:	435a      	muls	r2, r3
 8005bec:	0013      	movs	r3, r2
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	400b      	ands	r3, r1
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	0a09      	lsrs	r1, r1, #8
 8005c00:	434b      	muls	r3, r1
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	0a09      	lsrs	r1, r1, #8
 8005c06:	434b      	muls	r3, r1
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	0a09      	lsrs	r1, r1, #8
 8005c0c:	434b      	muls	r3, r1
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	434b      	muls	r3, r1
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b004      	add	sp, #16
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005c2e:	e048      	b.n	8005cc2 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2101      	movs	r1, #1
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4091      	lsls	r1, r2
 8005c3a:	000a      	movs	r2, r1
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d03a      	beq.n	8005cbc <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d003      	beq.n	8005c56 <LL_GPIO_Init+0x36>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d10e      	bne.n	8005c74 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f7ff ff56 	bl	8005b10 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6819      	ldr	r1, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7ff ff39 	bl	8005ae6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff ff63 	bl	8005b48 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d111      	bne.n	8005cae <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2bff      	cmp	r3, #255	; 0xff
 8005c8e:	d807      	bhi.n	8005ca0 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7ff ff71 	bl	8005b80 <LL_GPIO_SetAFPin_0_7>
 8005c9e:	e006      	b.n	8005cae <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff ff8c 	bl	8005bc6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7ff fef9 	bl	8005aae <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	40da      	lsrs	r2, r3
 8005cca:	1e13      	subs	r3, r2, #0
 8005ccc:	d1b0      	bne.n	8005c30 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b004      	add	sp, #16
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <LL_RCC_HSI_IsReady>:
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <LL_RCC_HSI_IsReady+0x1c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	3b02      	subs	r3, #2
 8005ce6:	425a      	negs	r2, r3
 8005ce8:	4153      	adcs	r3, r2
 8005cea:	b2db      	uxtb	r3, r3
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	40021000 	.word	0x40021000

08005cf8 <LL_RCC_LSE_IsReady>:
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <LL_RCC_LSE_IsReady+0x1c>)
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	2202      	movs	r2, #2
 8005d02:	4013      	ands	r3, r2
 8005d04:	3b02      	subs	r3, #2
 8005d06:	425a      	negs	r2, r3
 8005d08:	4153      	adcs	r3, r2
 8005d0a:	b2db      	uxtb	r3, r3
}
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	40021000 	.word	0x40021000

08005d18 <LL_RCC_GetSysClkSource>:
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <LL_RCC_GetSysClkSource+0x14>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	220c      	movs	r2, #12
 8005d22:	4013      	ands	r3, r2
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	40021000 	.word	0x40021000

08005d30 <LL_RCC_GetAHBPrescaler>:
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <LL_RCC_GetAHBPrescaler+0x14>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	22f0      	movs	r2, #240	; 0xf0
 8005d3a:	4013      	ands	r3, r2
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	40021000 	.word	0x40021000

08005d48 <LL_RCC_GetAPB1Prescaler>:
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	23e0      	movs	r3, #224	; 0xe0
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4013      	ands	r3, r2
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40021000 	.word	0x40021000

08005d60 <LL_RCC_GetUSARTClockSource>:
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <LL_RCC_GetUSARTClockSource+0x24>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	2103      	movs	r1, #3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4091      	lsls	r1, r2
 8005d72:	000a      	movs	r2, r1
 8005d74:	401a      	ands	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	4313      	orrs	r3, r2
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b002      	add	sp, #8
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000

08005d88 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <LL_RCC_PLL_GetMainSource+0x14>)
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	23c0      	movs	r3, #192	; 0xc0
 8005d92:	025b      	lsls	r3, r3, #9
 8005d94:	4013      	ands	r3, r2
}
 8005d96:	0018      	movs	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40021000 	.word	0x40021000

08005da0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	23f0      	movs	r3, #240	; 0xf0
 8005daa:	039b      	lsls	r3, r3, #14
 8005dac:	4013      	ands	r3, r2
}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40021000 	.word	0x40021000

08005db8 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <LL_RCC_PLL_GetPrediv+0x14>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	220f      	movs	r2, #15
 8005dc2:	4013      	ands	r3, r2
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	40021000 	.word	0x40021000

08005dd0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005dd8:	f000 f85c 	bl	8005e94 <RCC_GetSystemClockFreq>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	0018      	movs	r0, r3
 8005de8:	f000 f884 	bl	8005ef4 <RCC_GetHCLKClockFreq>
 8005dec:	0002      	movs	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	0018      	movs	r0, r3
 8005df8:	f000 f892 	bl	8005f20 <RCC_GetPCLK1ClockFreq>
 8005dfc:	0002      	movs	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	609a      	str	r2, [r3, #8]
}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d12d      	bne.n	8005e7a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7ff ff9d 	bl	8005d60 <LL_RCC_GetUSARTClockSource>
 8005e26:	0003      	movs	r3, r0
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d00a      	beq.n	8005e42 <LL_RCC_GetUSARTClockFreq+0x36>
 8005e2c:	d818      	bhi.n	8005e60 <LL_RCC_GetUSARTClockFreq+0x54>
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d002      	beq.n	8005e38 <LL_RCC_GetUSARTClockFreq+0x2c>
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d00c      	beq.n	8005e50 <LL_RCC_GetUSARTClockFreq+0x44>
 8005e36:	e013      	b.n	8005e60 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005e38:	f000 f82c 	bl	8005e94 <RCC_GetSystemClockFreq>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	60fb      	str	r3, [r7, #12]
        break;
 8005e40:	e020      	b.n	8005e84 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005e42:	f7ff ff49 	bl	8005cd8 <LL_RCC_HSI_IsReady>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d019      	beq.n	8005e7e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <LL_RCC_GetUSARTClockFreq+0x84>)
 8005e4c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005e4e:	e016      	b.n	8005e7e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005e50:	f7ff ff52 	bl	8005cf8 <LL_RCC_LSE_IsReady>
 8005e54:	1e03      	subs	r3, r0, #0
 8005e56:	d014      	beq.n	8005e82 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005e5e:	e010      	b.n	8005e82 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005e60:	f000 f818 	bl	8005e94 <RCC_GetSystemClockFreq>
 8005e64:	0003      	movs	r3, r0
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 f844 	bl	8005ef4 <RCC_GetHCLKClockFreq>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 f856 	bl	8005f20 <RCC_GetPCLK1ClockFreq>
 8005e74:	0003      	movs	r3, r0
 8005e76:	60fb      	str	r3, [r7, #12]
        break;
 8005e78:	e004      	b.n	8005e84 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	e002      	b.n	8005e84 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	e000      	b.n	8005e84 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8005e82:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8005e84:	68fb      	ldr	r3, [r7, #12]
}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	007a1200 	.word	0x007a1200

08005e94 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005e9e:	f7ff ff3b 	bl	8005d18 <LL_RCC_GetSysClkSource>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d013      	beq.n	8005ed0 <RCC_GetSystemClockFreq+0x3c>
 8005ea8:	d815      	bhi.n	8005ed6 <RCC_GetSystemClockFreq+0x42>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d00b      	beq.n	8005ec6 <RCC_GetSystemClockFreq+0x32>
 8005eae:	d812      	bhi.n	8005ed6 <RCC_GetSystemClockFreq+0x42>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <RCC_GetSystemClockFreq+0x26>
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d003      	beq.n	8005ec0 <RCC_GetSystemClockFreq+0x2c>
 8005eb8:	e00d      	b.n	8005ed6 <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <RCC_GetSystemClockFreq+0x54>)
 8005ebc:	607b      	str	r3, [r7, #4]
      break;
 8005ebe:	e00d      	b.n	8005edc <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <RCC_GetSystemClockFreq+0x58>)
 8005ec2:	607b      	str	r3, [r7, #4]
      break;
 8005ec4:	e00a      	b.n	8005edc <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005ec6:	f000 f83f 	bl	8005f48 <RCC_PLL_GetFreqDomain_SYS>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	607b      	str	r3, [r7, #4]
      break;
 8005ece:	e005      	b.n	8005edc <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <RCC_GetSystemClockFreq+0x5c>)
 8005ed2:	607b      	str	r3, [r7, #4]
      break;
 8005ed4:	e002      	b.n	8005edc <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <RCC_GetSystemClockFreq+0x54>)
 8005ed8:	607b      	str	r3, [r7, #4]
      break;
 8005eda:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8005edc:	687b      	ldr	r3, [r7, #4]
}
 8005ede:	0018      	movs	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	b002      	add	sp, #8
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	007a1200 	.word	0x007a1200
 8005eec:	002dc6c0 	.word	0x002dc6c0
 8005ef0:	02dc6c00 	.word	0x02dc6c00

08005ef4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005efc:	f7ff ff18 	bl	8005d30 <LL_RCC_GetAHBPrescaler>
 8005f00:	0003      	movs	r3, r0
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	220f      	movs	r2, #15
 8005f06:	4013      	ands	r3, r2
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <RCC_GetHCLKClockFreq+0x28>)
 8005f0a:	5cd3      	ldrb	r3, [r2, r3]
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	40d3      	lsrs	r3, r2
}
 8005f12:	0018      	movs	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b002      	add	sp, #8
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	08007854 	.word	0x08007854

08005f20 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005f28:	f7ff ff0e 	bl	8005d48 <LL_RCC_GetAPB1Prescaler>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <RCC_GetPCLK1ClockFreq+0x24>)
 8005f32:	5cd3      	ldrb	r3, [r2, r3]
 8005f34:	001a      	movs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	40d3      	lsrs	r3, r2
}
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	08007864 	.word	0x08007864

08005f48 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f56:	f7ff ff17 	bl	8005d88 <LL_RCC_PLL_GetMainSource>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	23c0      	movs	r3, #192	; 0xc0
 8005f62:	025b      	lsls	r3, r3, #9
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d012      	beq.n	8005f8e <RCC_PLL_GetFreqDomain_SYS+0x46>
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	23c0      	movs	r3, #192	; 0xc0
 8005f6c:	025b      	lsls	r3, r3, #9
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d813      	bhi.n	8005f9a <RCC_PLL_GetFreqDomain_SYS+0x52>
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d005      	beq.n	8005f88 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	025b      	lsls	r3, r3, #9
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d006      	beq.n	8005f94 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005f86:	e008      	b.n	8005f9a <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8005f8a:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8005f8c:	e008      	b.n	8005fa0 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 8005f90:	607b      	str	r3, [r7, #4]
      break;
 8005f92:	e005      	b.n	8005fa0 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <RCC_PLL_GetFreqDomain_SYS+0x90>)
 8005f96:	607b      	str	r3, [r7, #4]
      break;
 8005f98:	e002      	b.n	8005fa0 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8005f9c:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8005f9e:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8005fa0:	f7ff ff0a 	bl	8005db8 <LL_RCC_PLL_GetPrediv>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	220f      	movs	r2, #15
 8005fa8:	4013      	ands	r3, r2
 8005faa:	3301      	adds	r3, #1
 8005fac:	0019      	movs	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fa f8bc 	bl	800012c <__udivsi3>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	001c      	movs	r4, r3
 8005fb8:	f7ff fef2 	bl	8005da0 <LL_RCC_PLL_GetMultiplicator>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	0c9b      	lsrs	r3, r3, #18
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b003      	add	sp, #12
 8005fce:	bd90      	pop	{r4, r7, pc}
 8005fd0:	007a1200 	.word	0x007a1200
 8005fd4:	02dc6c00 	.word	0x02dc6c00
 8005fd8:	002dc6c0 	.word	0x002dc6c0

08005fdc <LL_TIM_SetPrescaler>:
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <LL_TIM_SetAutoReload>:
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006004:	46c0      	nop			; (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	b002      	add	sp, #8
 800600a:	bd80      	pop	{r7, pc}

0800600c <LL_TIM_SetRepetitionCounter>:
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	b002      	add	sp, #8
 8006022:	bd80      	pop	{r7, pc}

08006024 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2201      	movs	r2, #1
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	615a      	str	r2, [r3, #20]
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}

08006040 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a31      	ldr	r2, [pc, #196]	; (8006118 <LL_TIM_Init+0xd8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d008      	beq.n	800606a <LL_TIM_Init+0x2a>
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	05db      	lsls	r3, r3, #23
 800605e:	429a      	cmp	r2, r3
 8006060:	d003      	beq.n	800606a <LL_TIM_Init+0x2a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2d      	ldr	r2, [pc, #180]	; (800611c <LL_TIM_Init+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d107      	bne.n	800607a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2270      	movs	r2, #112	; 0x70
 800606e:	4393      	bics	r3, r2
 8006070:	001a      	movs	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <LL_TIM_Init+0xd8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d014      	beq.n	80060ac <LL_TIM_Init+0x6c>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	05db      	lsls	r3, r3, #23
 8006088:	429a      	cmp	r2, r3
 800608a:	d00f      	beq.n	80060ac <LL_TIM_Init+0x6c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a23      	ldr	r2, [pc, #140]	; (800611c <LL_TIM_Init+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <LL_TIM_Init+0x6c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a22      	ldr	r2, [pc, #136]	; (8006120 <LL_TIM_Init+0xe0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <LL_TIM_Init+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a21      	ldr	r2, [pc, #132]	; (8006124 <LL_TIM_Init+0xe4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <LL_TIM_Init+0x6c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a20      	ldr	r2, [pc, #128]	; (8006128 <LL_TIM_Init+0xe8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d106      	bne.n	80060ba <LL_TIM_Init+0x7a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <LL_TIM_Init+0xec>)
 80060b0:	401a      	ands	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7ff ff93 	bl	8005ff4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	001a      	movs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0011      	movs	r1, r2
 80060d8:	0018      	movs	r0, r3
 80060da:	f7ff ff7f 	bl	8005fdc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <LL_TIM_Init+0xd8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <LL_TIM_Init+0xb6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a0e      	ldr	r2, [pc, #56]	; (8006124 <LL_TIM_Init+0xe4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <LL_TIM_Init+0xb6>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <LL_TIM_Init+0xe8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d106      	bne.n	8006104 <LL_TIM_Init+0xc4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	0011      	movs	r1, r2
 80060fe:	0018      	movs	r0, r3
 8006100:	f7ff ff84 	bl	800600c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	0018      	movs	r0, r3
 8006108:	f7ff ff8c 	bl	8006024 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800610c:	2300      	movs	r3, #0
}
 800610e:	0018      	movs	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	b004      	add	sp, #16
 8006114:	bd80      	pop	{r7, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40000400 	.word	0x40000400
 8006120:	40002000 	.word	0x40002000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800
 800612c:	fffffcff 	.word	0xfffffcff

08006130 <LL_USART_IsEnabled>:
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2201      	movs	r2, #1
 800613e:	4013      	ands	r3, r2
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <LL_USART_IsEnabled+0x18>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <LL_USART_IsEnabled+0x1a>
 8006148:	2300      	movs	r3, #0
}
 800614a:	0018      	movs	r0, r3
 800614c:	46bd      	mov	sp, r7
 800614e:	b002      	add	sp, #8
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <LL_USART_SetStopBitsLength>:
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4a05      	ldr	r2, [pc, #20]	; (8006178 <LL_USART_SetStopBitsLength+0x24>)
 8006164:	401a      	ands	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	605a      	str	r2, [r3, #4]
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	46bd      	mov	sp, r7
 8006172:	b002      	add	sp, #8
 8006174:	bd80      	pop	{r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	ffffcfff 	.word	0xffffcfff

0800617c <LL_USART_SetHWFlowCtrl>:
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	4a05      	ldr	r2, [pc, #20]	; (80061a0 <LL_USART_SetHWFlowCtrl+0x24>)
 800618c:	401a      	ands	r2, r3
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	609a      	str	r2, [r3, #8]
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	46bd      	mov	sp, r7
 800619a:	b002      	add	sp, #8
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	fffffcff 	.word	0xfffffcff

080061a4 <LL_USART_SetBaudRate>:
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d11c      	bne.n	80061f6 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	005a      	lsls	r2, r3, #1
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7f9 ffaf 	bl	800012c <__udivsi3>
 80061ce:	0003      	movs	r3, r0
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4a10      	ldr	r2, [pc, #64]	; (8006218 <LL_USART_SetBaudRate+0x74>)
 80061d8:	4013      	ands	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	001a      	movs	r2, r3
 80061e4:	2307      	movs	r3, #7
 80061e6:	4013      	ands	r3, r2
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	60da      	str	r2, [r3, #12]
}
 80061f4:	e00c      	b.n	8006210 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	085a      	lsrs	r2, r3, #1
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	18d3      	adds	r3, r2, r3
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	0018      	movs	r0, r3
 8006202:	f7f9 ff93 	bl	800012c <__udivsi3>
 8006206:	0003      	movs	r3, r0
 8006208:	b29b      	uxth	r3, r3
 800620a:	001a      	movs	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	60da      	str	r2, [r3, #12]
}
 8006210:	46c0      	nop			; (mov r8, r8)
 8006212:	46bd      	mov	sp, r7
 8006214:	b006      	add	sp, #24
 8006216:	bd80      	pop	{r7, pc}
 8006218:	0000fff0 	.word	0x0000fff0

0800621c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800621c:	b590      	push	{r4, r7, lr}
 800621e:	b089      	sub	sp, #36	; 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006226:	231f      	movs	r3, #31
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	0018      	movs	r0, r3
 8006236:	f7ff ff7b 	bl	8006130 <LL_USART_IsEnabled>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d148      	bne.n	80062d0 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a27      	ldr	r2, [pc, #156]	; (80062e0 <LL_USART_Init+0xc4>)
 8006244:	401a      	ands	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4319      	orrs	r1, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	4319      	orrs	r1, r3
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	430b      	orrs	r3, r1
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0011      	movs	r1, r2
 800626a:	0018      	movs	r0, r3
 800626c:	f7ff ff72 	bl	8006154 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	0011      	movs	r1, r2
 8006278:	0018      	movs	r0, r3
 800627a:	f7ff ff7f 	bl	800617c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <LL_USART_Init+0xc8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d105      	bne.n	8006292 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006286:	2000      	movs	r0, #0
 8006288:	f7ff fdc0 	bl	8005e0c <LL_RCC_GetUSARTClockFreq>
 800628c:	0003      	movs	r3, r0
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e00b      	b.n	80062aa <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <LL_USART_Init+0xcc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d107      	bne.n	80062aa <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800629a:	240c      	movs	r4, #12
 800629c:	193b      	adds	r3, r7, r4
 800629e:	0018      	movs	r0, r3
 80062a0:	f7ff fd96 	bl	8005dd0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80062a4:	193b      	adds	r3, r7, r4
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00f      	beq.n	80062d0 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 80062b8:	231f      	movs	r3, #31
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff ff6a 	bl	80061a4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80062d0:	231f      	movs	r3, #31
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	781b      	ldrb	r3, [r3, #0]
}
 80062d6:	0018      	movs	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	b009      	add	sp, #36	; 0x24
 80062dc:	bd90      	pop	{r4, r7, pc}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	efff69f3 	.word	0xefff69f3
 80062e4:	40013800 	.word	0x40013800
 80062e8:	40004400 	.word	0x40004400

080062ec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7f9 ff17 	bl	800012c <__udivsi3>
 80062fe:	0003      	movs	r3, r0
 8006300:	001a      	movs	r2, r3
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <LL_InitTick+0x30>)
 8006304:	3a01      	subs	r2, #1
 8006306:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006308:	4b04      	ldr	r3, [pc, #16]	; (800631c <LL_InitTick+0x30>)
 800630a:	2200      	movs	r2, #0
 800630c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <LL_InitTick+0x30>)
 8006310:	2205      	movs	r2, #5
 8006312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006314:	46c0      	nop			; (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}
 800631c:	e000e010 	.word	0xe000e010

08006320 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006328:	23fa      	movs	r3, #250	; 0xfa
 800632a:	009a      	lsls	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f7ff ffdb 	bl	80062ec <LL_InitTick>
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	b002      	add	sp, #8
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <LL_mDelay+0x40>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800634e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	d00c      	beq.n	8006370 <LL_mDelay+0x30>
  {
    Delay++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3301      	adds	r3, #1
 800635a:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800635c:	e008      	b.n	8006370 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800635e:	4b08      	ldr	r3, [pc, #32]	; (8006380 <LL_mDelay+0x40>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	4013      	ands	r3, r2
 8006368:	d002      	beq.n	8006370 <LL_mDelay+0x30>
    {
      Delay--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3b01      	subs	r3, #1
 800636e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f3      	bne.n	800635e <LL_mDelay+0x1e>
    }
  }
}
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b004      	add	sp, #16
 800637e:	bd80      	pop	{r7, pc}
 8006380:	e000e010 	.word	0xe000e010

08006384 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <LL_SetSystemCoreClock+0x18>)
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b002      	add	sp, #8
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20000010 	.word	0x20000010

080063a0 <__errno>:
 80063a0:	4b01      	ldr	r3, [pc, #4]	; (80063a8 <__errno+0x8>)
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	4770      	bx	lr
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	20000014 	.word	0x20000014

080063ac <__libc_init_array>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	2600      	movs	r6, #0
 80063b0:	4d0c      	ldr	r5, [pc, #48]	; (80063e4 <__libc_init_array+0x38>)
 80063b2:	4c0d      	ldr	r4, [pc, #52]	; (80063e8 <__libc_init_array+0x3c>)
 80063b4:	1b64      	subs	r4, r4, r5
 80063b6:	10a4      	asrs	r4, r4, #2
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	d109      	bne.n	80063d0 <__libc_init_array+0x24>
 80063bc:	2600      	movs	r6, #0
 80063be:	f001 f877 	bl	80074b0 <_init>
 80063c2:	4d0a      	ldr	r5, [pc, #40]	; (80063ec <__libc_init_array+0x40>)
 80063c4:	4c0a      	ldr	r4, [pc, #40]	; (80063f0 <__libc_init_array+0x44>)
 80063c6:	1b64      	subs	r4, r4, r5
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	42a6      	cmp	r6, r4
 80063cc:	d105      	bne.n	80063da <__libc_init_array+0x2e>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	00b3      	lsls	r3, r6, #2
 80063d2:	58eb      	ldr	r3, [r5, r3]
 80063d4:	4798      	blx	r3
 80063d6:	3601      	adds	r6, #1
 80063d8:	e7ee      	b.n	80063b8 <__libc_init_array+0xc>
 80063da:	00b3      	lsls	r3, r6, #2
 80063dc:	58eb      	ldr	r3, [r5, r3]
 80063de:	4798      	blx	r3
 80063e0:	3601      	adds	r6, #1
 80063e2:	e7f2      	b.n	80063ca <__libc_init_array+0x1e>
 80063e4:	08007c4c 	.word	0x08007c4c
 80063e8:	08007c4c 	.word	0x08007c4c
 80063ec:	08007c4c 	.word	0x08007c4c
 80063f0:	08007c50 	.word	0x08007c50

080063f4 <memcpy>:
 80063f4:	2300      	movs	r3, #0
 80063f6:	b510      	push	{r4, lr}
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d100      	bne.n	80063fe <memcpy+0xa>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	5ccc      	ldrb	r4, [r1, r3]
 8006400:	54c4      	strb	r4, [r0, r3]
 8006402:	3301      	adds	r3, #1
 8006404:	e7f8      	b.n	80063f8 <memcpy+0x4>

08006406 <memset>:
 8006406:	0003      	movs	r3, r0
 8006408:	1882      	adds	r2, r0, r2
 800640a:	4293      	cmp	r3, r2
 800640c:	d100      	bne.n	8006410 <memset+0xa>
 800640e:	4770      	bx	lr
 8006410:	7019      	strb	r1, [r3, #0]
 8006412:	3301      	adds	r3, #1
 8006414:	e7f9      	b.n	800640a <memset+0x4>
	...

08006418 <rand>:
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <rand+0x5c>)
 800641a:	b510      	push	{r4, lr}
 800641c:	681c      	ldr	r4, [r3, #0]
 800641e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d116      	bne.n	8006452 <rand+0x3a>
 8006424:	2018      	movs	r0, #24
 8006426:	f000 f863 	bl	80064f0 <malloc>
 800642a:	1e02      	subs	r2, r0, #0
 800642c:	63a0      	str	r0, [r4, #56]	; 0x38
 800642e:	d104      	bne.n	800643a <rand+0x22>
 8006430:	214e      	movs	r1, #78	; 0x4e
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <rand+0x60>)
 8006434:	4811      	ldr	r0, [pc, #68]	; (800647c <rand+0x64>)
 8006436:	f000 f82d 	bl	8006494 <__assert_func>
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <rand+0x68>)
 800643c:	2100      	movs	r1, #0
 800643e:	6003      	str	r3, [r0, #0]
 8006440:	4b10      	ldr	r3, [pc, #64]	; (8006484 <rand+0x6c>)
 8006442:	6043      	str	r3, [r0, #4]
 8006444:	4b10      	ldr	r3, [pc, #64]	; (8006488 <rand+0x70>)
 8006446:	6083      	str	r3, [r0, #8]
 8006448:	230b      	movs	r3, #11
 800644a:	8183      	strh	r3, [r0, #12]
 800644c:	2001      	movs	r0, #1
 800644e:	6110      	str	r0, [r2, #16]
 8006450:	6151      	str	r1, [r2, #20]
 8006452:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006454:	4a0d      	ldr	r2, [pc, #52]	; (800648c <rand+0x74>)
 8006456:	6920      	ldr	r0, [r4, #16]
 8006458:	6961      	ldr	r1, [r4, #20]
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <rand+0x78>)
 800645c:	f7fa f820 	bl	80004a0 <__aeabi_lmul>
 8006460:	2201      	movs	r2, #1
 8006462:	2300      	movs	r3, #0
 8006464:	1880      	adds	r0, r0, r2
 8006466:	4159      	adcs	r1, r3
 8006468:	6120      	str	r0, [r4, #16]
 800646a:	6161      	str	r1, [r4, #20]
 800646c:	0048      	lsls	r0, r1, #1
 800646e:	0840      	lsrs	r0, r0, #1
 8006470:	bd10      	pop	{r4, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	20000014 	.word	0x20000014
 8006478:	08007afc 	.word	0x08007afc
 800647c:	08007b13 	.word	0x08007b13
 8006480:	abcd330e 	.word	0xabcd330e
 8006484:	e66d1234 	.word	0xe66d1234
 8006488:	0005deec 	.word	0x0005deec
 800648c:	4c957f2d 	.word	0x4c957f2d
 8006490:	5851f42d 	.word	0x5851f42d

08006494 <__assert_func>:
 8006494:	b530      	push	{r4, r5, lr}
 8006496:	0014      	movs	r4, r2
 8006498:	001a      	movs	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <__assert_func+0x2c>)
 800649c:	0005      	movs	r5, r0
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	b085      	sub	sp, #20
 80064a2:	68d8      	ldr	r0, [r3, #12]
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <__assert_func+0x30>)
 80064a6:	2c00      	cmp	r4, #0
 80064a8:	d101      	bne.n	80064ae <__assert_func+0x1a>
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <__assert_func+0x34>)
 80064ac:	001c      	movs	r4, r3
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	9100      	str	r1, [sp, #0]
 80064b2:	002b      	movs	r3, r5
 80064b4:	4905      	ldr	r1, [pc, #20]	; (80064cc <__assert_func+0x38>)
 80064b6:	9402      	str	r4, [sp, #8]
 80064b8:	f000 f80a 	bl	80064d0 <fiprintf>
 80064bc:	f000 fc8e 	bl	8006ddc <abort>
 80064c0:	20000014 	.word	0x20000014
 80064c4:	08007b72 	.word	0x08007b72
 80064c8:	08007bad 	.word	0x08007bad
 80064cc:	08007b7f 	.word	0x08007b7f

080064d0 <fiprintf>:
 80064d0:	b40e      	push	{r1, r2, r3}
 80064d2:	b503      	push	{r0, r1, lr}
 80064d4:	0001      	movs	r1, r0
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	4804      	ldr	r0, [pc, #16]	; (80064ec <fiprintf+0x1c>)
 80064da:	cb04      	ldmia	r3!, {r2}
 80064dc:	6800      	ldr	r0, [r0, #0]
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	f000 f8e0 	bl	80066a4 <_vfiprintf_r>
 80064e4:	b002      	add	sp, #8
 80064e6:	bc08      	pop	{r3}
 80064e8:	b003      	add	sp, #12
 80064ea:	4718      	bx	r3
 80064ec:	20000014 	.word	0x20000014

080064f0 <malloc>:
 80064f0:	b510      	push	{r4, lr}
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <malloc+0x10>)
 80064f4:	0001      	movs	r1, r0
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	f000 f84e 	bl	8006598 <_malloc_r>
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	20000014 	.word	0x20000014

08006504 <_free_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	0005      	movs	r5, r0
 8006508:	2900      	cmp	r1, #0
 800650a:	d010      	beq.n	800652e <_free_r+0x2a>
 800650c:	1f0c      	subs	r4, r1, #4
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da00      	bge.n	8006516 <_free_r+0x12>
 8006514:	18e4      	adds	r4, r4, r3
 8006516:	0028      	movs	r0, r5
 8006518:	f000 feb2 	bl	8007280 <__malloc_lock>
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <_free_r+0x90>)
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <_free_r+0x2c>
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	6014      	str	r4, [r2, #0]
 8006528:	0028      	movs	r0, r5
 800652a:	f000 feb1 	bl	8007290 <__malloc_unlock>
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	42a3      	cmp	r3, r4
 8006532:	d908      	bls.n	8006546 <_free_r+0x42>
 8006534:	6821      	ldr	r1, [r4, #0]
 8006536:	1860      	adds	r0, r4, r1
 8006538:	4283      	cmp	r3, r0
 800653a:	d1f3      	bne.n	8006524 <_free_r+0x20>
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	1841      	adds	r1, r0, r1
 8006542:	6021      	str	r1, [r4, #0]
 8006544:	e7ee      	b.n	8006524 <_free_r+0x20>
 8006546:	001a      	movs	r2, r3
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <_free_r+0x4e>
 800654e:	42a3      	cmp	r3, r4
 8006550:	d9f9      	bls.n	8006546 <_free_r+0x42>
 8006552:	6811      	ldr	r1, [r2, #0]
 8006554:	1850      	adds	r0, r2, r1
 8006556:	42a0      	cmp	r0, r4
 8006558:	d10b      	bne.n	8006572 <_free_r+0x6e>
 800655a:	6820      	ldr	r0, [r4, #0]
 800655c:	1809      	adds	r1, r1, r0
 800655e:	1850      	adds	r0, r2, r1
 8006560:	6011      	str	r1, [r2, #0]
 8006562:	4283      	cmp	r3, r0
 8006564:	d1e0      	bne.n	8006528 <_free_r+0x24>
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	1841      	adds	r1, r0, r1
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	6053      	str	r3, [r2, #4]
 8006570:	e7da      	b.n	8006528 <_free_r+0x24>
 8006572:	42a0      	cmp	r0, r4
 8006574:	d902      	bls.n	800657c <_free_r+0x78>
 8006576:	230c      	movs	r3, #12
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	e7d5      	b.n	8006528 <_free_r+0x24>
 800657c:	6821      	ldr	r1, [r4, #0]
 800657e:	1860      	adds	r0, r4, r1
 8006580:	4283      	cmp	r3, r0
 8006582:	d103      	bne.n	800658c <_free_r+0x88>
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	1841      	adds	r1, r0, r1
 800658a:	6021      	str	r1, [r4, #0]
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	6054      	str	r4, [r2, #4]
 8006590:	e7ca      	b.n	8006528 <_free_r+0x24>
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	2000009c 	.word	0x2000009c

08006598 <_malloc_r>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	2303      	movs	r3, #3
 800659c:	1ccd      	adds	r5, r1, #3
 800659e:	439d      	bics	r5, r3
 80065a0:	3508      	adds	r5, #8
 80065a2:	0006      	movs	r6, r0
 80065a4:	2d0c      	cmp	r5, #12
 80065a6:	d21f      	bcs.n	80065e8 <_malloc_r+0x50>
 80065a8:	250c      	movs	r5, #12
 80065aa:	42a9      	cmp	r1, r5
 80065ac:	d81e      	bhi.n	80065ec <_malloc_r+0x54>
 80065ae:	0030      	movs	r0, r6
 80065b0:	f000 fe66 	bl	8007280 <__malloc_lock>
 80065b4:	4925      	ldr	r1, [pc, #148]	; (800664c <_malloc_r+0xb4>)
 80065b6:	680a      	ldr	r2, [r1, #0]
 80065b8:	0014      	movs	r4, r2
 80065ba:	2c00      	cmp	r4, #0
 80065bc:	d11a      	bne.n	80065f4 <_malloc_r+0x5c>
 80065be:	4f24      	ldr	r7, [pc, #144]	; (8006650 <_malloc_r+0xb8>)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <_malloc_r+0x38>
 80065c6:	0021      	movs	r1, r4
 80065c8:	0030      	movs	r0, r6
 80065ca:	f000 fb27 	bl	8006c1c <_sbrk_r>
 80065ce:	6038      	str	r0, [r7, #0]
 80065d0:	0029      	movs	r1, r5
 80065d2:	0030      	movs	r0, r6
 80065d4:	f000 fb22 	bl	8006c1c <_sbrk_r>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d12b      	bne.n	8006634 <_malloc_r+0x9c>
 80065dc:	230c      	movs	r3, #12
 80065de:	0030      	movs	r0, r6
 80065e0:	6033      	str	r3, [r6, #0]
 80065e2:	f000 fe55 	bl	8007290 <__malloc_unlock>
 80065e6:	e003      	b.n	80065f0 <_malloc_r+0x58>
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	dade      	bge.n	80065aa <_malloc_r+0x12>
 80065ec:	230c      	movs	r3, #12
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	2000      	movs	r0, #0
 80065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	1b5b      	subs	r3, r3, r5
 80065f8:	d419      	bmi.n	800662e <_malloc_r+0x96>
 80065fa:	2b0b      	cmp	r3, #11
 80065fc:	d903      	bls.n	8006606 <_malloc_r+0x6e>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	18e4      	adds	r4, r4, r3
 8006602:	6025      	str	r5, [r4, #0]
 8006604:	e003      	b.n	800660e <_malloc_r+0x76>
 8006606:	6863      	ldr	r3, [r4, #4]
 8006608:	42a2      	cmp	r2, r4
 800660a:	d10e      	bne.n	800662a <_malloc_r+0x92>
 800660c:	600b      	str	r3, [r1, #0]
 800660e:	0030      	movs	r0, r6
 8006610:	f000 fe3e 	bl	8007290 <__malloc_unlock>
 8006614:	0020      	movs	r0, r4
 8006616:	2207      	movs	r2, #7
 8006618:	300b      	adds	r0, #11
 800661a:	1d23      	adds	r3, r4, #4
 800661c:	4390      	bics	r0, r2
 800661e:	1ac2      	subs	r2, r0, r3
 8006620:	4298      	cmp	r0, r3
 8006622:	d0e6      	beq.n	80065f2 <_malloc_r+0x5a>
 8006624:	1a1b      	subs	r3, r3, r0
 8006626:	50a3      	str	r3, [r4, r2]
 8006628:	e7e3      	b.n	80065f2 <_malloc_r+0x5a>
 800662a:	6053      	str	r3, [r2, #4]
 800662c:	e7ef      	b.n	800660e <_malloc_r+0x76>
 800662e:	0022      	movs	r2, r4
 8006630:	6864      	ldr	r4, [r4, #4]
 8006632:	e7c2      	b.n	80065ba <_malloc_r+0x22>
 8006634:	2303      	movs	r3, #3
 8006636:	1cc4      	adds	r4, r0, #3
 8006638:	439c      	bics	r4, r3
 800663a:	42a0      	cmp	r0, r4
 800663c:	d0e1      	beq.n	8006602 <_malloc_r+0x6a>
 800663e:	1a21      	subs	r1, r4, r0
 8006640:	0030      	movs	r0, r6
 8006642:	f000 faeb 	bl	8006c1c <_sbrk_r>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d1db      	bne.n	8006602 <_malloc_r+0x6a>
 800664a:	e7c7      	b.n	80065dc <_malloc_r+0x44>
 800664c:	2000009c 	.word	0x2000009c
 8006650:	200000a0 	.word	0x200000a0

08006654 <__sfputc_r>:
 8006654:	6893      	ldr	r3, [r2, #8]
 8006656:	b510      	push	{r4, lr}
 8006658:	3b01      	subs	r3, #1
 800665a:	6093      	str	r3, [r2, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	da04      	bge.n	800666a <__sfputc_r+0x16>
 8006660:	6994      	ldr	r4, [r2, #24]
 8006662:	42a3      	cmp	r3, r4
 8006664:	db07      	blt.n	8006676 <__sfputc_r+0x22>
 8006666:	290a      	cmp	r1, #10
 8006668:	d005      	beq.n	8006676 <__sfputc_r+0x22>
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	1c58      	adds	r0, r3, #1
 800666e:	6010      	str	r0, [r2, #0]
 8006670:	7019      	strb	r1, [r3, #0]
 8006672:	0008      	movs	r0, r1
 8006674:	bd10      	pop	{r4, pc}
 8006676:	f000 fae3 	bl	8006c40 <__swbuf_r>
 800667a:	0001      	movs	r1, r0
 800667c:	e7f9      	b.n	8006672 <__sfputc_r+0x1e>

0800667e <__sfputs_r>:
 800667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006680:	0006      	movs	r6, r0
 8006682:	000f      	movs	r7, r1
 8006684:	0014      	movs	r4, r2
 8006686:	18d5      	adds	r5, r2, r3
 8006688:	42ac      	cmp	r4, r5
 800668a:	d101      	bne.n	8006690 <__sfputs_r+0x12>
 800668c:	2000      	movs	r0, #0
 800668e:	e007      	b.n	80066a0 <__sfputs_r+0x22>
 8006690:	7821      	ldrb	r1, [r4, #0]
 8006692:	003a      	movs	r2, r7
 8006694:	0030      	movs	r0, r6
 8006696:	f7ff ffdd 	bl	8006654 <__sfputc_r>
 800669a:	3401      	adds	r4, #1
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d1f3      	bne.n	8006688 <__sfputs_r+0xa>
 80066a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066a4 <_vfiprintf_r>:
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	b0a1      	sub	sp, #132	; 0x84
 80066a8:	0006      	movs	r6, r0
 80066aa:	000c      	movs	r4, r1
 80066ac:	001f      	movs	r7, r3
 80066ae:	9203      	str	r2, [sp, #12]
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d004      	beq.n	80066be <_vfiprintf_r+0x1a>
 80066b4:	6983      	ldr	r3, [r0, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <_vfiprintf_r+0x1a>
 80066ba:	f000 fcc5 	bl	8007048 <__sinit>
 80066be:	4b8e      	ldr	r3, [pc, #568]	; (80068f8 <_vfiprintf_r+0x254>)
 80066c0:	429c      	cmp	r4, r3
 80066c2:	d11c      	bne.n	80066fe <_vfiprintf_r+0x5a>
 80066c4:	6874      	ldr	r4, [r6, #4]
 80066c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066c8:	07db      	lsls	r3, r3, #31
 80066ca:	d405      	bmi.n	80066d8 <_vfiprintf_r+0x34>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	059b      	lsls	r3, r3, #22
 80066d0:	d402      	bmi.n	80066d8 <_vfiprintf_r+0x34>
 80066d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d4:	f000 fd59 	bl	800718a <__retarget_lock_acquire_recursive>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	071b      	lsls	r3, r3, #28
 80066dc:	d502      	bpl.n	80066e4 <_vfiprintf_r+0x40>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11d      	bne.n	8006720 <_vfiprintf_r+0x7c>
 80066e4:	0021      	movs	r1, r4
 80066e6:	0030      	movs	r0, r6
 80066e8:	f000 fb00 	bl	8006cec <__swsetup_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d017      	beq.n	8006720 <_vfiprintf_r+0x7c>
 80066f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f2:	07db      	lsls	r3, r3, #31
 80066f4:	d50d      	bpl.n	8006712 <_vfiprintf_r+0x6e>
 80066f6:	2001      	movs	r0, #1
 80066f8:	4240      	negs	r0, r0
 80066fa:	b021      	add	sp, #132	; 0x84
 80066fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fe:	4b7f      	ldr	r3, [pc, #508]	; (80068fc <_vfiprintf_r+0x258>)
 8006700:	429c      	cmp	r4, r3
 8006702:	d101      	bne.n	8006708 <_vfiprintf_r+0x64>
 8006704:	68b4      	ldr	r4, [r6, #8]
 8006706:	e7de      	b.n	80066c6 <_vfiprintf_r+0x22>
 8006708:	4b7d      	ldr	r3, [pc, #500]	; (8006900 <_vfiprintf_r+0x25c>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d1db      	bne.n	80066c6 <_vfiprintf_r+0x22>
 800670e:	68f4      	ldr	r4, [r6, #12]
 8006710:	e7d9      	b.n	80066c6 <_vfiprintf_r+0x22>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	d4ee      	bmi.n	80066f6 <_vfiprintf_r+0x52>
 8006718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671a:	f000 fd37 	bl	800718c <__retarget_lock_release_recursive>
 800671e:	e7ea      	b.n	80066f6 <_vfiprintf_r+0x52>
 8006720:	2300      	movs	r3, #0
 8006722:	ad08      	add	r5, sp, #32
 8006724:	616b      	str	r3, [r5, #20]
 8006726:	3320      	adds	r3, #32
 8006728:	766b      	strb	r3, [r5, #25]
 800672a:	3310      	adds	r3, #16
 800672c:	76ab      	strb	r3, [r5, #26]
 800672e:	9707      	str	r7, [sp, #28]
 8006730:	9f03      	ldr	r7, [sp, #12]
 8006732:	783b      	ldrb	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <_vfiprintf_r+0x98>
 8006738:	2b25      	cmp	r3, #37	; 0x25
 800673a:	d14e      	bne.n	80067da <_vfiprintf_r+0x136>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	1afb      	subs	r3, r7, r3
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	429f      	cmp	r7, r3
 8006746:	d00d      	beq.n	8006764 <_vfiprintf_r+0xc0>
 8006748:	9b05      	ldr	r3, [sp, #20]
 800674a:	0021      	movs	r1, r4
 800674c:	0030      	movs	r0, r6
 800674e:	9a03      	ldr	r2, [sp, #12]
 8006750:	f7ff ff95 	bl	800667e <__sfputs_r>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d100      	bne.n	800675a <_vfiprintf_r+0xb6>
 8006758:	e0b5      	b.n	80068c6 <_vfiprintf_r+0x222>
 800675a:	696a      	ldr	r2, [r5, #20]
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	4694      	mov	ip, r2
 8006760:	4463      	add	r3, ip
 8006762:	616b      	str	r3, [r5, #20]
 8006764:	783b      	ldrb	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d100      	bne.n	800676c <_vfiprintf_r+0xc8>
 800676a:	e0ac      	b.n	80068c6 <_vfiprintf_r+0x222>
 800676c:	2201      	movs	r2, #1
 800676e:	1c7b      	adds	r3, r7, #1
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	2300      	movs	r3, #0
 8006774:	4252      	negs	r2, r2
 8006776:	606a      	str	r2, [r5, #4]
 8006778:	a904      	add	r1, sp, #16
 800677a:	3254      	adds	r2, #84	; 0x54
 800677c:	1852      	adds	r2, r2, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	60eb      	str	r3, [r5, #12]
 8006782:	60ab      	str	r3, [r5, #8]
 8006784:	7013      	strb	r3, [r2, #0]
 8006786:	65ab      	str	r3, [r5, #88]	; 0x58
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	2205      	movs	r2, #5
 800678c:	7819      	ldrb	r1, [r3, #0]
 800678e:	485d      	ldr	r0, [pc, #372]	; (8006904 <_vfiprintf_r+0x260>)
 8006790:	f000 fd6a 	bl	8007268 <memchr>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1c5f      	adds	r7, r3, #1
 8006798:	2800      	cmp	r0, #0
 800679a:	d120      	bne.n	80067de <_vfiprintf_r+0x13a>
 800679c:	682a      	ldr	r2, [r5, #0]
 800679e:	06d3      	lsls	r3, r2, #27
 80067a0:	d504      	bpl.n	80067ac <_vfiprintf_r+0x108>
 80067a2:	2353      	movs	r3, #83	; 0x53
 80067a4:	a904      	add	r1, sp, #16
 80067a6:	185b      	adds	r3, r3, r1
 80067a8:	2120      	movs	r1, #32
 80067aa:	7019      	strb	r1, [r3, #0]
 80067ac:	0713      	lsls	r3, r2, #28
 80067ae:	d504      	bpl.n	80067ba <_vfiprintf_r+0x116>
 80067b0:	2353      	movs	r3, #83	; 0x53
 80067b2:	a904      	add	r1, sp, #16
 80067b4:	185b      	adds	r3, r3, r1
 80067b6:	212b      	movs	r1, #43	; 0x2b
 80067b8:	7019      	strb	r1, [r3, #0]
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b2a      	cmp	r3, #42	; 0x2a
 80067c0:	d016      	beq.n	80067f0 <_vfiprintf_r+0x14c>
 80067c2:	2100      	movs	r1, #0
 80067c4:	68eb      	ldr	r3, [r5, #12]
 80067c6:	9f03      	ldr	r7, [sp, #12]
 80067c8:	783a      	ldrb	r2, [r7, #0]
 80067ca:	1c78      	adds	r0, r7, #1
 80067cc:	3a30      	subs	r2, #48	; 0x30
 80067ce:	4684      	mov	ip, r0
 80067d0:	2a09      	cmp	r2, #9
 80067d2:	d94f      	bls.n	8006874 <_vfiprintf_r+0x1d0>
 80067d4:	2900      	cmp	r1, #0
 80067d6:	d111      	bne.n	80067fc <_vfiprintf_r+0x158>
 80067d8:	e017      	b.n	800680a <_vfiprintf_r+0x166>
 80067da:	3701      	adds	r7, #1
 80067dc:	e7a9      	b.n	8006732 <_vfiprintf_r+0x8e>
 80067de:	4b49      	ldr	r3, [pc, #292]	; (8006904 <_vfiprintf_r+0x260>)
 80067e0:	682a      	ldr	r2, [r5, #0]
 80067e2:	1ac0      	subs	r0, r0, r3
 80067e4:	2301      	movs	r3, #1
 80067e6:	4083      	lsls	r3, r0
 80067e8:	4313      	orrs	r3, r2
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	9703      	str	r7, [sp, #12]
 80067ee:	e7cb      	b.n	8006788 <_vfiprintf_r+0xe4>
 80067f0:	9b07      	ldr	r3, [sp, #28]
 80067f2:	1d19      	adds	r1, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	9107      	str	r1, [sp, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db01      	blt.n	8006800 <_vfiprintf_r+0x15c>
 80067fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80067fe:	e004      	b.n	800680a <_vfiprintf_r+0x166>
 8006800:	425b      	negs	r3, r3
 8006802:	60eb      	str	r3, [r5, #12]
 8006804:	2302      	movs	r3, #2
 8006806:	4313      	orrs	r3, r2
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	783b      	ldrb	r3, [r7, #0]
 800680c:	2b2e      	cmp	r3, #46	; 0x2e
 800680e:	d10a      	bne.n	8006826 <_vfiprintf_r+0x182>
 8006810:	787b      	ldrb	r3, [r7, #1]
 8006812:	2b2a      	cmp	r3, #42	; 0x2a
 8006814:	d137      	bne.n	8006886 <_vfiprintf_r+0x1e2>
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	3702      	adds	r7, #2
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	9207      	str	r2, [sp, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	db2d      	blt.n	8006880 <_vfiprintf_r+0x1dc>
 8006824:	9309      	str	r3, [sp, #36]	; 0x24
 8006826:	2203      	movs	r2, #3
 8006828:	7839      	ldrb	r1, [r7, #0]
 800682a:	4837      	ldr	r0, [pc, #220]	; (8006908 <_vfiprintf_r+0x264>)
 800682c:	f000 fd1c 	bl	8007268 <memchr>
 8006830:	2800      	cmp	r0, #0
 8006832:	d007      	beq.n	8006844 <_vfiprintf_r+0x1a0>
 8006834:	4b34      	ldr	r3, [pc, #208]	; (8006908 <_vfiprintf_r+0x264>)
 8006836:	682a      	ldr	r2, [r5, #0]
 8006838:	1ac0      	subs	r0, r0, r3
 800683a:	2340      	movs	r3, #64	; 0x40
 800683c:	4083      	lsls	r3, r0
 800683e:	4313      	orrs	r3, r2
 8006840:	3701      	adds	r7, #1
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	7839      	ldrb	r1, [r7, #0]
 8006846:	1c7b      	adds	r3, r7, #1
 8006848:	2206      	movs	r2, #6
 800684a:	4830      	ldr	r0, [pc, #192]	; (800690c <_vfiprintf_r+0x268>)
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	7629      	strb	r1, [r5, #24]
 8006850:	f000 fd0a 	bl	8007268 <memchr>
 8006854:	2800      	cmp	r0, #0
 8006856:	d045      	beq.n	80068e4 <_vfiprintf_r+0x240>
 8006858:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <_vfiprintf_r+0x26c>)
 800685a:	2b00      	cmp	r3, #0
 800685c:	d127      	bne.n	80068ae <_vfiprintf_r+0x20a>
 800685e:	2207      	movs	r2, #7
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	3307      	adds	r3, #7
 8006864:	4393      	bics	r3, r2
 8006866:	3308      	adds	r3, #8
 8006868:	9307      	str	r3, [sp, #28]
 800686a:	696b      	ldr	r3, [r5, #20]
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	189b      	adds	r3, r3, r2
 8006870:	616b      	str	r3, [r5, #20]
 8006872:	e75d      	b.n	8006730 <_vfiprintf_r+0x8c>
 8006874:	210a      	movs	r1, #10
 8006876:	434b      	muls	r3, r1
 8006878:	4667      	mov	r7, ip
 800687a:	189b      	adds	r3, r3, r2
 800687c:	3909      	subs	r1, #9
 800687e:	e7a3      	b.n	80067c8 <_vfiprintf_r+0x124>
 8006880:	2301      	movs	r3, #1
 8006882:	425b      	negs	r3, r3
 8006884:	e7ce      	b.n	8006824 <_vfiprintf_r+0x180>
 8006886:	2300      	movs	r3, #0
 8006888:	001a      	movs	r2, r3
 800688a:	3701      	adds	r7, #1
 800688c:	606b      	str	r3, [r5, #4]
 800688e:	7839      	ldrb	r1, [r7, #0]
 8006890:	1c78      	adds	r0, r7, #1
 8006892:	3930      	subs	r1, #48	; 0x30
 8006894:	4684      	mov	ip, r0
 8006896:	2909      	cmp	r1, #9
 8006898:	d903      	bls.n	80068a2 <_vfiprintf_r+0x1fe>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0c3      	beq.n	8006826 <_vfiprintf_r+0x182>
 800689e:	9209      	str	r2, [sp, #36]	; 0x24
 80068a0:	e7c1      	b.n	8006826 <_vfiprintf_r+0x182>
 80068a2:	230a      	movs	r3, #10
 80068a4:	435a      	muls	r2, r3
 80068a6:	4667      	mov	r7, ip
 80068a8:	1852      	adds	r2, r2, r1
 80068aa:	3b09      	subs	r3, #9
 80068ac:	e7ef      	b.n	800688e <_vfiprintf_r+0x1ea>
 80068ae:	ab07      	add	r3, sp, #28
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	0022      	movs	r2, r4
 80068b4:	0029      	movs	r1, r5
 80068b6:	0030      	movs	r0, r6
 80068b8:	4b16      	ldr	r3, [pc, #88]	; (8006914 <_vfiprintf_r+0x270>)
 80068ba:	e000      	b.n	80068be <_vfiprintf_r+0x21a>
 80068bc:	bf00      	nop
 80068be:	9004      	str	r0, [sp, #16]
 80068c0:	9b04      	ldr	r3, [sp, #16]
 80068c2:	3301      	adds	r3, #1
 80068c4:	d1d1      	bne.n	800686a <_vfiprintf_r+0x1c6>
 80068c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068c8:	07db      	lsls	r3, r3, #31
 80068ca:	d405      	bmi.n	80068d8 <_vfiprintf_r+0x234>
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	059b      	lsls	r3, r3, #22
 80068d0:	d402      	bmi.n	80068d8 <_vfiprintf_r+0x234>
 80068d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d4:	f000 fc5a 	bl	800718c <__retarget_lock_release_recursive>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	065b      	lsls	r3, r3, #25
 80068dc:	d500      	bpl.n	80068e0 <_vfiprintf_r+0x23c>
 80068de:	e70a      	b.n	80066f6 <_vfiprintf_r+0x52>
 80068e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068e2:	e70a      	b.n	80066fa <_vfiprintf_r+0x56>
 80068e4:	ab07      	add	r3, sp, #28
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	0022      	movs	r2, r4
 80068ea:	0029      	movs	r1, r5
 80068ec:	0030      	movs	r0, r6
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <_vfiprintf_r+0x270>)
 80068f0:	f000 f882 	bl	80069f8 <_printf_i>
 80068f4:	e7e3      	b.n	80068be <_vfiprintf_r+0x21a>
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	08007c04 	.word	0x08007c04
 80068fc:	08007c24 	.word	0x08007c24
 8006900:	08007be4 	.word	0x08007be4
 8006904:	08007bae 	.word	0x08007bae
 8006908:	08007bb4 	.word	0x08007bb4
 800690c:	08007bb8 	.word	0x08007bb8
 8006910:	00000000 	.word	0x00000000
 8006914:	0800667f 	.word	0x0800667f

08006918 <_printf_common>:
 8006918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800691a:	0015      	movs	r5, r2
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	688a      	ldr	r2, [r1, #8]
 8006920:	690b      	ldr	r3, [r1, #16]
 8006922:	000c      	movs	r4, r1
 8006924:	9000      	str	r0, [sp, #0]
 8006926:	4293      	cmp	r3, r2
 8006928:	da00      	bge.n	800692c <_printf_common+0x14>
 800692a:	0013      	movs	r3, r2
 800692c:	0022      	movs	r2, r4
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	3243      	adds	r2, #67	; 0x43
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d001      	beq.n	800693c <_printf_common+0x24>
 8006938:	3301      	adds	r3, #1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	069b      	lsls	r3, r3, #26
 8006940:	d502      	bpl.n	8006948 <_printf_common+0x30>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	3302      	adds	r3, #2
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	2306      	movs	r3, #6
 800694c:	0017      	movs	r7, r2
 800694e:	401f      	ands	r7, r3
 8006950:	421a      	tst	r2, r3
 8006952:	d027      	beq.n	80069a4 <_printf_common+0x8c>
 8006954:	0023      	movs	r3, r4
 8006956:	3343      	adds	r3, #67	; 0x43
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	1e5a      	subs	r2, r3, #1
 800695c:	4193      	sbcs	r3, r2
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	0692      	lsls	r2, r2, #26
 8006962:	d430      	bmi.n	80069c6 <_printf_common+0xae>
 8006964:	0022      	movs	r2, r4
 8006966:	9901      	ldr	r1, [sp, #4]
 8006968:	9800      	ldr	r0, [sp, #0]
 800696a:	9e08      	ldr	r6, [sp, #32]
 800696c:	3243      	adds	r2, #67	; 0x43
 800696e:	47b0      	blx	r6
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d025      	beq.n	80069c0 <_printf_common+0xa8>
 8006974:	2306      	movs	r3, #6
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	682a      	ldr	r2, [r5, #0]
 800697a:	68e1      	ldr	r1, [r4, #12]
 800697c:	2500      	movs	r5, #0
 800697e:	4003      	ands	r3, r0
 8006980:	2b04      	cmp	r3, #4
 8006982:	d103      	bne.n	800698c <_printf_common+0x74>
 8006984:	1a8d      	subs	r5, r1, r2
 8006986:	43eb      	mvns	r3, r5
 8006988:	17db      	asrs	r3, r3, #31
 800698a:	401d      	ands	r5, r3
 800698c:	68a3      	ldr	r3, [r4, #8]
 800698e:	6922      	ldr	r2, [r4, #16]
 8006990:	4293      	cmp	r3, r2
 8006992:	dd01      	ble.n	8006998 <_printf_common+0x80>
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	18ed      	adds	r5, r5, r3
 8006998:	2700      	movs	r7, #0
 800699a:	42bd      	cmp	r5, r7
 800699c:	d120      	bne.n	80069e0 <_printf_common+0xc8>
 800699e:	2000      	movs	r0, #0
 80069a0:	e010      	b.n	80069c4 <_printf_common+0xac>
 80069a2:	3701      	adds	r7, #1
 80069a4:	68e3      	ldr	r3, [r4, #12]
 80069a6:	682a      	ldr	r2, [r5, #0]
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	42bb      	cmp	r3, r7
 80069ac:	ddd2      	ble.n	8006954 <_printf_common+0x3c>
 80069ae:	0022      	movs	r2, r4
 80069b0:	2301      	movs	r3, #1
 80069b2:	9901      	ldr	r1, [sp, #4]
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	9e08      	ldr	r6, [sp, #32]
 80069b8:	3219      	adds	r2, #25
 80069ba:	47b0      	blx	r6
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d1f0      	bne.n	80069a2 <_printf_common+0x8a>
 80069c0:	2001      	movs	r0, #1
 80069c2:	4240      	negs	r0, r0
 80069c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069c6:	2030      	movs	r0, #48	; 0x30
 80069c8:	18e1      	adds	r1, r4, r3
 80069ca:	3143      	adds	r1, #67	; 0x43
 80069cc:	7008      	strb	r0, [r1, #0]
 80069ce:	0021      	movs	r1, r4
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	3145      	adds	r1, #69	; 0x45
 80069d4:	7809      	ldrb	r1, [r1, #0]
 80069d6:	18a2      	adds	r2, r4, r2
 80069d8:	3243      	adds	r2, #67	; 0x43
 80069da:	3302      	adds	r3, #2
 80069dc:	7011      	strb	r1, [r2, #0]
 80069de:	e7c1      	b.n	8006964 <_printf_common+0x4c>
 80069e0:	0022      	movs	r2, r4
 80069e2:	2301      	movs	r3, #1
 80069e4:	9901      	ldr	r1, [sp, #4]
 80069e6:	9800      	ldr	r0, [sp, #0]
 80069e8:	9e08      	ldr	r6, [sp, #32]
 80069ea:	321a      	adds	r2, #26
 80069ec:	47b0      	blx	r6
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d0e6      	beq.n	80069c0 <_printf_common+0xa8>
 80069f2:	3701      	adds	r7, #1
 80069f4:	e7d1      	b.n	800699a <_printf_common+0x82>
	...

080069f8 <_printf_i>:
 80069f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fa:	b08b      	sub	sp, #44	; 0x2c
 80069fc:	9206      	str	r2, [sp, #24]
 80069fe:	000a      	movs	r2, r1
 8006a00:	3243      	adds	r2, #67	; 0x43
 8006a02:	9307      	str	r3, [sp, #28]
 8006a04:	9005      	str	r0, [sp, #20]
 8006a06:	9204      	str	r2, [sp, #16]
 8006a08:	7e0a      	ldrb	r2, [r1, #24]
 8006a0a:	000c      	movs	r4, r1
 8006a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a0e:	2a78      	cmp	r2, #120	; 0x78
 8006a10:	d806      	bhi.n	8006a20 <_printf_i+0x28>
 8006a12:	2a62      	cmp	r2, #98	; 0x62
 8006a14:	d808      	bhi.n	8006a28 <_printf_i+0x30>
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d100      	bne.n	8006a1c <_printf_i+0x24>
 8006a1a:	e0c0      	b.n	8006b9e <_printf_i+0x1a6>
 8006a1c:	2a58      	cmp	r2, #88	; 0x58
 8006a1e:	d052      	beq.n	8006ac6 <_printf_i+0xce>
 8006a20:	0026      	movs	r6, r4
 8006a22:	3642      	adds	r6, #66	; 0x42
 8006a24:	7032      	strb	r2, [r6, #0]
 8006a26:	e022      	b.n	8006a6e <_printf_i+0x76>
 8006a28:	0010      	movs	r0, r2
 8006a2a:	3863      	subs	r0, #99	; 0x63
 8006a2c:	2815      	cmp	r0, #21
 8006a2e:	d8f7      	bhi.n	8006a20 <_printf_i+0x28>
 8006a30:	f7f9 fb72 	bl	8000118 <__gnu_thumb1_case_shi>
 8006a34:	001f0016 	.word	0x001f0016
 8006a38:	fff6fff6 	.word	0xfff6fff6
 8006a3c:	fff6fff6 	.word	0xfff6fff6
 8006a40:	fff6001f 	.word	0xfff6001f
 8006a44:	fff6fff6 	.word	0xfff6fff6
 8006a48:	00a8fff6 	.word	0x00a8fff6
 8006a4c:	009a0036 	.word	0x009a0036
 8006a50:	fff6fff6 	.word	0xfff6fff6
 8006a54:	fff600b9 	.word	0xfff600b9
 8006a58:	fff60036 	.word	0xfff60036
 8006a5c:	009efff6 	.word	0x009efff6
 8006a60:	0026      	movs	r6, r4
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	3642      	adds	r6, #66	; 0x42
 8006a66:	1d11      	adds	r1, r2, #4
 8006a68:	6019      	str	r1, [r3, #0]
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	7033      	strb	r3, [r6, #0]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0a7      	b.n	8006bc2 <_printf_i+0x1ca>
 8006a72:	6808      	ldr	r0, [r1, #0]
 8006a74:	6819      	ldr	r1, [r3, #0]
 8006a76:	1d0a      	adds	r2, r1, #4
 8006a78:	0605      	lsls	r5, r0, #24
 8006a7a:	d50b      	bpl.n	8006a94 <_printf_i+0x9c>
 8006a7c:	680d      	ldr	r5, [r1, #0]
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	da03      	bge.n	8006a8c <_printf_i+0x94>
 8006a84:	232d      	movs	r3, #45	; 0x2d
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	426d      	negs	r5, r5
 8006a8a:	7013      	strb	r3, [r2, #0]
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <_printf_i+0x21c>)
 8006a8e:	270a      	movs	r7, #10
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	e032      	b.n	8006afa <_printf_i+0x102>
 8006a94:	680d      	ldr	r5, [r1, #0]
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	0641      	lsls	r1, r0, #25
 8006a9a:	d5f1      	bpl.n	8006a80 <_printf_i+0x88>
 8006a9c:	b22d      	sxth	r5, r5
 8006a9e:	e7ef      	b.n	8006a80 <_printf_i+0x88>
 8006aa0:	680d      	ldr	r5, [r1, #0]
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	1d08      	adds	r0, r1, #4
 8006aa6:	6018      	str	r0, [r3, #0]
 8006aa8:	062e      	lsls	r6, r5, #24
 8006aaa:	d501      	bpl.n	8006ab0 <_printf_i+0xb8>
 8006aac:	680d      	ldr	r5, [r1, #0]
 8006aae:	e003      	b.n	8006ab8 <_printf_i+0xc0>
 8006ab0:	066d      	lsls	r5, r5, #25
 8006ab2:	d5fb      	bpl.n	8006aac <_printf_i+0xb4>
 8006ab4:	680d      	ldr	r5, [r1, #0]
 8006ab6:	b2ad      	uxth	r5, r5
 8006ab8:	4b56      	ldr	r3, [pc, #344]	; (8006c14 <_printf_i+0x21c>)
 8006aba:	270a      	movs	r7, #10
 8006abc:	9303      	str	r3, [sp, #12]
 8006abe:	2a6f      	cmp	r2, #111	; 0x6f
 8006ac0:	d117      	bne.n	8006af2 <_printf_i+0xfa>
 8006ac2:	2708      	movs	r7, #8
 8006ac4:	e015      	b.n	8006af2 <_printf_i+0xfa>
 8006ac6:	3145      	adds	r1, #69	; 0x45
 8006ac8:	700a      	strb	r2, [r1, #0]
 8006aca:	4a52      	ldr	r2, [pc, #328]	; (8006c14 <_printf_i+0x21c>)
 8006acc:	9203      	str	r2, [sp, #12]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	6821      	ldr	r1, [r4, #0]
 8006ad2:	ca20      	ldmia	r2!, {r5}
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	0608      	lsls	r0, r1, #24
 8006ad8:	d550      	bpl.n	8006b7c <_printf_i+0x184>
 8006ada:	07cb      	lsls	r3, r1, #31
 8006adc:	d502      	bpl.n	8006ae4 <_printf_i+0xec>
 8006ade:	2320      	movs	r3, #32
 8006ae0:	4319      	orrs	r1, r3
 8006ae2:	6021      	str	r1, [r4, #0]
 8006ae4:	2710      	movs	r7, #16
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	d103      	bne.n	8006af2 <_printf_i+0xfa>
 8006aea:	2320      	movs	r3, #32
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	439a      	bics	r2, r3
 8006af0:	6022      	str	r2, [r4, #0]
 8006af2:	0023      	movs	r3, r4
 8006af4:	2200      	movs	r2, #0
 8006af6:	3343      	adds	r3, #67	; 0x43
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	6863      	ldr	r3, [r4, #4]
 8006afc:	60a3      	str	r3, [r4, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	db03      	blt.n	8006b0a <_printf_i+0x112>
 8006b02:	2204      	movs	r2, #4
 8006b04:	6821      	ldr	r1, [r4, #0]
 8006b06:	4391      	bics	r1, r2
 8006b08:	6021      	str	r1, [r4, #0]
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	d102      	bne.n	8006b14 <_printf_i+0x11c>
 8006b0e:	9e04      	ldr	r6, [sp, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00c      	beq.n	8006b2e <_printf_i+0x136>
 8006b14:	9e04      	ldr	r6, [sp, #16]
 8006b16:	0028      	movs	r0, r5
 8006b18:	0039      	movs	r1, r7
 8006b1a:	f7f9 fb8d 	bl	8000238 <__aeabi_uidivmod>
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	3e01      	subs	r6, #1
 8006b22:	5c5b      	ldrb	r3, [r3, r1]
 8006b24:	7033      	strb	r3, [r6, #0]
 8006b26:	002b      	movs	r3, r5
 8006b28:	0005      	movs	r5, r0
 8006b2a:	429f      	cmp	r7, r3
 8006b2c:	d9f3      	bls.n	8006b16 <_printf_i+0x11e>
 8006b2e:	2f08      	cmp	r7, #8
 8006b30:	d109      	bne.n	8006b46 <_printf_i+0x14e>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	07db      	lsls	r3, r3, #31
 8006b36:	d506      	bpl.n	8006b46 <_printf_i+0x14e>
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	dc02      	bgt.n	8006b46 <_printf_i+0x14e>
 8006b40:	2330      	movs	r3, #48	; 0x30
 8006b42:	3e01      	subs	r6, #1
 8006b44:	7033      	strb	r3, [r6, #0]
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	1b9b      	subs	r3, r3, r6
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	0021      	movs	r1, r4
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	9805      	ldr	r0, [sp, #20]
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	aa09      	add	r2, sp, #36	; 0x24
 8006b58:	f7ff fede 	bl	8006918 <_printf_common>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d135      	bne.n	8006bcc <_printf_i+0x1d4>
 8006b60:	2001      	movs	r0, #1
 8006b62:	4240      	negs	r0, r0
 8006b64:	b00b      	add	sp, #44	; 0x2c
 8006b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b68:	2220      	movs	r2, #32
 8006b6a:	6809      	ldr	r1, [r1, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	0022      	movs	r2, r4
 8006b72:	2178      	movs	r1, #120	; 0x78
 8006b74:	3245      	adds	r2, #69	; 0x45
 8006b76:	7011      	strb	r1, [r2, #0]
 8006b78:	4a27      	ldr	r2, [pc, #156]	; (8006c18 <_printf_i+0x220>)
 8006b7a:	e7a7      	b.n	8006acc <_printf_i+0xd4>
 8006b7c:	0648      	lsls	r0, r1, #25
 8006b7e:	d5ac      	bpl.n	8006ada <_printf_i+0xe2>
 8006b80:	b2ad      	uxth	r5, r5
 8006b82:	e7aa      	b.n	8006ada <_printf_i+0xe2>
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	680d      	ldr	r5, [r1, #0]
 8006b88:	1d10      	adds	r0, r2, #4
 8006b8a:	6949      	ldr	r1, [r1, #20]
 8006b8c:	6018      	str	r0, [r3, #0]
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	062e      	lsls	r6, r5, #24
 8006b92:	d501      	bpl.n	8006b98 <_printf_i+0x1a0>
 8006b94:	6019      	str	r1, [r3, #0]
 8006b96:	e002      	b.n	8006b9e <_printf_i+0x1a6>
 8006b98:	066d      	lsls	r5, r5, #25
 8006b9a:	d5fb      	bpl.n	8006b94 <_printf_i+0x19c>
 8006b9c:	8019      	strh	r1, [r3, #0]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9e04      	ldr	r6, [sp, #16]
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	e7d2      	b.n	8006b4c <_printf_i+0x154>
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	1d11      	adds	r1, r2, #4
 8006baa:	6019      	str	r1, [r3, #0]
 8006bac:	6816      	ldr	r6, [r2, #0]
 8006bae:	2100      	movs	r1, #0
 8006bb0:	0030      	movs	r0, r6
 8006bb2:	6862      	ldr	r2, [r4, #4]
 8006bb4:	f000 fb58 	bl	8007268 <memchr>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d001      	beq.n	8006bc0 <_printf_i+0x1c8>
 8006bbc:	1b80      	subs	r0, r0, r6
 8006bbe:	6060      	str	r0, [r4, #4]
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	6123      	str	r3, [r4, #16]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9a04      	ldr	r2, [sp, #16]
 8006bc8:	7013      	strb	r3, [r2, #0]
 8006bca:	e7bf      	b.n	8006b4c <_printf_i+0x154>
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	0032      	movs	r2, r6
 8006bd0:	9906      	ldr	r1, [sp, #24]
 8006bd2:	9805      	ldr	r0, [sp, #20]
 8006bd4:	9d07      	ldr	r5, [sp, #28]
 8006bd6:	47a8      	blx	r5
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d0c1      	beq.n	8006b60 <_printf_i+0x168>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	079b      	lsls	r3, r3, #30
 8006be0:	d415      	bmi.n	8006c0e <_printf_i+0x216>
 8006be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be4:	68e0      	ldr	r0, [r4, #12]
 8006be6:	4298      	cmp	r0, r3
 8006be8:	dabc      	bge.n	8006b64 <_printf_i+0x16c>
 8006bea:	0018      	movs	r0, r3
 8006bec:	e7ba      	b.n	8006b64 <_printf_i+0x16c>
 8006bee:	0022      	movs	r2, r4
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	9906      	ldr	r1, [sp, #24]
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	9e07      	ldr	r6, [sp, #28]
 8006bf8:	3219      	adds	r2, #25
 8006bfa:	47b0      	blx	r6
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d0af      	beq.n	8006b60 <_printf_i+0x168>
 8006c00:	3501      	adds	r5, #1
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dcf0      	bgt.n	8006bee <_printf_i+0x1f6>
 8006c0c:	e7e9      	b.n	8006be2 <_printf_i+0x1ea>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	e7f7      	b.n	8006c02 <_printf_i+0x20a>
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	08007bbf 	.word	0x08007bbf
 8006c18:	08007bd0 	.word	0x08007bd0

08006c1c <_sbrk_r>:
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	b570      	push	{r4, r5, r6, lr}
 8006c20:	4d06      	ldr	r5, [pc, #24]	; (8006c3c <_sbrk_r+0x20>)
 8006c22:	0004      	movs	r4, r0
 8006c24:	0008      	movs	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fd f854 	bl	8003cd4 <_sbrk>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d103      	bne.n	8006c38 <_sbrk_r+0x1c>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d000      	beq.n	8006c38 <_sbrk_r+0x1c>
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	20000400 	.word	0x20000400

08006c40 <__swbuf_r>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	0005      	movs	r5, r0
 8006c44:	000e      	movs	r6, r1
 8006c46:	0014      	movs	r4, r2
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d004      	beq.n	8006c56 <__swbuf_r+0x16>
 8006c4c:	6983      	ldr	r3, [r0, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <__swbuf_r+0x16>
 8006c52:	f000 f9f9 	bl	8007048 <__sinit>
 8006c56:	4b22      	ldr	r3, [pc, #136]	; (8006ce0 <__swbuf_r+0xa0>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	d12e      	bne.n	8006cba <__swbuf_r+0x7a>
 8006c5c:	686c      	ldr	r4, [r5, #4]
 8006c5e:	69a3      	ldr	r3, [r4, #24]
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	071b      	lsls	r3, r3, #28
 8006c66:	d532      	bpl.n	8006cce <__swbuf_r+0x8e>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02f      	beq.n	8006cce <__swbuf_r+0x8e>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	6922      	ldr	r2, [r4, #16]
 8006c72:	b2f7      	uxtb	r7, r6
 8006c74:	1a98      	subs	r0, r3, r2
 8006c76:	6963      	ldr	r3, [r4, #20]
 8006c78:	b2f6      	uxtb	r6, r6
 8006c7a:	4283      	cmp	r3, r0
 8006c7c:	dc05      	bgt.n	8006c8a <__swbuf_r+0x4a>
 8006c7e:	0021      	movs	r1, r4
 8006c80:	0028      	movs	r0, r5
 8006c82:	f000 f93f 	bl	8006f04 <_fflush_r>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d127      	bne.n	8006cda <__swbuf_r+0x9a>
 8006c8a:	68a3      	ldr	r3, [r4, #8]
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	701f      	strb	r7, [r3, #0]
 8006c9a:	6963      	ldr	r3, [r4, #20]
 8006c9c:	4283      	cmp	r3, r0
 8006c9e:	d004      	beq.n	8006caa <__swbuf_r+0x6a>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	07db      	lsls	r3, r3, #31
 8006ca4:	d507      	bpl.n	8006cb6 <__swbuf_r+0x76>
 8006ca6:	2e0a      	cmp	r6, #10
 8006ca8:	d105      	bne.n	8006cb6 <__swbuf_r+0x76>
 8006caa:	0021      	movs	r1, r4
 8006cac:	0028      	movs	r0, r5
 8006cae:	f000 f929 	bl	8006f04 <_fflush_r>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d111      	bne.n	8006cda <__swbuf_r+0x9a>
 8006cb6:	0030      	movs	r0, r6
 8006cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <__swbuf_r+0xa4>)
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	d101      	bne.n	8006cc4 <__swbuf_r+0x84>
 8006cc0:	68ac      	ldr	r4, [r5, #8]
 8006cc2:	e7cc      	b.n	8006c5e <__swbuf_r+0x1e>
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <__swbuf_r+0xa8>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d1c9      	bne.n	8006c5e <__swbuf_r+0x1e>
 8006cca:	68ec      	ldr	r4, [r5, #12]
 8006ccc:	e7c7      	b.n	8006c5e <__swbuf_r+0x1e>
 8006cce:	0021      	movs	r1, r4
 8006cd0:	0028      	movs	r0, r5
 8006cd2:	f000 f80b 	bl	8006cec <__swsetup_r>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d0c9      	beq.n	8006c6e <__swbuf_r+0x2e>
 8006cda:	2601      	movs	r6, #1
 8006cdc:	4276      	negs	r6, r6
 8006cde:	e7ea      	b.n	8006cb6 <__swbuf_r+0x76>
 8006ce0:	08007c04 	.word	0x08007c04
 8006ce4:	08007c24 	.word	0x08007c24
 8006ce8:	08007be4 	.word	0x08007be4

08006cec <__swsetup_r>:
 8006cec:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <__swsetup_r+0xe0>)
 8006cee:	b570      	push	{r4, r5, r6, lr}
 8006cf0:	681d      	ldr	r5, [r3, #0]
 8006cf2:	0006      	movs	r6, r0
 8006cf4:	000c      	movs	r4, r1
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	d005      	beq.n	8006d06 <__swsetup_r+0x1a>
 8006cfa:	69ab      	ldr	r3, [r5, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <__swsetup_r+0x1a>
 8006d00:	0028      	movs	r0, r5
 8006d02:	f000 f9a1 	bl	8007048 <__sinit>
 8006d06:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <__swsetup_r+0xe4>)
 8006d08:	429c      	cmp	r4, r3
 8006d0a:	d10f      	bne.n	8006d2c <__swsetup_r+0x40>
 8006d0c:	686c      	ldr	r4, [r5, #4]
 8006d0e:	230c      	movs	r3, #12
 8006d10:	5ee2      	ldrsh	r2, [r4, r3]
 8006d12:	b293      	uxth	r3, r2
 8006d14:	0711      	lsls	r1, r2, #28
 8006d16:	d42d      	bmi.n	8006d74 <__swsetup_r+0x88>
 8006d18:	06d9      	lsls	r1, r3, #27
 8006d1a:	d411      	bmi.n	8006d40 <__swsetup_r+0x54>
 8006d1c:	2309      	movs	r3, #9
 8006d1e:	2001      	movs	r0, #1
 8006d20:	6033      	str	r3, [r6, #0]
 8006d22:	3337      	adds	r3, #55	; 0x37
 8006d24:	4313      	orrs	r3, r2
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	4240      	negs	r0, r0
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <__swsetup_r+0xe8>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d101      	bne.n	8006d36 <__swsetup_r+0x4a>
 8006d32:	68ac      	ldr	r4, [r5, #8]
 8006d34:	e7eb      	b.n	8006d0e <__swsetup_r+0x22>
 8006d36:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <__swsetup_r+0xec>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d1e8      	bne.n	8006d0e <__swsetup_r+0x22>
 8006d3c:	68ec      	ldr	r4, [r5, #12]
 8006d3e:	e7e6      	b.n	8006d0e <__swsetup_r+0x22>
 8006d40:	075b      	lsls	r3, r3, #29
 8006d42:	d513      	bpl.n	8006d6c <__swsetup_r+0x80>
 8006d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d46:	2900      	cmp	r1, #0
 8006d48:	d008      	beq.n	8006d5c <__swsetup_r+0x70>
 8006d4a:	0023      	movs	r3, r4
 8006d4c:	3344      	adds	r3, #68	; 0x44
 8006d4e:	4299      	cmp	r1, r3
 8006d50:	d002      	beq.n	8006d58 <__swsetup_r+0x6c>
 8006d52:	0030      	movs	r0, r6
 8006d54:	f7ff fbd6 	bl	8006504 <_free_r>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6363      	str	r3, [r4, #52]	; 0x34
 8006d5c:	2224      	movs	r2, #36	; 0x24
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	4393      	bics	r3, r2
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	2300      	movs	r3, #0
 8006d66:	6063      	str	r3, [r4, #4]
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	89a2      	ldrh	r2, [r4, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <__swsetup_r+0xa6>
 8006d7a:	21a0      	movs	r1, #160	; 0xa0
 8006d7c:	2280      	movs	r2, #128	; 0x80
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	0089      	lsls	r1, r1, #2
 8006d82:	0092      	lsls	r2, r2, #2
 8006d84:	400b      	ands	r3, r1
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <__swsetup_r+0xa6>
 8006d8a:	0021      	movs	r1, r4
 8006d8c:	0030      	movs	r0, r6
 8006d8e:	f000 fa27 	bl	80071e0 <__smakebuf_r>
 8006d92:	220c      	movs	r2, #12
 8006d94:	5ea3      	ldrsh	r3, [r4, r2]
 8006d96:	2001      	movs	r0, #1
 8006d98:	001a      	movs	r2, r3
 8006d9a:	b299      	uxth	r1, r3
 8006d9c:	4002      	ands	r2, r0
 8006d9e:	4203      	tst	r3, r0
 8006da0:	d00f      	beq.n	8006dc2 <__swsetup_r+0xd6>
 8006da2:	2200      	movs	r2, #0
 8006da4:	60a2      	str	r2, [r4, #8]
 8006da6:	6962      	ldr	r2, [r4, #20]
 8006da8:	4252      	negs	r2, r2
 8006daa:	61a2      	str	r2, [r4, #24]
 8006dac:	2000      	movs	r0, #0
 8006dae:	6922      	ldr	r2, [r4, #16]
 8006db0:	4282      	cmp	r2, r0
 8006db2:	d1ba      	bne.n	8006d2a <__swsetup_r+0x3e>
 8006db4:	060a      	lsls	r2, r1, #24
 8006db6:	d5b8      	bpl.n	8006d2a <__swsetup_r+0x3e>
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	3801      	subs	r0, #1
 8006dc0:	e7b3      	b.n	8006d2a <__swsetup_r+0x3e>
 8006dc2:	0788      	lsls	r0, r1, #30
 8006dc4:	d400      	bmi.n	8006dc8 <__swsetup_r+0xdc>
 8006dc6:	6962      	ldr	r2, [r4, #20]
 8006dc8:	60a2      	str	r2, [r4, #8]
 8006dca:	e7ef      	b.n	8006dac <__swsetup_r+0xc0>
 8006dcc:	20000014 	.word	0x20000014
 8006dd0:	08007c04 	.word	0x08007c04
 8006dd4:	08007c24 	.word	0x08007c24
 8006dd8:	08007be4 	.word	0x08007be4

08006ddc <abort>:
 8006ddc:	2006      	movs	r0, #6
 8006dde:	b510      	push	{r4, lr}
 8006de0:	f000 fa88 	bl	80072f4 <raise>
 8006de4:	2001      	movs	r0, #1
 8006de6:	f7fc ff03 	bl	8003bf0 <_exit>
	...

08006dec <__sflush_r>:
 8006dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dee:	898b      	ldrh	r3, [r1, #12]
 8006df0:	0005      	movs	r5, r0
 8006df2:	000c      	movs	r4, r1
 8006df4:	071a      	lsls	r2, r3, #28
 8006df6:	d45f      	bmi.n	8006eb8 <__sflush_r+0xcc>
 8006df8:	684a      	ldr	r2, [r1, #4]
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	dc04      	bgt.n	8006e08 <__sflush_r+0x1c>
 8006dfe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	dc01      	bgt.n	8006e08 <__sflush_r+0x1c>
 8006e04:	2000      	movs	r0, #0
 8006e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	d0fa      	beq.n	8006e04 <__sflush_r+0x18>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2180      	movs	r1, #128	; 0x80
 8006e12:	682e      	ldr	r6, [r5, #0]
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	001a      	movs	r2, r3
 8006e18:	0149      	lsls	r1, r1, #5
 8006e1a:	400a      	ands	r2, r1
 8006e1c:	420b      	tst	r3, r1
 8006e1e:	d034      	beq.n	8006e8a <__sflush_r+0x9e>
 8006e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	075b      	lsls	r3, r3, #29
 8006e26:	d506      	bpl.n	8006e36 <__sflush_r+0x4a>
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	1ac0      	subs	r0, r0, r3
 8006e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <__sflush_r+0x4a>
 8006e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	0002      	movs	r2, r0
 8006e38:	6a21      	ldr	r1, [r4, #32]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	0028      	movs	r0, r5
 8006e3e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006e40:	47b8      	blx	r7
 8006e42:	89a1      	ldrh	r1, [r4, #12]
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d106      	bne.n	8006e56 <__sflush_r+0x6a>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	2b1d      	cmp	r3, #29
 8006e4c:	d831      	bhi.n	8006eb2 <__sflush_r+0xc6>
 8006e4e:	4a2c      	ldr	r2, [pc, #176]	; (8006f00 <__sflush_r+0x114>)
 8006e50:	40da      	lsrs	r2, r3
 8006e52:	07d3      	lsls	r3, r2, #31
 8006e54:	d52d      	bpl.n	8006eb2 <__sflush_r+0xc6>
 8006e56:	2300      	movs	r3, #0
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	04cb      	lsls	r3, r1, #19
 8006e60:	d505      	bpl.n	8006e6e <__sflush_r+0x82>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d102      	bne.n	8006e6c <__sflush_r+0x80>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d100      	bne.n	8006e6e <__sflush_r+0x82>
 8006e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e70:	602e      	str	r6, [r5, #0]
 8006e72:	2900      	cmp	r1, #0
 8006e74:	d0c6      	beq.n	8006e04 <__sflush_r+0x18>
 8006e76:	0023      	movs	r3, r4
 8006e78:	3344      	adds	r3, #68	; 0x44
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d002      	beq.n	8006e84 <__sflush_r+0x98>
 8006e7e:	0028      	movs	r0, r5
 8006e80:	f7ff fb40 	bl	8006504 <_free_r>
 8006e84:	2000      	movs	r0, #0
 8006e86:	6360      	str	r0, [r4, #52]	; 0x34
 8006e88:	e7bd      	b.n	8006e06 <__sflush_r+0x1a>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	0028      	movs	r0, r5
 8006e8e:	6a21      	ldr	r1, [r4, #32]
 8006e90:	47b8      	blx	r7
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	d1c5      	bne.n	8006e22 <__sflush_r+0x36>
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0c2      	beq.n	8006e22 <__sflush_r+0x36>
 8006e9c:	2b1d      	cmp	r3, #29
 8006e9e:	d001      	beq.n	8006ea4 <__sflush_r+0xb8>
 8006ea0:	2b16      	cmp	r3, #22
 8006ea2:	d101      	bne.n	8006ea8 <__sflush_r+0xbc>
 8006ea4:	602e      	str	r6, [r5, #0]
 8006ea6:	e7ad      	b.n	8006e04 <__sflush_r+0x18>
 8006ea8:	2340      	movs	r3, #64	; 0x40
 8006eaa:	89a2      	ldrh	r2, [r4, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	e7a9      	b.n	8006e06 <__sflush_r+0x1a>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	e7fa      	b.n	8006eae <__sflush_r+0xc2>
 8006eb8:	690f      	ldr	r7, [r1, #16]
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	d0a2      	beq.n	8006e04 <__sflush_r+0x18>
 8006ebe:	680a      	ldr	r2, [r1, #0]
 8006ec0:	600f      	str	r7, [r1, #0]
 8006ec2:	1bd2      	subs	r2, r2, r7
 8006ec4:	9201      	str	r2, [sp, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	079b      	lsls	r3, r3, #30
 8006eca:	d100      	bne.n	8006ece <__sflush_r+0xe2>
 8006ecc:	694a      	ldr	r2, [r1, #20]
 8006ece:	60a2      	str	r2, [r4, #8]
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dc00      	bgt.n	8006ed8 <__sflush_r+0xec>
 8006ed6:	e795      	b.n	8006e04 <__sflush_r+0x18>
 8006ed8:	003a      	movs	r2, r7
 8006eda:	0028      	movs	r0, r5
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	6a21      	ldr	r1, [r4, #32]
 8006ee0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ee2:	47b0      	blx	r6
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	dc06      	bgt.n	8006ef6 <__sflush_r+0x10a>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	2001      	movs	r0, #1
 8006eec:	89a2      	ldrh	r2, [r4, #12]
 8006eee:	4240      	negs	r0, r0
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	e787      	b.n	8006e06 <__sflush_r+0x1a>
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	183f      	adds	r7, r7, r0
 8006efa:	1a1b      	subs	r3, r3, r0
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	e7e7      	b.n	8006ed0 <__sflush_r+0xe4>
 8006f00:	20400001 	.word	0x20400001

08006f04 <_fflush_r>:
 8006f04:	690b      	ldr	r3, [r1, #16]
 8006f06:	b570      	push	{r4, r5, r6, lr}
 8006f08:	0005      	movs	r5, r0
 8006f0a:	000c      	movs	r4, r1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <_fflush_r+0x12>
 8006f10:	2500      	movs	r5, #0
 8006f12:	0028      	movs	r0, r5
 8006f14:	bd70      	pop	{r4, r5, r6, pc}
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d004      	beq.n	8006f24 <_fflush_r+0x20>
 8006f1a:	6983      	ldr	r3, [r0, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <_fflush_r+0x20>
 8006f20:	f000 f892 	bl	8007048 <__sinit>
 8006f24:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <_fflush_r+0x74>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d11b      	bne.n	8006f62 <_fflush_r+0x5e>
 8006f2a:	686c      	ldr	r4, [r5, #4]
 8006f2c:	220c      	movs	r2, #12
 8006f2e:	5ea3      	ldrsh	r3, [r4, r2]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0ed      	beq.n	8006f10 <_fflush_r+0xc>
 8006f34:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f36:	07d2      	lsls	r2, r2, #31
 8006f38:	d404      	bmi.n	8006f44 <_fflush_r+0x40>
 8006f3a:	059b      	lsls	r3, r3, #22
 8006f3c:	d402      	bmi.n	8006f44 <_fflush_r+0x40>
 8006f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f40:	f000 f923 	bl	800718a <__retarget_lock_acquire_recursive>
 8006f44:	0028      	movs	r0, r5
 8006f46:	0021      	movs	r1, r4
 8006f48:	f7ff ff50 	bl	8006dec <__sflush_r>
 8006f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f4e:	0005      	movs	r5, r0
 8006f50:	07db      	lsls	r3, r3, #31
 8006f52:	d4de      	bmi.n	8006f12 <_fflush_r+0xe>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	059b      	lsls	r3, r3, #22
 8006f58:	d4db      	bmi.n	8006f12 <_fflush_r+0xe>
 8006f5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f5c:	f000 f916 	bl	800718c <__retarget_lock_release_recursive>
 8006f60:	e7d7      	b.n	8006f12 <_fflush_r+0xe>
 8006f62:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <_fflush_r+0x78>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d101      	bne.n	8006f6c <_fflush_r+0x68>
 8006f68:	68ac      	ldr	r4, [r5, #8]
 8006f6a:	e7df      	b.n	8006f2c <_fflush_r+0x28>
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <_fflush_r+0x7c>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d1dc      	bne.n	8006f2c <_fflush_r+0x28>
 8006f72:	68ec      	ldr	r4, [r5, #12]
 8006f74:	e7da      	b.n	8006f2c <_fflush_r+0x28>
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	08007c04 	.word	0x08007c04
 8006f7c:	08007c24 	.word	0x08007c24
 8006f80:	08007be4 	.word	0x08007be4

08006f84 <std>:
 8006f84:	2300      	movs	r3, #0
 8006f86:	b510      	push	{r4, lr}
 8006f88:	0004      	movs	r4, r0
 8006f8a:	6003      	str	r3, [r0, #0]
 8006f8c:	6043      	str	r3, [r0, #4]
 8006f8e:	6083      	str	r3, [r0, #8]
 8006f90:	8181      	strh	r1, [r0, #12]
 8006f92:	6643      	str	r3, [r0, #100]	; 0x64
 8006f94:	0019      	movs	r1, r3
 8006f96:	81c2      	strh	r2, [r0, #14]
 8006f98:	6103      	str	r3, [r0, #16]
 8006f9a:	6143      	str	r3, [r0, #20]
 8006f9c:	6183      	str	r3, [r0, #24]
 8006f9e:	2208      	movs	r2, #8
 8006fa0:	305c      	adds	r0, #92	; 0x5c
 8006fa2:	f7ff fa30 	bl	8006406 <memset>
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <std+0x38>)
 8006fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x3c>)
 8006fac:	6224      	str	r4, [r4, #32]
 8006fae:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <std+0x40>)
 8006fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <std+0x44>)
 8006fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	08007335 	.word	0x08007335
 8006fc0:	0800735d 	.word	0x0800735d
 8006fc4:	08007395 	.word	0x08007395
 8006fc8:	080073c1 	.word	0x080073c1

08006fcc <_cleanup_r>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	4902      	ldr	r1, [pc, #8]	; (8006fd8 <_cleanup_r+0xc>)
 8006fd0:	f000 f8ba 	bl	8007148 <_fwalk_reent>
 8006fd4:	bd10      	pop	{r4, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	08006f05 	.word	0x08006f05

08006fdc <__sfmoreglue>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	2568      	movs	r5, #104	; 0x68
 8006fe0:	1e4a      	subs	r2, r1, #1
 8006fe2:	4355      	muls	r5, r2
 8006fe4:	000e      	movs	r6, r1
 8006fe6:	0029      	movs	r1, r5
 8006fe8:	3174      	adds	r1, #116	; 0x74
 8006fea:	f7ff fad5 	bl	8006598 <_malloc_r>
 8006fee:	1e04      	subs	r4, r0, #0
 8006ff0:	d008      	beq.n	8007004 <__sfmoreglue+0x28>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	002a      	movs	r2, r5
 8006ff6:	6001      	str	r1, [r0, #0]
 8006ff8:	6046      	str	r6, [r0, #4]
 8006ffa:	300c      	adds	r0, #12
 8006ffc:	60a0      	str	r0, [r4, #8]
 8006ffe:	3268      	adds	r2, #104	; 0x68
 8007000:	f7ff fa01 	bl	8006406 <memset>
 8007004:	0020      	movs	r0, r4
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__sfp_lock_acquire>:
 8007008:	b510      	push	{r4, lr}
 800700a:	4802      	ldr	r0, [pc, #8]	; (8007014 <__sfp_lock_acquire+0xc>)
 800700c:	f000 f8bd 	bl	800718a <__retarget_lock_acquire_recursive>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	200003ff 	.word	0x200003ff

08007018 <__sfp_lock_release>:
 8007018:	b510      	push	{r4, lr}
 800701a:	4802      	ldr	r0, [pc, #8]	; (8007024 <__sfp_lock_release+0xc>)
 800701c:	f000 f8b6 	bl	800718c <__retarget_lock_release_recursive>
 8007020:	bd10      	pop	{r4, pc}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	200003ff 	.word	0x200003ff

08007028 <__sinit_lock_acquire>:
 8007028:	b510      	push	{r4, lr}
 800702a:	4802      	ldr	r0, [pc, #8]	; (8007034 <__sinit_lock_acquire+0xc>)
 800702c:	f000 f8ad 	bl	800718a <__retarget_lock_acquire_recursive>
 8007030:	bd10      	pop	{r4, pc}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	200003fa 	.word	0x200003fa

08007038 <__sinit_lock_release>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4802      	ldr	r0, [pc, #8]	; (8007044 <__sinit_lock_release+0xc>)
 800703c:	f000 f8a6 	bl	800718c <__retarget_lock_release_recursive>
 8007040:	bd10      	pop	{r4, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	200003fa 	.word	0x200003fa

08007048 <__sinit>:
 8007048:	b513      	push	{r0, r1, r4, lr}
 800704a:	0004      	movs	r4, r0
 800704c:	f7ff ffec 	bl	8007028 <__sinit_lock_acquire>
 8007050:	69a3      	ldr	r3, [r4, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <__sinit+0x14>
 8007056:	f7ff ffef 	bl	8007038 <__sinit_lock_release>
 800705a:	bd13      	pop	{r0, r1, r4, pc}
 800705c:	64a3      	str	r3, [r4, #72]	; 0x48
 800705e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007060:	6523      	str	r3, [r4, #80]	; 0x50
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <__sinit+0x68>)
 8007064:	4a13      	ldr	r2, [pc, #76]	; (80070b4 <__sinit+0x6c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	62a2      	str	r2, [r4, #40]	; 0x28
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	42a3      	cmp	r3, r4
 800706e:	d101      	bne.n	8007074 <__sinit+0x2c>
 8007070:	2301      	movs	r3, #1
 8007072:	61a3      	str	r3, [r4, #24]
 8007074:	0020      	movs	r0, r4
 8007076:	f000 f81f 	bl	80070b8 <__sfp>
 800707a:	6060      	str	r0, [r4, #4]
 800707c:	0020      	movs	r0, r4
 800707e:	f000 f81b 	bl	80070b8 <__sfp>
 8007082:	60a0      	str	r0, [r4, #8]
 8007084:	0020      	movs	r0, r4
 8007086:	f000 f817 	bl	80070b8 <__sfp>
 800708a:	2200      	movs	r2, #0
 800708c:	2104      	movs	r1, #4
 800708e:	60e0      	str	r0, [r4, #12]
 8007090:	6860      	ldr	r0, [r4, #4]
 8007092:	f7ff ff77 	bl	8006f84 <std>
 8007096:	2201      	movs	r2, #1
 8007098:	2109      	movs	r1, #9
 800709a:	68a0      	ldr	r0, [r4, #8]
 800709c:	f7ff ff72 	bl	8006f84 <std>
 80070a0:	2202      	movs	r2, #2
 80070a2:	2112      	movs	r1, #18
 80070a4:	68e0      	ldr	r0, [r4, #12]
 80070a6:	f7ff ff6d 	bl	8006f84 <std>
 80070aa:	2301      	movs	r3, #1
 80070ac:	61a3      	str	r3, [r4, #24]
 80070ae:	e7d2      	b.n	8007056 <__sinit+0xe>
 80070b0:	08007af8 	.word	0x08007af8
 80070b4:	08006fcd 	.word	0x08006fcd

080070b8 <__sfp>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	0007      	movs	r7, r0
 80070bc:	f7ff ffa4 	bl	8007008 <__sfp_lock_acquire>
 80070c0:	4b1f      	ldr	r3, [pc, #124]	; (8007140 <__sfp+0x88>)
 80070c2:	681e      	ldr	r6, [r3, #0]
 80070c4:	69b3      	ldr	r3, [r6, #24]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <__sfp+0x18>
 80070ca:	0030      	movs	r0, r6
 80070cc:	f7ff ffbc 	bl	8007048 <__sinit>
 80070d0:	3648      	adds	r6, #72	; 0x48
 80070d2:	68b4      	ldr	r4, [r6, #8]
 80070d4:	6873      	ldr	r3, [r6, #4]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	d504      	bpl.n	80070e4 <__sfp+0x2c>
 80070da:	6833      	ldr	r3, [r6, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d022      	beq.n	8007126 <__sfp+0x6e>
 80070e0:	6836      	ldr	r6, [r6, #0]
 80070e2:	e7f6      	b.n	80070d2 <__sfp+0x1a>
 80070e4:	220c      	movs	r2, #12
 80070e6:	5ea5      	ldrsh	r5, [r4, r2]
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	d11a      	bne.n	8007122 <__sfp+0x6a>
 80070ec:	0020      	movs	r0, r4
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <__sfp+0x8c>)
 80070f0:	3058      	adds	r0, #88	; 0x58
 80070f2:	60e3      	str	r3, [r4, #12]
 80070f4:	6665      	str	r5, [r4, #100]	; 0x64
 80070f6:	f000 f847 	bl	8007188 <__retarget_lock_init_recursive>
 80070fa:	f7ff ff8d 	bl	8007018 <__sfp_lock_release>
 80070fe:	0020      	movs	r0, r4
 8007100:	2208      	movs	r2, #8
 8007102:	0029      	movs	r1, r5
 8007104:	6025      	str	r5, [r4, #0]
 8007106:	60a5      	str	r5, [r4, #8]
 8007108:	6065      	str	r5, [r4, #4]
 800710a:	6125      	str	r5, [r4, #16]
 800710c:	6165      	str	r5, [r4, #20]
 800710e:	61a5      	str	r5, [r4, #24]
 8007110:	305c      	adds	r0, #92	; 0x5c
 8007112:	f7ff f978 	bl	8006406 <memset>
 8007116:	6365      	str	r5, [r4, #52]	; 0x34
 8007118:	63a5      	str	r5, [r4, #56]	; 0x38
 800711a:	64a5      	str	r5, [r4, #72]	; 0x48
 800711c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800711e:	0020      	movs	r0, r4
 8007120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007122:	3468      	adds	r4, #104	; 0x68
 8007124:	e7d7      	b.n	80070d6 <__sfp+0x1e>
 8007126:	2104      	movs	r1, #4
 8007128:	0038      	movs	r0, r7
 800712a:	f7ff ff57 	bl	8006fdc <__sfmoreglue>
 800712e:	1e04      	subs	r4, r0, #0
 8007130:	6030      	str	r0, [r6, #0]
 8007132:	d1d5      	bne.n	80070e0 <__sfp+0x28>
 8007134:	f7ff ff70 	bl	8007018 <__sfp_lock_release>
 8007138:	230c      	movs	r3, #12
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	e7ef      	b.n	800711e <__sfp+0x66>
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	08007af8 	.word	0x08007af8
 8007144:	ffff0001 	.word	0xffff0001

08007148 <_fwalk_reent>:
 8007148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800714a:	0004      	movs	r4, r0
 800714c:	0006      	movs	r6, r0
 800714e:	2700      	movs	r7, #0
 8007150:	9101      	str	r1, [sp, #4]
 8007152:	3448      	adds	r4, #72	; 0x48
 8007154:	6863      	ldr	r3, [r4, #4]
 8007156:	68a5      	ldr	r5, [r4, #8]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	9b00      	ldr	r3, [sp, #0]
 800715c:	3b01      	subs	r3, #1
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	d504      	bpl.n	800716c <_fwalk_reent+0x24>
 8007162:	6824      	ldr	r4, [r4, #0]
 8007164:	2c00      	cmp	r4, #0
 8007166:	d1f5      	bne.n	8007154 <_fwalk_reent+0xc>
 8007168:	0038      	movs	r0, r7
 800716a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800716c:	89ab      	ldrh	r3, [r5, #12]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d908      	bls.n	8007184 <_fwalk_reent+0x3c>
 8007172:	220e      	movs	r2, #14
 8007174:	5eab      	ldrsh	r3, [r5, r2]
 8007176:	3301      	adds	r3, #1
 8007178:	d004      	beq.n	8007184 <_fwalk_reent+0x3c>
 800717a:	0029      	movs	r1, r5
 800717c:	0030      	movs	r0, r6
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	4798      	blx	r3
 8007182:	4307      	orrs	r7, r0
 8007184:	3568      	adds	r5, #104	; 0x68
 8007186:	e7e8      	b.n	800715a <_fwalk_reent+0x12>

08007188 <__retarget_lock_init_recursive>:
 8007188:	4770      	bx	lr

0800718a <__retarget_lock_acquire_recursive>:
 800718a:	4770      	bx	lr

0800718c <__retarget_lock_release_recursive>:
 800718c:	4770      	bx	lr
	...

08007190 <__swhatbuf_r>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	000e      	movs	r6, r1
 8007194:	001d      	movs	r5, r3
 8007196:	230e      	movs	r3, #14
 8007198:	5ec9      	ldrsh	r1, [r1, r3]
 800719a:	0014      	movs	r4, r2
 800719c:	b096      	sub	sp, #88	; 0x58
 800719e:	2900      	cmp	r1, #0
 80071a0:	da07      	bge.n	80071b2 <__swhatbuf_r+0x22>
 80071a2:	2300      	movs	r3, #0
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	89b3      	ldrh	r3, [r6, #12]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	d411      	bmi.n	80071d0 <__swhatbuf_r+0x40>
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	e00f      	b.n	80071d2 <__swhatbuf_r+0x42>
 80071b2:	466a      	mov	r2, sp
 80071b4:	f000 f930 	bl	8007418 <_fstat_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dbf2      	blt.n	80071a2 <__swhatbuf_r+0x12>
 80071bc:	23f0      	movs	r3, #240	; 0xf0
 80071be:	9901      	ldr	r1, [sp, #4]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	4019      	ands	r1, r3
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <__swhatbuf_r+0x4c>)
 80071c6:	18c9      	adds	r1, r1, r3
 80071c8:	424b      	negs	r3, r1
 80071ca:	4159      	adcs	r1, r3
 80071cc:	6029      	str	r1, [r5, #0]
 80071ce:	e7ed      	b.n	80071ac <__swhatbuf_r+0x1c>
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	2000      	movs	r0, #0
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	b016      	add	sp, #88	; 0x58
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	ffffe000 	.word	0xffffe000

080071e0 <__smakebuf_r>:
 80071e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e2:	2602      	movs	r6, #2
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	0005      	movs	r5, r0
 80071e8:	000c      	movs	r4, r1
 80071ea:	4233      	tst	r3, r6
 80071ec:	d006      	beq.n	80071fc <__smakebuf_r+0x1c>
 80071ee:	0023      	movs	r3, r4
 80071f0:	3347      	adds	r3, #71	; 0x47
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	2301      	movs	r3, #1
 80071f8:	6163      	str	r3, [r4, #20]
 80071fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80071fc:	466a      	mov	r2, sp
 80071fe:	ab01      	add	r3, sp, #4
 8007200:	f7ff ffc6 	bl	8007190 <__swhatbuf_r>
 8007204:	9900      	ldr	r1, [sp, #0]
 8007206:	0007      	movs	r7, r0
 8007208:	0028      	movs	r0, r5
 800720a:	f7ff f9c5 	bl	8006598 <_malloc_r>
 800720e:	2800      	cmp	r0, #0
 8007210:	d108      	bne.n	8007224 <__smakebuf_r+0x44>
 8007212:	220c      	movs	r2, #12
 8007214:	5ea3      	ldrsh	r3, [r4, r2]
 8007216:	059a      	lsls	r2, r3, #22
 8007218:	d4ef      	bmi.n	80071fa <__smakebuf_r+0x1a>
 800721a:	2203      	movs	r2, #3
 800721c:	4393      	bics	r3, r2
 800721e:	431e      	orrs	r6, r3
 8007220:	81a6      	strh	r6, [r4, #12]
 8007222:	e7e4      	b.n	80071ee <__smakebuf_r+0xe>
 8007224:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <__smakebuf_r+0x84>)
 8007226:	62ab      	str	r3, [r5, #40]	; 0x28
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	89a2      	ldrh	r2, [r4, #12]
 800722c:	6020      	str	r0, [r4, #0]
 800722e:	4313      	orrs	r3, r2
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	9b00      	ldr	r3, [sp, #0]
 8007234:	6120      	str	r0, [r4, #16]
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	9b01      	ldr	r3, [sp, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00d      	beq.n	800725a <__smakebuf_r+0x7a>
 800723e:	0028      	movs	r0, r5
 8007240:	230e      	movs	r3, #14
 8007242:	5ee1      	ldrsh	r1, [r4, r3]
 8007244:	f000 f8fa 	bl	800743c <_isatty_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	d006      	beq.n	800725a <__smakebuf_r+0x7a>
 800724c:	2203      	movs	r2, #3
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	4393      	bics	r3, r2
 8007252:	001a      	movs	r2, r3
 8007254:	2301      	movs	r3, #1
 8007256:	4313      	orrs	r3, r2
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	89a0      	ldrh	r0, [r4, #12]
 800725c:	4307      	orrs	r7, r0
 800725e:	81a7      	strh	r7, [r4, #12]
 8007260:	e7cb      	b.n	80071fa <__smakebuf_r+0x1a>
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	08006fcd 	.word	0x08006fcd

08007268 <memchr>:
 8007268:	b2c9      	uxtb	r1, r1
 800726a:	1882      	adds	r2, r0, r2
 800726c:	4290      	cmp	r0, r2
 800726e:	d101      	bne.n	8007274 <memchr+0xc>
 8007270:	2000      	movs	r0, #0
 8007272:	4770      	bx	lr
 8007274:	7803      	ldrb	r3, [r0, #0]
 8007276:	428b      	cmp	r3, r1
 8007278:	d0fb      	beq.n	8007272 <memchr+0xa>
 800727a:	3001      	adds	r0, #1
 800727c:	e7f6      	b.n	800726c <memchr+0x4>
	...

08007280 <__malloc_lock>:
 8007280:	b510      	push	{r4, lr}
 8007282:	4802      	ldr	r0, [pc, #8]	; (800728c <__malloc_lock+0xc>)
 8007284:	f7ff ff81 	bl	800718a <__retarget_lock_acquire_recursive>
 8007288:	bd10      	pop	{r4, pc}
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	200003fb 	.word	0x200003fb

08007290 <__malloc_unlock>:
 8007290:	b510      	push	{r4, lr}
 8007292:	4802      	ldr	r0, [pc, #8]	; (800729c <__malloc_unlock+0xc>)
 8007294:	f7ff ff7a 	bl	800718c <__retarget_lock_release_recursive>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	200003fb 	.word	0x200003fb

080072a0 <_raise_r>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	0004      	movs	r4, r0
 80072a4:	000d      	movs	r5, r1
 80072a6:	291f      	cmp	r1, #31
 80072a8:	d904      	bls.n	80072b4 <_raise_r+0x14>
 80072aa:	2316      	movs	r3, #22
 80072ac:	6003      	str	r3, [r0, #0]
 80072ae:	2001      	movs	r0, #1
 80072b0:	4240      	negs	r0, r0
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <_raise_r+0x24>
 80072ba:	008a      	lsls	r2, r1, #2
 80072bc:	189b      	adds	r3, r3, r2
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	2a00      	cmp	r2, #0
 80072c2:	d108      	bne.n	80072d6 <_raise_r+0x36>
 80072c4:	0020      	movs	r0, r4
 80072c6:	f000 f831 	bl	800732c <_getpid_r>
 80072ca:	002a      	movs	r2, r5
 80072cc:	0001      	movs	r1, r0
 80072ce:	0020      	movs	r0, r4
 80072d0:	f000 f81a 	bl	8007308 <_kill_r>
 80072d4:	e7ed      	b.n	80072b2 <_raise_r+0x12>
 80072d6:	2000      	movs	r0, #0
 80072d8:	2a01      	cmp	r2, #1
 80072da:	d0ea      	beq.n	80072b2 <_raise_r+0x12>
 80072dc:	1c51      	adds	r1, r2, #1
 80072de:	d103      	bne.n	80072e8 <_raise_r+0x48>
 80072e0:	2316      	movs	r3, #22
 80072e2:	3001      	adds	r0, #1
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	e7e4      	b.n	80072b2 <_raise_r+0x12>
 80072e8:	2400      	movs	r4, #0
 80072ea:	0028      	movs	r0, r5
 80072ec:	601c      	str	r4, [r3, #0]
 80072ee:	4790      	blx	r2
 80072f0:	0020      	movs	r0, r4
 80072f2:	e7de      	b.n	80072b2 <_raise_r+0x12>

080072f4 <raise>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	4b03      	ldr	r3, [pc, #12]	; (8007304 <raise+0x10>)
 80072f8:	0001      	movs	r1, r0
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	f7ff ffd0 	bl	80072a0 <_raise_r>
 8007300:	bd10      	pop	{r4, pc}
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	20000014 	.word	0x20000014

08007308 <_kill_r>:
 8007308:	2300      	movs	r3, #0
 800730a:	b570      	push	{r4, r5, r6, lr}
 800730c:	4d06      	ldr	r5, [pc, #24]	; (8007328 <_kill_r+0x20>)
 800730e:	0004      	movs	r4, r0
 8007310:	0008      	movs	r0, r1
 8007312:	0011      	movs	r1, r2
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	f7fc fc5b 	bl	8003bd0 <_kill>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d103      	bne.n	8007326 <_kill_r+0x1e>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d000      	beq.n	8007326 <_kill_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	20000400 	.word	0x20000400

0800732c <_getpid_r>:
 800732c:	b510      	push	{r4, lr}
 800732e:	f7fc fc49 	bl	8003bc4 <_getpid>
 8007332:	bd10      	pop	{r4, pc}

08007334 <__sread>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	000c      	movs	r4, r1
 8007338:	250e      	movs	r5, #14
 800733a:	5f49      	ldrsh	r1, [r1, r5]
 800733c:	f000 f8a4 	bl	8007488 <_read_r>
 8007340:	2800      	cmp	r0, #0
 8007342:	db03      	blt.n	800734c <__sread+0x18>
 8007344:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007346:	181b      	adds	r3, r3, r0
 8007348:	6563      	str	r3, [r4, #84]	; 0x54
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	4a02      	ldr	r2, [pc, #8]	; (8007358 <__sread+0x24>)
 8007350:	4013      	ands	r3, r2
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	e7f9      	b.n	800734a <__sread+0x16>
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	ffffefff 	.word	0xffffefff

0800735c <__swrite>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	001f      	movs	r7, r3
 8007360:	898b      	ldrh	r3, [r1, #12]
 8007362:	0005      	movs	r5, r0
 8007364:	000c      	movs	r4, r1
 8007366:	0016      	movs	r6, r2
 8007368:	05db      	lsls	r3, r3, #23
 800736a:	d505      	bpl.n	8007378 <__swrite+0x1c>
 800736c:	230e      	movs	r3, #14
 800736e:	5ec9      	ldrsh	r1, [r1, r3]
 8007370:	2200      	movs	r2, #0
 8007372:	2302      	movs	r3, #2
 8007374:	f000 f874 	bl	8007460 <_lseek_r>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	4a05      	ldr	r2, [pc, #20]	; (8007390 <__swrite+0x34>)
 800737c:	0028      	movs	r0, r5
 800737e:	4013      	ands	r3, r2
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	0032      	movs	r2, r6
 8007384:	230e      	movs	r3, #14
 8007386:	5ee1      	ldrsh	r1, [r4, r3]
 8007388:	003b      	movs	r3, r7
 800738a:	f000 f81f 	bl	80073cc <_write_r>
 800738e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007390:	ffffefff 	.word	0xffffefff

08007394 <__sseek>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	000c      	movs	r4, r1
 8007398:	250e      	movs	r5, #14
 800739a:	5f49      	ldrsh	r1, [r1, r5]
 800739c:	f000 f860 	bl	8007460 <_lseek_r>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	1c42      	adds	r2, r0, #1
 80073a4:	d103      	bne.n	80073ae <__sseek+0x1a>
 80073a6:	4a05      	ldr	r2, [pc, #20]	; (80073bc <__sseek+0x28>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	0152      	lsls	r2, r2, #5
 80073b2:	4313      	orrs	r3, r2
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	6560      	str	r0, [r4, #84]	; 0x54
 80073b8:	e7f8      	b.n	80073ac <__sseek+0x18>
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	ffffefff 	.word	0xffffefff

080073c0 <__sclose>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	230e      	movs	r3, #14
 80073c4:	5ec9      	ldrsh	r1, [r1, r3]
 80073c6:	f000 f815 	bl	80073f4 <_close_r>
 80073ca:	bd10      	pop	{r4, pc}

080073cc <_write_r>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	0004      	movs	r4, r0
 80073d0:	0008      	movs	r0, r1
 80073d2:	0011      	movs	r1, r2
 80073d4:	001a      	movs	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	4d05      	ldr	r5, [pc, #20]	; (80073f0 <_write_r+0x24>)
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7fc fc31 	bl	8003c42 <_write>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d103      	bne.n	80073ec <_write_r+0x20>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d000      	beq.n	80073ec <_write_r+0x20>
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	bd70      	pop	{r4, r5, r6, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	20000400 	.word	0x20000400

080073f4 <_close_r>:
 80073f4:	2300      	movs	r3, #0
 80073f6:	b570      	push	{r4, r5, r6, lr}
 80073f8:	4d06      	ldr	r5, [pc, #24]	; (8007414 <_close_r+0x20>)
 80073fa:	0004      	movs	r4, r0
 80073fc:	0008      	movs	r0, r1
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	f7fc fc3b 	bl	8003c7a <_close>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d103      	bne.n	8007410 <_close_r+0x1c>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d000      	beq.n	8007410 <_close_r+0x1c>
 800740e:	6023      	str	r3, [r4, #0]
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	20000400 	.word	0x20000400

08007418 <_fstat_r>:
 8007418:	2300      	movs	r3, #0
 800741a:	b570      	push	{r4, r5, r6, lr}
 800741c:	4d06      	ldr	r5, [pc, #24]	; (8007438 <_fstat_r+0x20>)
 800741e:	0004      	movs	r4, r0
 8007420:	0008      	movs	r0, r1
 8007422:	0011      	movs	r1, r2
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f7fc fc32 	bl	8003c8e <_fstat>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d103      	bne.n	8007436 <_fstat_r+0x1e>
 800742e:	682b      	ldr	r3, [r5, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d000      	beq.n	8007436 <_fstat_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	20000400 	.word	0x20000400

0800743c <_isatty_r>:
 800743c:	2300      	movs	r3, #0
 800743e:	b570      	push	{r4, r5, r6, lr}
 8007440:	4d06      	ldr	r5, [pc, #24]	; (800745c <_isatty_r+0x20>)
 8007442:	0004      	movs	r4, r0
 8007444:	0008      	movs	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fc fc2f 	bl	8003caa <_isatty>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d103      	bne.n	8007458 <_isatty_r+0x1c>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d000      	beq.n	8007458 <_isatty_r+0x1c>
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	bd70      	pop	{r4, r5, r6, pc}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	20000400 	.word	0x20000400

08007460 <_lseek_r>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	0004      	movs	r4, r0
 8007464:	0008      	movs	r0, r1
 8007466:	0011      	movs	r1, r2
 8007468:	001a      	movs	r2, r3
 800746a:	2300      	movs	r3, #0
 800746c:	4d05      	ldr	r5, [pc, #20]	; (8007484 <_lseek_r+0x24>)
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	f7fc fc24 	bl	8003cbc <_lseek>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d103      	bne.n	8007480 <_lseek_r+0x20>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d000      	beq.n	8007480 <_lseek_r+0x20>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd70      	pop	{r4, r5, r6, pc}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	20000400 	.word	0x20000400

08007488 <_read_r>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	0004      	movs	r4, r0
 800748c:	0008      	movs	r0, r1
 800748e:	0011      	movs	r1, r2
 8007490:	001a      	movs	r2, r3
 8007492:	2300      	movs	r3, #0
 8007494:	4d05      	ldr	r5, [pc, #20]	; (80074ac <_read_r+0x24>)
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7fc fbb6 	bl	8003c08 <_read>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d103      	bne.n	80074a8 <_read_r+0x20>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d000      	beq.n	80074a8 <_read_r+0x20>
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	20000400 	.word	0x20000400

080074b0 <_init>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b6:	bc08      	pop	{r3}
 80074b8:	469e      	mov	lr, r3
 80074ba:	4770      	bx	lr

080074bc <_fini>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr
