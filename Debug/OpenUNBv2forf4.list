
OpenUNBv2forf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000014  08003d70  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08003d70  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbb4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002950  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006d93  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b38  00000000  00000000  00037800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c5a4  00000000  00000000  00039338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b21b  00000000  00000000  000458dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003c969  00000000  00000000  00050af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0008d460  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f8c  00000000  00000000  0008d4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003598 	.word	0x08003598

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003598 	.word	0x08003598

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_ldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d115      	bne.n	8000260 <__aeabi_ldivmod+0x30>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d113      	bne.n	8000260 <__aeabi_ldivmod+0x30>
 8000238:	2900      	cmp	r1, #0
 800023a:	db06      	blt.n	800024a <__aeabi_ldivmod+0x1a>
 800023c:	dc01      	bgt.n	8000242 <__aeabi_ldivmod+0x12>
 800023e:	2800      	cmp	r0, #0
 8000240:	d006      	beq.n	8000250 <__aeabi_ldivmod+0x20>
 8000242:	2000      	movs	r0, #0
 8000244:	43c0      	mvns	r0, r0
 8000246:	0841      	lsrs	r1, r0, #1
 8000248:	e002      	b.n	8000250 <__aeabi_ldivmod+0x20>
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	0609      	lsls	r1, r1, #24
 800024e:	2000      	movs	r0, #0
 8000250:	b407      	push	{r0, r1, r2}
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <__aeabi_ldivmod+0x2c>)
 8000254:	a101      	add	r1, pc, #4	; (adr r1, 800025c <__aeabi_ldivmod+0x2c>)
 8000256:	1840      	adds	r0, r0, r1
 8000258:	9002      	str	r0, [sp, #8]
 800025a:	bd03      	pop	{r0, r1, pc}
 800025c:	ffffffd1 	.word	0xffffffd1
 8000260:	b403      	push	{r0, r1}
 8000262:	4668      	mov	r0, sp
 8000264:	b501      	push	{r0, lr}
 8000266:	9802      	ldr	r0, [sp, #8]
 8000268:	f000 f91a 	bl	80004a0 <__gnu_ldivmod_helper>
 800026c:	9b01      	ldr	r3, [sp, #4]
 800026e:	469e      	mov	lr, r3
 8000270:	b002      	add	sp, #8
 8000272:	bc0c      	pop	{r2, r3}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_uldivmod>:
 8000278:	2b00      	cmp	r3, #0
 800027a:	d111      	bne.n	80002a0 <__aeabi_uldivmod+0x28>
 800027c:	2a00      	cmp	r2, #0
 800027e:	d10f      	bne.n	80002a0 <__aeabi_uldivmod+0x28>
 8000280:	2900      	cmp	r1, #0
 8000282:	d100      	bne.n	8000286 <__aeabi_uldivmod+0xe>
 8000284:	2800      	cmp	r0, #0
 8000286:	d002      	beq.n	800028e <__aeabi_uldivmod+0x16>
 8000288:	2100      	movs	r1, #0
 800028a:	43c9      	mvns	r1, r1
 800028c:	1c08      	adds	r0, r1, #0
 800028e:	b407      	push	{r0, r1, r2}
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <__aeabi_uldivmod+0x24>)
 8000292:	a102      	add	r1, pc, #8	; (adr r1, 800029c <__aeabi_uldivmod+0x24>)
 8000294:	1840      	adds	r0, r0, r1
 8000296:	9002      	str	r0, [sp, #8]
 8000298:	bd03      	pop	{r0, r1, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	ffffff91 	.word	0xffffff91
 80002a0:	b403      	push	{r0, r1}
 80002a2:	4668      	mov	r0, sp
 80002a4:	b501      	push	{r0, lr}
 80002a6:	9802      	ldr	r0, [sp, #8]
 80002a8:	f000 f82e 	bl	8000308 <__udivmoddi4>
 80002ac:	9b01      	ldr	r3, [sp, #4]
 80002ae:	469e      	mov	lr, r3
 80002b0:	b002      	add	sp, #8
 80002b2:	bc0c      	pop	{r2, r3}
 80002b4:	4770      	bx	lr
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_lmul>:
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ba:	0415      	lsls	r5, r2, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	000f      	movs	r7, r1
 80002c0:	0001      	movs	r1, r0
 80002c2:	002e      	movs	r6, r5
 80002c4:	46c6      	mov	lr, r8
 80002c6:	4684      	mov	ip, r0
 80002c8:	0400      	lsls	r0, r0, #16
 80002ca:	0c14      	lsrs	r4, r2, #16
 80002cc:	0c00      	lsrs	r0, r0, #16
 80002ce:	0c09      	lsrs	r1, r1, #16
 80002d0:	4346      	muls	r6, r0
 80002d2:	434d      	muls	r5, r1
 80002d4:	4360      	muls	r0, r4
 80002d6:	4361      	muls	r1, r4
 80002d8:	1940      	adds	r0, r0, r5
 80002da:	0c34      	lsrs	r4, r6, #16
 80002dc:	1824      	adds	r4, r4, r0
 80002de:	b500      	push	{lr}
 80002e0:	42a5      	cmp	r5, r4
 80002e2:	d903      	bls.n	80002ec <__aeabi_lmul+0x34>
 80002e4:	2080      	movs	r0, #128	; 0x80
 80002e6:	0240      	lsls	r0, r0, #9
 80002e8:	4680      	mov	r8, r0
 80002ea:	4441      	add	r1, r8
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	186d      	adds	r5, r5, r1
 80002f0:	4661      	mov	r1, ip
 80002f2:	4359      	muls	r1, r3
 80002f4:	437a      	muls	r2, r7
 80002f6:	0430      	lsls	r0, r6, #16
 80002f8:	1949      	adds	r1, r1, r5
 80002fa:	0424      	lsls	r4, r4, #16
 80002fc:	0c00      	lsrs	r0, r0, #16
 80002fe:	1820      	adds	r0, r4, r0
 8000300:	1889      	adds	r1, r1, r2
 8000302:	bc80      	pop	{r7}
 8000304:	46b8      	mov	r8, r7
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000308 <__udivmoddi4>:
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030a:	4657      	mov	r7, sl
 800030c:	464e      	mov	r6, r9
 800030e:	4645      	mov	r5, r8
 8000310:	46de      	mov	lr, fp
 8000312:	b5e0      	push	{r5, r6, r7, lr}
 8000314:	0004      	movs	r4, r0
 8000316:	000d      	movs	r5, r1
 8000318:	4692      	mov	sl, r2
 800031a:	4699      	mov	r9, r3
 800031c:	b083      	sub	sp, #12
 800031e:	428b      	cmp	r3, r1
 8000320:	d830      	bhi.n	8000384 <__udivmoddi4+0x7c>
 8000322:	d02d      	beq.n	8000380 <__udivmoddi4+0x78>
 8000324:	4649      	mov	r1, r9
 8000326:	4650      	mov	r0, sl
 8000328:	f000 f8d8 	bl	80004dc <__clzdi2>
 800032c:	0029      	movs	r1, r5
 800032e:	0006      	movs	r6, r0
 8000330:	0020      	movs	r0, r4
 8000332:	f000 f8d3 	bl	80004dc <__clzdi2>
 8000336:	1a33      	subs	r3, r6, r0
 8000338:	4698      	mov	r8, r3
 800033a:	3b20      	subs	r3, #32
 800033c:	469b      	mov	fp, r3
 800033e:	d433      	bmi.n	80003a8 <__udivmoddi4+0xa0>
 8000340:	465a      	mov	r2, fp
 8000342:	4653      	mov	r3, sl
 8000344:	4093      	lsls	r3, r2
 8000346:	4642      	mov	r2, r8
 8000348:	001f      	movs	r7, r3
 800034a:	4653      	mov	r3, sl
 800034c:	4093      	lsls	r3, r2
 800034e:	001e      	movs	r6, r3
 8000350:	42af      	cmp	r7, r5
 8000352:	d83a      	bhi.n	80003ca <__udivmoddi4+0xc2>
 8000354:	42af      	cmp	r7, r5
 8000356:	d100      	bne.n	800035a <__udivmoddi4+0x52>
 8000358:	e078      	b.n	800044c <__udivmoddi4+0x144>
 800035a:	465b      	mov	r3, fp
 800035c:	1ba4      	subs	r4, r4, r6
 800035e:	41bd      	sbcs	r5, r7
 8000360:	2b00      	cmp	r3, #0
 8000362:	da00      	bge.n	8000366 <__udivmoddi4+0x5e>
 8000364:	e075      	b.n	8000452 <__udivmoddi4+0x14a>
 8000366:	2200      	movs	r2, #0
 8000368:	2300      	movs	r3, #0
 800036a:	9200      	str	r2, [sp, #0]
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	465a      	mov	r2, fp
 8000372:	4093      	lsls	r3, r2
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	4642      	mov	r2, r8
 800037a:	4093      	lsls	r3, r2
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	e028      	b.n	80003d2 <__udivmoddi4+0xca>
 8000380:	4282      	cmp	r2, r0
 8000382:	d9cf      	bls.n	8000324 <__udivmoddi4+0x1c>
 8000384:	2200      	movs	r2, #0
 8000386:	2300      	movs	r3, #0
 8000388:	9200      	str	r2, [sp, #0]
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <__udivmoddi4+0x8e>
 8000392:	601c      	str	r4, [r3, #0]
 8000394:	605d      	str	r5, [r3, #4]
 8000396:	9800      	ldr	r0, [sp, #0]
 8000398:	9901      	ldr	r1, [sp, #4]
 800039a:	b003      	add	sp, #12
 800039c:	bcf0      	pop	{r4, r5, r6, r7}
 800039e:	46bb      	mov	fp, r7
 80003a0:	46b2      	mov	sl, r6
 80003a2:	46a9      	mov	r9, r5
 80003a4:	46a0      	mov	r8, r4
 80003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	4652      	mov	r2, sl
 80003b0:	40da      	lsrs	r2, r3
 80003b2:	4641      	mov	r1, r8
 80003b4:	0013      	movs	r3, r2
 80003b6:	464a      	mov	r2, r9
 80003b8:	408a      	lsls	r2, r1
 80003ba:	0017      	movs	r7, r2
 80003bc:	4642      	mov	r2, r8
 80003be:	431f      	orrs	r7, r3
 80003c0:	4653      	mov	r3, sl
 80003c2:	4093      	lsls	r3, r2
 80003c4:	001e      	movs	r6, r3
 80003c6:	42af      	cmp	r7, r5
 80003c8:	d9c4      	bls.n	8000354 <__udivmoddi4+0x4c>
 80003ca:	2200      	movs	r2, #0
 80003cc:	2300      	movs	r3, #0
 80003ce:	9200      	str	r2, [sp, #0]
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	4643      	mov	r3, r8
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0d9      	beq.n	800038c <__udivmoddi4+0x84>
 80003d8:	07fb      	lsls	r3, r7, #31
 80003da:	0872      	lsrs	r2, r6, #1
 80003dc:	431a      	orrs	r2, r3
 80003de:	4646      	mov	r6, r8
 80003e0:	087b      	lsrs	r3, r7, #1
 80003e2:	e00e      	b.n	8000402 <__udivmoddi4+0xfa>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d101      	bne.n	80003ec <__udivmoddi4+0xe4>
 80003e8:	42a2      	cmp	r2, r4
 80003ea:	d80c      	bhi.n	8000406 <__udivmoddi4+0xfe>
 80003ec:	1aa4      	subs	r4, r4, r2
 80003ee:	419d      	sbcs	r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	1924      	adds	r4, r4, r4
 80003f4:	416d      	adcs	r5, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	3e01      	subs	r6, #1
 80003fa:	1824      	adds	r4, r4, r0
 80003fc:	414d      	adcs	r5, r1
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d006      	beq.n	8000410 <__udivmoddi4+0x108>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d9ee      	bls.n	80003e4 <__udivmoddi4+0xdc>
 8000406:	3e01      	subs	r6, #1
 8000408:	1924      	adds	r4, r4, r4
 800040a:	416d      	adcs	r5, r5
 800040c:	2e00      	cmp	r6, #0
 800040e:	d1f8      	bne.n	8000402 <__udivmoddi4+0xfa>
 8000410:	9800      	ldr	r0, [sp, #0]
 8000412:	9901      	ldr	r1, [sp, #4]
 8000414:	465b      	mov	r3, fp
 8000416:	1900      	adds	r0, r0, r4
 8000418:	4169      	adcs	r1, r5
 800041a:	2b00      	cmp	r3, #0
 800041c:	db24      	blt.n	8000468 <__udivmoddi4+0x160>
 800041e:	002b      	movs	r3, r5
 8000420:	465a      	mov	r2, fp
 8000422:	4644      	mov	r4, r8
 8000424:	40d3      	lsrs	r3, r2
 8000426:	002a      	movs	r2, r5
 8000428:	40e2      	lsrs	r2, r4
 800042a:	001c      	movs	r4, r3
 800042c:	465b      	mov	r3, fp
 800042e:	0015      	movs	r5, r2
 8000430:	2b00      	cmp	r3, #0
 8000432:	db2a      	blt.n	800048a <__udivmoddi4+0x182>
 8000434:	0026      	movs	r6, r4
 8000436:	409e      	lsls	r6, r3
 8000438:	0033      	movs	r3, r6
 800043a:	0026      	movs	r6, r4
 800043c:	4647      	mov	r7, r8
 800043e:	40be      	lsls	r6, r7
 8000440:	0032      	movs	r2, r6
 8000442:	1a80      	subs	r0, r0, r2
 8000444:	4199      	sbcs	r1, r3
 8000446:	9000      	str	r0, [sp, #0]
 8000448:	9101      	str	r1, [sp, #4]
 800044a:	e79f      	b.n	800038c <__udivmoddi4+0x84>
 800044c:	42a3      	cmp	r3, r4
 800044e:	d8bc      	bhi.n	80003ca <__udivmoddi4+0xc2>
 8000450:	e783      	b.n	800035a <__udivmoddi4+0x52>
 8000452:	4642      	mov	r2, r8
 8000454:	2320      	movs	r3, #32
 8000456:	2100      	movs	r1, #0
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	2200      	movs	r2, #0
 800045c:	9100      	str	r1, [sp, #0]
 800045e:	9201      	str	r2, [sp, #4]
 8000460:	2201      	movs	r2, #1
 8000462:	40da      	lsrs	r2, r3
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	e786      	b.n	8000376 <__udivmoddi4+0x6e>
 8000468:	4642      	mov	r2, r8
 800046a:	2320      	movs	r3, #32
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	002a      	movs	r2, r5
 8000470:	4646      	mov	r6, r8
 8000472:	409a      	lsls	r2, r3
 8000474:	0023      	movs	r3, r4
 8000476:	40f3      	lsrs	r3, r6
 8000478:	4644      	mov	r4, r8
 800047a:	4313      	orrs	r3, r2
 800047c:	002a      	movs	r2, r5
 800047e:	40e2      	lsrs	r2, r4
 8000480:	001c      	movs	r4, r3
 8000482:	465b      	mov	r3, fp
 8000484:	0015      	movs	r5, r2
 8000486:	2b00      	cmp	r3, #0
 8000488:	dad4      	bge.n	8000434 <__udivmoddi4+0x12c>
 800048a:	4642      	mov	r2, r8
 800048c:	002f      	movs	r7, r5
 800048e:	2320      	movs	r3, #32
 8000490:	0026      	movs	r6, r4
 8000492:	4097      	lsls	r7, r2
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	40de      	lsrs	r6, r3
 8000498:	003b      	movs	r3, r7
 800049a:	4333      	orrs	r3, r6
 800049c:	e7cd      	b.n	800043a <__udivmoddi4+0x132>
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__gnu_ldivmod_helper>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	46ce      	mov	lr, r9
 80004a4:	4647      	mov	r7, r8
 80004a6:	b580      	push	{r7, lr}
 80004a8:	4691      	mov	r9, r2
 80004aa:	4698      	mov	r8, r3
 80004ac:	0004      	movs	r4, r0
 80004ae:	000d      	movs	r5, r1
 80004b0:	f000 f820 	bl	80004f4 <__divdi3>
 80004b4:	0007      	movs	r7, r0
 80004b6:	000e      	movs	r6, r1
 80004b8:	0002      	movs	r2, r0
 80004ba:	000b      	movs	r3, r1
 80004bc:	4648      	mov	r0, r9
 80004be:	4641      	mov	r1, r8
 80004c0:	f7ff fefa 	bl	80002b8 <__aeabi_lmul>
 80004c4:	1a24      	subs	r4, r4, r0
 80004c6:	418d      	sbcs	r5, r1
 80004c8:	9b08      	ldr	r3, [sp, #32]
 80004ca:	0038      	movs	r0, r7
 80004cc:	0031      	movs	r1, r6
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	bcc0      	pop	{r6, r7}
 80004d4:	46b9      	mov	r9, r7
 80004d6:	46b0      	mov	r8, r6
 80004d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__clzdi2>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	2900      	cmp	r1, #0
 80004e0:	d103      	bne.n	80004ea <__clzdi2+0xe>
 80004e2:	f000 f8ed 	bl	80006c0 <__clzsi2>
 80004e6:	3020      	adds	r0, #32
 80004e8:	e002      	b.n	80004f0 <__clzdi2+0x14>
 80004ea:	1c08      	adds	r0, r1, #0
 80004ec:	f000 f8e8 	bl	80006c0 <__clzsi2>
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__divdi3>:
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	4657      	mov	r7, sl
 80004f8:	464e      	mov	r6, r9
 80004fa:	4645      	mov	r5, r8
 80004fc:	46de      	mov	lr, fp
 80004fe:	b5e0      	push	{r5, r6, r7, lr}
 8000500:	000f      	movs	r7, r1
 8000502:	0019      	movs	r1, r3
 8000504:	2300      	movs	r3, #0
 8000506:	0006      	movs	r6, r0
 8000508:	4698      	mov	r8, r3
 800050a:	0010      	movs	r0, r2
 800050c:	b083      	sub	sp, #12
 800050e:	2f00      	cmp	r7, #0
 8000510:	da07      	bge.n	8000522 <__divdi3+0x2e>
 8000512:	0033      	movs	r3, r6
 8000514:	003c      	movs	r4, r7
 8000516:	2700      	movs	r7, #0
 8000518:	425e      	negs	r6, r3
 800051a:	41a7      	sbcs	r7, r4
 800051c:	2301      	movs	r3, #1
 800051e:	425b      	negs	r3, r3
 8000520:	4698      	mov	r8, r3
 8000522:	2900      	cmp	r1, #0
 8000524:	da07      	bge.n	8000536 <__divdi3+0x42>
 8000526:	4643      	mov	r3, r8
 8000528:	43db      	mvns	r3, r3
 800052a:	000c      	movs	r4, r1
 800052c:	4698      	mov	r8, r3
 800052e:	0003      	movs	r3, r0
 8000530:	2100      	movs	r1, #0
 8000532:	4258      	negs	r0, r3
 8000534:	41a1      	sbcs	r1, r4
 8000536:	0034      	movs	r4, r6
 8000538:	003d      	movs	r5, r7
 800053a:	4682      	mov	sl, r0
 800053c:	4689      	mov	r9, r1
 800053e:	42b9      	cmp	r1, r7
 8000540:	d86a      	bhi.n	8000618 <__divdi3+0x124>
 8000542:	d067      	beq.n	8000614 <__divdi3+0x120>
 8000544:	4649      	mov	r1, r9
 8000546:	4650      	mov	r0, sl
 8000548:	f7ff ffc8 	bl	80004dc <__clzdi2>
 800054c:	4683      	mov	fp, r0
 800054e:	0039      	movs	r1, r7
 8000550:	0030      	movs	r0, r6
 8000552:	f7ff ffc3 	bl	80004dc <__clzdi2>
 8000556:	465b      	mov	r3, fp
 8000558:	1a1b      	subs	r3, r3, r0
 800055a:	469c      	mov	ip, r3
 800055c:	3b20      	subs	r3, #32
 800055e:	469b      	mov	fp, r3
 8000560:	d46b      	bmi.n	800063a <__divdi3+0x146>
 8000562:	4658      	mov	r0, fp
 8000564:	4651      	mov	r1, sl
 8000566:	4081      	lsls	r1, r0
 8000568:	4660      	mov	r0, ip
 800056a:	000b      	movs	r3, r1
 800056c:	4651      	mov	r1, sl
 800056e:	4081      	lsls	r1, r0
 8000570:	000a      	movs	r2, r1
 8000572:	42bb      	cmp	r3, r7
 8000574:	d900      	bls.n	8000578 <__divdi3+0x84>
 8000576:	e072      	b.n	800065e <__divdi3+0x16a>
 8000578:	42bb      	cmp	r3, r7
 800057a:	d100      	bne.n	800057e <__divdi3+0x8a>
 800057c:	e079      	b.n	8000672 <__divdi3+0x17e>
 800057e:	0034      	movs	r4, r6
 8000580:	003d      	movs	r5, r7
 8000582:	4659      	mov	r1, fp
 8000584:	1aa4      	subs	r4, r4, r2
 8000586:	419d      	sbcs	r5, r3
 8000588:	2900      	cmp	r1, #0
 800058a:	da00      	bge.n	800058e <__divdi3+0x9a>
 800058c:	e074      	b.n	8000678 <__divdi3+0x184>
 800058e:	2100      	movs	r1, #0
 8000590:	2000      	movs	r0, #0
 8000592:	2601      	movs	r6, #1
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	4659      	mov	r1, fp
 800059a:	408e      	lsls	r6, r1
 800059c:	9601      	str	r6, [sp, #4]
 800059e:	4661      	mov	r1, ip
 80005a0:	2601      	movs	r6, #1
 80005a2:	408e      	lsls	r6, r1
 80005a4:	4661      	mov	r1, ip
 80005a6:	9600      	str	r6, [sp, #0]
 80005a8:	2900      	cmp	r1, #0
 80005aa:	d05f      	beq.n	800066c <__divdi3+0x178>
 80005ac:	07d9      	lsls	r1, r3, #31
 80005ae:	0856      	lsrs	r6, r2, #1
 80005b0:	430e      	orrs	r6, r1
 80005b2:	085f      	lsrs	r7, r3, #1
 80005b4:	4661      	mov	r1, ip
 80005b6:	2201      	movs	r2, #1
 80005b8:	2300      	movs	r3, #0
 80005ba:	e00c      	b.n	80005d6 <__divdi3+0xe2>
 80005bc:	42af      	cmp	r7, r5
 80005be:	d101      	bne.n	80005c4 <__divdi3+0xd0>
 80005c0:	42a6      	cmp	r6, r4
 80005c2:	d80a      	bhi.n	80005da <__divdi3+0xe6>
 80005c4:	1ba4      	subs	r4, r4, r6
 80005c6:	41bd      	sbcs	r5, r7
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	3901      	subs	r1, #1
 80005ce:	18a4      	adds	r4, r4, r2
 80005d0:	415d      	adcs	r5, r3
 80005d2:	2900      	cmp	r1, #0
 80005d4:	d006      	beq.n	80005e4 <__divdi3+0xf0>
 80005d6:	42af      	cmp	r7, r5
 80005d8:	d9f0      	bls.n	80005bc <__divdi3+0xc8>
 80005da:	3901      	subs	r1, #1
 80005dc:	1924      	adds	r4, r4, r4
 80005de:	416d      	adcs	r5, r5
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d1f8      	bne.n	80005d6 <__divdi3+0xe2>
 80005e4:	9800      	ldr	r0, [sp, #0]
 80005e6:	9901      	ldr	r1, [sp, #4]
 80005e8:	465b      	mov	r3, fp
 80005ea:	1900      	adds	r0, r0, r4
 80005ec:	4169      	adcs	r1, r5
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db4d      	blt.n	800068e <__divdi3+0x19a>
 80005f2:	002e      	movs	r6, r5
 80005f4:	002c      	movs	r4, r5
 80005f6:	40de      	lsrs	r6, r3
 80005f8:	4663      	mov	r3, ip
 80005fa:	40dc      	lsrs	r4, r3
 80005fc:	465b      	mov	r3, fp
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db55      	blt.n	80006ae <__divdi3+0x1ba>
 8000602:	0034      	movs	r4, r6
 8000604:	409c      	lsls	r4, r3
 8000606:	0023      	movs	r3, r4
 8000608:	4664      	mov	r4, ip
 800060a:	40a6      	lsls	r6, r4
 800060c:	0032      	movs	r2, r6
 800060e:	1a80      	subs	r0, r0, r2
 8000610:	4199      	sbcs	r1, r3
 8000612:	e003      	b.n	800061c <__divdi3+0x128>
 8000614:	42b0      	cmp	r0, r6
 8000616:	d995      	bls.n	8000544 <__divdi3+0x50>
 8000618:	2000      	movs	r0, #0
 800061a:	2100      	movs	r1, #0
 800061c:	4643      	mov	r3, r8
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <__divdi3+0x138>
 8000622:	0003      	movs	r3, r0
 8000624:	000c      	movs	r4, r1
 8000626:	2100      	movs	r1, #0
 8000628:	4258      	negs	r0, r3
 800062a:	41a1      	sbcs	r1, r4
 800062c:	b003      	add	sp, #12
 800062e:	bcf0      	pop	{r4, r5, r6, r7}
 8000630:	46bb      	mov	fp, r7
 8000632:	46b2      	mov	sl, r6
 8000634:	46a9      	mov	r9, r5
 8000636:	46a0      	mov	r8, r4
 8000638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063a:	4662      	mov	r2, ip
 800063c:	4648      	mov	r0, r9
 800063e:	2320      	movs	r3, #32
 8000640:	4651      	mov	r1, sl
 8000642:	4090      	lsls	r0, r2
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	40d9      	lsrs	r1, r3
 8000648:	0003      	movs	r3, r0
 800064a:	9100      	str	r1, [sp, #0]
 800064c:	9900      	ldr	r1, [sp, #0]
 800064e:	4660      	mov	r0, ip
 8000650:	430b      	orrs	r3, r1
 8000652:	4651      	mov	r1, sl
 8000654:	4081      	lsls	r1, r0
 8000656:	000a      	movs	r2, r1
 8000658:	42bb      	cmp	r3, r7
 800065a:	d800      	bhi.n	800065e <__divdi3+0x16a>
 800065c:	e78c      	b.n	8000578 <__divdi3+0x84>
 800065e:	2100      	movs	r1, #0
 8000660:	2000      	movs	r0, #0
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	4661      	mov	r1, ip
 8000668:	2900      	cmp	r1, #0
 800066a:	d19f      	bne.n	80005ac <__divdi3+0xb8>
 800066c:	9800      	ldr	r0, [sp, #0]
 800066e:	9901      	ldr	r1, [sp, #4]
 8000670:	e7d4      	b.n	800061c <__divdi3+0x128>
 8000672:	42b1      	cmp	r1, r6
 8000674:	d8f3      	bhi.n	800065e <__divdi3+0x16a>
 8000676:	e782      	b.n	800057e <__divdi3+0x8a>
 8000678:	4661      	mov	r1, ip
 800067a:	2620      	movs	r6, #32
 800067c:	2701      	movs	r7, #1
 800067e:	1a76      	subs	r6, r6, r1
 8000680:	2000      	movs	r0, #0
 8000682:	2100      	movs	r1, #0
 8000684:	40f7      	lsrs	r7, r6
 8000686:	9000      	str	r0, [sp, #0]
 8000688:	9101      	str	r1, [sp, #4]
 800068a:	9701      	str	r7, [sp, #4]
 800068c:	e787      	b.n	800059e <__divdi3+0xaa>
 800068e:	4662      	mov	r2, ip
 8000690:	2320      	movs	r3, #32
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	409a      	lsls	r2, r3
 8000698:	0026      	movs	r6, r4
 800069a:	0013      	movs	r3, r2
 800069c:	4662      	mov	r2, ip
 800069e:	40d6      	lsrs	r6, r2
 80006a0:	002c      	movs	r4, r5
 80006a2:	431e      	orrs	r6, r3
 80006a4:	4663      	mov	r3, ip
 80006a6:	40dc      	lsrs	r4, r3
 80006a8:	465b      	mov	r3, fp
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	daa9      	bge.n	8000602 <__divdi3+0x10e>
 80006ae:	4662      	mov	r2, ip
 80006b0:	2320      	movs	r3, #32
 80006b2:	0035      	movs	r5, r6
 80006b4:	4094      	lsls	r4, r2
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	40dd      	lsrs	r5, r3
 80006ba:	0023      	movs	r3, r4
 80006bc:	432b      	orrs	r3, r5
 80006be:	e7a3      	b.n	8000608 <__divdi3+0x114>

080006c0 <__clzsi2>:
 80006c0:	211c      	movs	r1, #28
 80006c2:	2301      	movs	r3, #1
 80006c4:	041b      	lsls	r3, r3, #16
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d301      	bcc.n	80006ce <__clzsi2+0xe>
 80006ca:	0c00      	lsrs	r0, r0, #16
 80006cc:	3910      	subs	r1, #16
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	4298      	cmp	r0, r3
 80006d2:	d301      	bcc.n	80006d8 <__clzsi2+0x18>
 80006d4:	0a00      	lsrs	r0, r0, #8
 80006d6:	3908      	subs	r1, #8
 80006d8:	091b      	lsrs	r3, r3, #4
 80006da:	4298      	cmp	r0, r3
 80006dc:	d301      	bcc.n	80006e2 <__clzsi2+0x22>
 80006de:	0900      	lsrs	r0, r0, #4
 80006e0:	3904      	subs	r1, #4
 80006e2:	a202      	add	r2, pc, #8	; (adr r2, 80006ec <__clzsi2+0x2c>)
 80006e4:	5c10      	ldrb	r0, [r2, r0]
 80006e6:	1840      	adds	r0, r0, r1
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	02020304 	.word	0x02020304
 80006f0:	01010101 	.word	0x01010101
	...

080006fc <SPI_TR_24>:
}
return a;
}

void SPI_TR_24(uint16_t addr, uint8_t data)
{
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	4657      	mov	r7, sl
 8000700:	464e      	mov	r6, r9
 8000702:	4645      	mov	r5, r8
 8000704:	46de      	mov	lr, fp

	  AX5243_SS_PORT->BRR = (1<<AX5243_SS_PIN);
 8000706:	2380      	movs	r3, #128	; 0x80
{
 8000708:	b5e0      	push	{r5, r6, r7, lr}
	  AX5243_SS_PORT->BRR = (1<<AX5243_SS_PIN);
 800070a:	2590      	movs	r5, #144	; 0x90
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	05ed      	lsls	r5, r5, #23
 8000710:	62ab      	str	r3, [r5, #40]	; 0x28
	  uint8_t bit;
	  uint32_t tr_data;
	  uint8_t rw = 15;
	  tr_data = data + (addr<<8) + (rw<<20);
 8000712:	23f0      	movs	r3, #240	; 0xf0
 8000714:	0200      	lsls	r0, r0, #8
 8000716:	1840      	adds	r0, r0, r1
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	18c4      	adds	r4, r0, r3
    for(int16_t i = 23; i >= 0; i--)
	{
		bit = (tr_data >>i) & 1;
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 800071c:	2302      	movs	r3, #2
	  tr_data = data + (addr<<8) + (rw<<20);
 800071e:	2117      	movs	r1, #23
		{
	    AX5243_MOSI_PORT->BSRR = (1<<AX5243_MOSI_PIN);
		}
		else
		{
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 8000720:	46ab      	mov	fp, r5
	((AX5243_used_TIM->CNT) = (0));
 8000722:	2700      	movs	r7, #0
 8000724:	2600      	movs	r6, #0
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000726:	469a      	mov	sl, r3
 8000728:	4699      	mov	r9, r3
		bit = (tr_data >>i) & 1;
 800072a:	3b01      	subs	r3, #1
 800072c:	4698      	mov	r8, r3
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 800072e:	333f      	adds	r3, #63	; 0x3f
 8000730:	469c      	mov	ip, r3
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <SPI_TR_24+0x8c>)
	((AX5243_used_TIM->CNT) = (0));
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <SPI_TR_24+0x90>)
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000736:	464a      	mov	r2, r9
 8000738:	6282      	str	r2, [r0, #40]	; 0x28
		bit = (tr_data >>i) & 1;
 800073a:	0022      	movs	r2, r4
		if(bit)
 800073c:	4645      	mov	r5, r8
		bit = (tr_data >>i) & 1;
 800073e:	40ca      	lsrs	r2, r1
		if(bit)
 8000740:	4215      	tst	r5, r2
 8000742:	d01c      	beq.n	800077e <SPI_TR_24+0x82>
	    AX5243_MOSI_PORT->BSRR = (1<<AX5243_MOSI_PIN);
 8000744:	4662      	mov	r2, ip
 8000746:	465d      	mov	r5, fp
 8000748:	61aa      	str	r2, [r5, #24]
	((AX5243_used_TIM->CNT) = (0));
 800074a:	625e      	str	r6, [r3, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 800074c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800074e:	2a01      	cmp	r2, #1
 8000750:	d9fc      	bls.n	800074c <SPI_TR_24+0x50>
		}
		AX5243_u_delay(AX5243_delay);
		AX5243_CLK_PORT->BSRR = (1<<AX5243_CLK_PIN);
 8000752:	4652      	mov	r2, sl
 8000754:	6182      	str	r2, [r0, #24]
	((AX5243_used_TIM->CNT) = (0));
 8000756:	625f      	str	r7, [r3, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800075a:	2a01      	cmp	r2, #1
 800075c:	d9fc      	bls.n	8000758 <SPI_TR_24+0x5c>
    for(int16_t i = 23; i >= 0; i--)
 800075e:	3901      	subs	r1, #1
 8000760:	d2e9      	bcs.n	8000736 <SPI_TR_24+0x3a>
		AX5243_u_delay(AX5243_delay);
	}
      AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 8000762:	2202      	movs	r2, #2
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <SPI_TR_24+0x8c>)
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
      AX5243_SS_PORT->BSRR = (1<<AX5243_SS_PIN);
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	32ff      	adds	r2, #255	; 0xff
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	32ff      	adds	r2, #255	; 0xff
 8000770:	619a      	str	r2, [r3, #24]
}
 8000772:	bcf0      	pop	{r4, r5, r6, r7}
 8000774:	46bb      	mov	fp, r7
 8000776:	46b2      	mov	sl, r6
 8000778:	46a9      	mov	r9, r5
 800077a:	46a0      	mov	r8, r4
 800077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 800077e:	4662      	mov	r2, ip
 8000780:	465d      	mov	r5, fp
 8000782:	62aa      	str	r2, [r5, #40]	; 0x28
 8000784:	e7e1      	b.n	800074a <SPI_TR_24+0x4e>
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	48000400 	.word	0x48000400
 800078c:	40000400 	.word	0x40000400

08000790 <SPI_TR_16>:

void SPI_TR_16(uint8_t addr, uint8_t data)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	4657      	mov	r7, sl
 8000794:	464e      	mov	r6, r9
 8000796:	4645      	mov	r5, r8
 8000798:	46de      	mov	lr, fp
	  AX5243_SS_PORT->BRR = (1<<AX5243_SS_PIN);
 800079a:	2380      	movs	r3, #128	; 0x80
{
 800079c:	b5e0      	push	{r5, r6, r7, lr}
	  AX5243_SS_PORT->BRR = (1<<AX5243_SS_PIN);
 800079e:	2590      	movs	r5, #144	; 0x90
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	05ed      	lsls	r5, r5, #23
 80007a4:	62ab      	str	r3, [r5, #40]	; 0x28
	  uint8_t bit;
	  uint16_t tr_data;
	  uint8_t rw = 1;
	  tr_data = data + (addr<<8) + (rw<<15);
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <SPI_TR_16+0x8c>)
 80007a8:	0200      	lsls	r0, r0, #8
 80007aa:	469c      	mov	ip, r3
    for(int16_t i = 15; i >= 0; i--)
	{
		bit = (tr_data >>i) & 1;
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 80007ac:	2302      	movs	r3, #2
	  tr_data = data + (addr<<8) + (rw<<15);
 80007ae:	1840      	adds	r0, r0, r1
		{
		AX5243_MOSI_PORT->BSRR = (1<<AX5243_MOSI_PIN);
		}
		else
		{
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 80007b0:	46ab      	mov	fp, r5
	  tr_data = data + (addr<<8) + (rw<<15);
 80007b2:	210f      	movs	r1, #15
	((AX5243_used_TIM->CNT) = (0));
 80007b4:	2700      	movs	r7, #0
 80007b6:	2600      	movs	r6, #0
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 80007b8:	469a      	mov	sl, r3
 80007ba:	4699      	mov	r9, r3
		bit = (tr_data >>i) & 1;
 80007bc:	3b01      	subs	r3, #1
	  tr_data = data + (addr<<8) + (rw<<15);
 80007be:	4460      	add	r0, ip
		bit = (tr_data >>i) & 1;
 80007c0:	4698      	mov	r8, r3
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 80007c2:	333f      	adds	r3, #63	; 0x3f
 80007c4:	469c      	mov	ip, r3
 80007c6:	b284      	uxth	r4, r0
	((AX5243_used_TIM->CNT) = (0));
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <SPI_TR_16+0x90>)
		AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 80007ca:	4816      	ldr	r0, [pc, #88]	; (8000824 <SPI_TR_16+0x94>)
 80007cc:	464a      	mov	r2, r9
 80007ce:	6282      	str	r2, [r0, #40]	; 0x28
		bit = (tr_data >>i) & 1;
 80007d0:	0022      	movs	r2, r4
		if(bit)
 80007d2:	4645      	mov	r5, r8
		bit = (tr_data >>i) & 1;
 80007d4:	410a      	asrs	r2, r1
		if(bit)
 80007d6:	4215      	tst	r5, r2
 80007d8:	d01c      	beq.n	8000814 <SPI_TR_16+0x84>
		AX5243_MOSI_PORT->BSRR = (1<<AX5243_MOSI_PIN);
 80007da:	4662      	mov	r2, ip
 80007dc:	465d      	mov	r5, fp
 80007de:	61aa      	str	r2, [r5, #24]
	((AX5243_used_TIM->CNT) = (0));
 80007e0:	625e      	str	r6, [r3, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 80007e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007e4:	2a01      	cmp	r2, #1
 80007e6:	d9fc      	bls.n	80007e2 <SPI_TR_16+0x52>
		}
		AX5243_u_delay(AX5243_delay);
		AX5243_CLK_PORT->BSRR = (1<<AX5243_CLK_PIN);
 80007e8:	4652      	mov	r2, sl
 80007ea:	6182      	str	r2, [r0, #24]
	((AX5243_used_TIM->CNT) = (0));
 80007ec:	625f      	str	r7, [r3, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 80007ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007f0:	2a01      	cmp	r2, #1
 80007f2:	d9fc      	bls.n	80007ee <SPI_TR_16+0x5e>
    for(int16_t i = 15; i >= 0; i--)
 80007f4:	3901      	subs	r1, #1
 80007f6:	d2e9      	bcs.n	80007cc <SPI_TR_16+0x3c>
		AX5243_u_delay(AX5243_delay);
	}
      AX5243_CLK_PORT->BRR = (1<<AX5243_CLK_PIN);
 80007f8:	2202      	movs	r2, #2
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <SPI_TR_16+0x94>)
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
      AX5243_SS_PORT->BSRR = (1<<AX5243_SS_PIN);
 80007fe:	2390      	movs	r3, #144	; 0x90
 8000800:	32ff      	adds	r2, #255	; 0xff
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	32ff      	adds	r2, #255	; 0xff
 8000806:	619a      	str	r2, [r3, #24]

}
 8000808:	bcf0      	pop	{r4, r5, r6, r7}
 800080a:	46bb      	mov	fp, r7
 800080c:	46b2      	mov	sl, r6
 800080e:	46a9      	mov	r9, r5
 8000810:	46a0      	mov	r8, r4
 8000812:	bdf0      	pop	{r4, r5, r6, r7, pc}
		AX5243_MOSI_PORT->BRR = (1<<AX5243_MOSI_PIN);
 8000814:	4662      	mov	r2, ip
 8000816:	465d      	mov	r5, fp
 8000818:	62aa      	str	r2, [r5, #40]	; 0x28
 800081a:	e7e1      	b.n	80007e0 <SPI_TR_16+0x50>
 800081c:	ffff8000 	.word	0xffff8000
 8000820:	40000400 	.word	0x40000400
 8000824:	48000400 	.word	0x48000400

08000828 <AX5243_init>:



void AX5243_init() {
 8000828:	b570      	push	{r4, r5, r6, lr}

	SPI_TR_16(0x2, 0x60); // set PWDN
 800082a:	2160      	movs	r1, #96	; 0x60
 800082c:	2002      	movs	r0, #2
void AX5243_init() {
 800082e:	b08e      	sub	sp, #56	; 0x38
	SPI_TR_16(0x2, 0x60); // set PWDN
 8000830:	f7ff ffae 	bl	8000790 <SPI_TR_16>
	((AX5243_used_TIM->CNT) = (0));
 8000834:	2300      	movs	r3, #0
 8000836:	4e92      	ldr	r6, [pc, #584]	; (8000a80 <AX5243_init+0x258>)
	while((AX5243_used_TIM->CNT) < (delay));
 8000838:	4a92      	ldr	r2, [pc, #584]	; (8000a84 <AX5243_init+0x25c>)
	((AX5243_used_TIM->CNT) = (0));
 800083a:	6273      	str	r3, [r6, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 800083c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800083e:	4293      	cmp	r3, r2
 8000840:	d9fc      	bls.n	800083c <AX5243_init+0x14>
	AX5243_u_delay(10000);
	SPI_TR_16(0x30, 0x09); //PLLLOOP
 8000842:	2109      	movs	r1, #9
 8000844:	2030      	movs	r0, #48	; 0x30
 8000846:	f7ff ffa3 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x32, 0x01); //PLLVCODIV
 800084a:	2101      	movs	r1, #1
 800084c:	2032      	movs	r0, #50	; 0x32
 800084e:	f7ff ff9f 	bl	8000790 <SPI_TR_16>
	SPI_TR_24(0xF10, 0x04);
 8000852:	20f1      	movs	r0, #241	; 0xf1
 8000854:	2104      	movs	r1, #4
 8000856:	0100      	lsls	r0, r0, #4
 8000858:	f7ff ff50 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0xF35, 0x11);
 800085c:	2111      	movs	r1, #17
 800085e:	488a      	ldr	r0, [pc, #552]	; (8000a88 <AX5243_init+0x260>)
 8000860:	f7ff ff4c 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0xF34, 0x08); //PERFTUNE52
 8000864:	2108      	movs	r1, #8
 8000866:	4889      	ldr	r0, [pc, #548]	; (8000a8c <AX5243_init+0x264>)
 8000868:	f7ff ff48 	bl	80006fc <SPI_TR_24>
	SPI_TR_16(0x21, 0x08); //PINFUNCSYSCLK
 800086c:	2108      	movs	r1, #8
 800086e:	2021      	movs	r0, #33	; 0x21
 8000870:	f7ff ff8e 	bl	8000790 <SPI_TR_16>
	FREQA = (uint32_t)((((uint64_t)def_f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 8000874:	4b86      	ldr	r3, [pc, #536]	; (8000a90 <AX5243_init+0x268>)
 8000876:	2100      	movs	r1, #0
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	4b86      	ldr	r3, [pc, #536]	; (8000a94 <AX5243_init+0x26c>)
 800087c:	4a86      	ldr	r2, [pc, #536]	; (8000a98 <AX5243_init+0x270>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9b00      	ldr	r3, [sp, #0]
 8000888:	9c01      	ldr	r4, [sp, #4]
 800088a:	18c0      	adds	r0, r0, r3
 800088c:	4161      	adcs	r1, r4
 800088e:	2300      	movs	r3, #0
 8000890:	f7ff fd12 	bl	80002b8 <__aeabi_lmul>
 8000894:	4b81      	ldr	r3, [pc, #516]	; (8000a9c <AX5243_init+0x274>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2300      	movs	r3, #0
 800089a:	f7ff fced 	bl	8000278 <__aeabi_uldivmod>
 800089e:	0002      	movs	r2, r0
 80008a0:	000b      	movs	r3, r1
 80008a2:	0a04      	lsrs	r4, r0, #8
 80008a4:	0609      	lsls	r1, r1, #24
 80008a6:	4321      	orrs	r1, r4
 80008a8:	0610      	lsls	r0, r2, #24
 80008aa:	1880      	adds	r0, r0, r2
 80008ac:	4159      	adcs	r1, r3
 80008ae:	2300      	movs	r3, #0
 80008b0:	4a79      	ldr	r2, [pc, #484]	; (8000a98 <AX5243_init+0x270>)
 80008b2:	f7ff fce1 	bl	8000278 <__aeabi_uldivmod>
 80008b6:	4c7a      	ldr	r4, [pc, #488]	; (8000aa0 <AX5243_init+0x278>)
	SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24)); // set FREQA3
 80008b8:	0e01      	lsrs	r1, r0, #24
	FREQA = (uint32_t)((((uint64_t)def_f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 80008ba:	6020      	str	r0, [r4, #0]
	SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24)); // set FREQA3
 80008bc:	2034      	movs	r0, #52	; 0x34
 80008be:	f7ff ff67 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x35, ((FREQA & 0xFF0000) >> 16)); // set FREQA2
 80008c2:	2035      	movs	r0, #53	; 0x35
 80008c4:	78a1      	ldrb	r1, [r4, #2]
 80008c6:	f7ff ff63 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x36, ((FREQA & 0xFF00) >> 8)); 	// set FREQA1
 80008ca:	2036      	movs	r0, #54	; 0x36
 80008cc:	7861      	ldrb	r1, [r4, #1]
 80008ce:	f7ff ff5f 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x37, (FREQA & 0xFF)); 	// set FREQA0
 80008d2:	2037      	movs	r0, #55	; 0x37
 80008d4:	7821      	ldrb	r1, [r4, #0]
 80008d6:	f7ff ff5b 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x3C, ((FREQA & 0xFF000000) >> 24)); 	// set FREQB3
 80008da:	203c      	movs	r0, #60	; 0x3c
 80008dc:	78e1      	ldrb	r1, [r4, #3]
 80008de:	f7ff ff57 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x3D, ((FREQA & 0xFF0000) >> 16)); // set FREQB2
 80008e2:	203d      	movs	r0, #61	; 0x3d
 80008e4:	78a1      	ldrb	r1, [r4, #2]
 80008e6:	f7ff ff53 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x3E, ((FREQA & 0xFF00) >> 8)); 	// set FREQB1
 80008ea:	203e      	movs	r0, #62	; 0x3e
 80008ec:	7861      	ldrb	r1, [r4, #1]
 80008ee:	f7ff ff4f 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x3F, (FREQA & 0xFF));	// set FREQB0
 80008f2:	203f      	movs	r0, #63	; 0x3f
 80008f4:	7821      	ldrb	r1, [r4, #0]
 80008f6:	f7ff ff4b 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x2, 0x65);	// set Standby
 80008fa:	2165      	movs	r1, #101	; 0x65
 80008fc:	2002      	movs	r0, #2
 80008fe:	f7ff ff47 	bl	8000790 <SPI_TR_16>
	while((AX5243_used_TIM->CNT) < (delay));
 8000902:	21fa      	movs	r1, #250	; 0xfa
	((AX5243_used_TIM->CNT) = (0));
 8000904:	9b01      	ldr	r3, [sp, #4]
	while((AX5243_used_TIM->CNT) < (delay));
 8000906:	4a5e      	ldr	r2, [pc, #376]	; (8000a80 <AX5243_init+0x258>)
	((AX5243_used_TIM->CNT) = (0));
 8000908:	6273      	str	r3, [r6, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 800090a:	01c9      	lsls	r1, r1, #7
 800090c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800090e:	428b      	cmp	r3, r1
 8000910:	d3fc      	bcc.n	800090c <AX5243_init+0xe4>
	((AX5243_used_TIM->CNT) = (0));
 8000912:	2300      	movs	r3, #0
 8000914:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000916:	22fa      	movs	r2, #250	; 0xfa
 8000918:	4c59      	ldr	r4, [pc, #356]	; (8000a80 <AX5243_init+0x258>)
 800091a:	01d2      	lsls	r2, r2, #7
 800091c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800091e:	4293      	cmp	r3, r2
 8000920:	d3fc      	bcc.n	800091c <AX5243_init+0xf4>
	AX5243_u_delay(32000);
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	SPI_TR_16(0x33, 0x18);	//set PLLRANGINGA
 8000922:	2118      	movs	r1, #24
 8000924:	2033      	movs	r0, #51	; 0x33
 8000926:	f7ff ff33 	bl	8000790 <SPI_TR_16>
	((AX5243_used_TIM->CNT) = (0));
 800092a:	2300      	movs	r3, #0
	while((AX5243_used_TIM->CNT) < (delay));
 800092c:	21fa      	movs	r1, #250	; 0xfa
 800092e:	4a54      	ldr	r2, [pc, #336]	; (8000a80 <AX5243_init+0x258>)
	((AX5243_used_TIM->CNT) = (0));
 8000930:	6263      	str	r3, [r4, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000932:	01c9      	lsls	r1, r1, #7
 8000934:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000936:	428b      	cmp	r3, r1
 8000938:	d3fc      	bcc.n	8000934 <AX5243_init+0x10c>
	((AX5243_used_TIM->CNT) = (0));
 800093a:	2300      	movs	r3, #0
 800093c:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 800093e:	22fa      	movs	r2, #250	; 0xfa
 8000940:	494f      	ldr	r1, [pc, #316]	; (8000a80 <AX5243_init+0x258>)
 8000942:	01d2      	lsls	r2, r2, #7
 8000944:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000946:	4293      	cmp	r3, r2
 8000948:	d3fc      	bcc.n	8000944 <AX5243_init+0x11c>
	AX5243_u_delay(32000);
	AX5243_u_delay(32000);//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	SPI_TR_24(0x164, 0x05);	//MODCFGA
 800094a:	20b2      	movs	r0, #178	; 0xb2
 800094c:	2105      	movs	r1, #5
 800094e:	0040      	lsls	r0, r0, #1
 8000950:	f7ff fed4 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0xf5f, 0xe9);	//MODCFGP
 8000954:	21e9      	movs	r1, #233	; 0xe9
 8000956:	4853      	ldr	r0, [pc, #332]	; (8000aa4 <AX5243_init+0x27c>)
 8000958:	f7ff fed0 	bl	80006fc <SPI_TR_24>
uint32_t a_table[] = {97, 110, 124, 134, 153, 175, 210, 242, 275, 345, 410, 530};
 800095c:	a902      	add	r1, sp, #8
 800095e:	000a      	movs	r2, r1
	TXPWRCOEFFB = ((DbmToa1(def_PWR_dbm)*4096)+500)/1000;
 8000960:	4b51      	ldr	r3, [pc, #324]	; (8000aa8 <AX5243_init+0x280>)
 8000962:	7818      	ldrb	r0, [r3, #0]
uint32_t a_table[] = {97, 110, 124, 134, 153, 175, 210, 242, 275, 345, 410, 530};
 8000964:	4b51      	ldr	r3, [pc, #324]	; (8000aac <AX5243_init+0x284>)
 8000966:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000968:	c270      	stmia	r2!, {r4, r5, r6}
 800096a:	cb70      	ldmia	r3!, {r4, r5, r6}
 800096c:	c270      	stmia	r2!, {r4, r5, r6}
 800096e:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000970:	c270      	stmia	r2!, {r4, r5, r6}
 8000972:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000974:	c270      	stmia	r2!, {r4, r5, r6}
if(Dbm < 12){
 8000976:	280b      	cmp	r0, #11
 8000978:	d900      	bls.n	800097c <AX5243_init+0x154>
 800097a:	e07f      	b.n	8000a7c <AX5243_init+0x254>
a = a_table[Dbm];
 800097c:	0080      	lsls	r0, r0, #2
 800097e:	5840      	ldr	r0, [r0, r1]
 8000980:	21fa      	movs	r1, #250	; 0xfa
 8000982:	0300      	lsls	r0, r0, #12
 8000984:	30f5      	adds	r0, #245	; 0xf5
 8000986:	30ff      	adds	r0, #255	; 0xff
 8000988:	0089      	lsls	r1, r1, #2
 800098a:	f7ff fbc5 	bl	8000118 <__udivsi3>
 800098e:	b280      	uxth	r0, r0
	TXPWRCOEFFB = ((DbmToa1(def_PWR_dbm)*4096)+500)/1000;
 8000990:	4c47      	ldr	r4, [pc, #284]	; (8000ab0 <AX5243_init+0x288>)
	SPI_TR_24(0x168, 0x0);//set TXPWR
 8000992:	2100      	movs	r1, #0
	TXPWRCOEFFB = ((DbmToa1(def_PWR_dbm)*4096)+500)/1000;
 8000994:	8020      	strh	r0, [r4, #0]
	SPI_TR_24(0x168, 0x0);//set TXPWR
 8000996:	20b4      	movs	r0, #180	; 0xb4
 8000998:	0040      	lsls	r0, r0, #1
 800099a:	f7ff feaf 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x169, 0x0);
 800099e:	206a      	movs	r0, #106	; 0x6a
 80009a0:	2100      	movs	r1, #0
 80009a2:	30ff      	adds	r0, #255	; 0xff
 80009a4:	f7ff feaa 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x16A, ((TXPWRCOEFFB & 0xFF00) >> 8));
 80009a8:	20b5      	movs	r0, #181	; 0xb5
 80009aa:	8821      	ldrh	r1, [r4, #0]
 80009ac:	0040      	lsls	r0, r0, #1
 80009ae:	0a09      	lsrs	r1, r1, #8
 80009b0:	f7ff fea4 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x16B, (TXPWRCOEFFB & 0xFF));
 80009b4:	206c      	movs	r0, #108	; 0x6c
 80009b6:	7821      	ldrb	r1, [r4, #0]
 80009b8:	30ff      	adds	r0, #255	; 0xff
 80009ba:	f7ff fe9f 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x16C, 0x0);
 80009be:	20b6      	movs	r0, #182	; 0xb6
 80009c0:	2100      	movs	r1, #0
 80009c2:	0040      	lsls	r0, r0, #1
 80009c4:	f7ff fe9a 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x16D, 0x0);
 80009c8:	206e      	movs	r0, #110	; 0x6e
 80009ca:	2100      	movs	r1, #0
 80009cc:	30ff      	adds	r0, #255	; 0xff
 80009ce:	f7ff fe95 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x16E, 0x0);
 80009d2:	20b7      	movs	r0, #183	; 0xb7
 80009d4:	2100      	movs	r1, #0
 80009d6:	0040      	lsls	r0, r0, #1
 80009d8:	f7ff fe90 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x16F, 0x0);
 80009dc:	2070      	movs	r0, #112	; 0x70
 80009de:	2100      	movs	r1, #0
 80009e0:	30ff      	adds	r0, #255	; 0xff
 80009e2:	f7ff fe8b 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x170, 0x0);
 80009e6:	20b8      	movs	r0, #184	; 0xb8
 80009e8:	2100      	movs	r1, #0
 80009ea:	0040      	lsls	r0, r0, #1
 80009ec:	f7ff fe86 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x171, 0x0);
 80009f0:	2072      	movs	r0, #114	; 0x72
 80009f2:	2100      	movs	r1, #0
 80009f4:	30ff      	adds	r0, #255	; 0xff
 80009f6:	f7ff fe81 	bl	80006fc <SPI_TR_24>
	SPI_TR_16(0x10, 0x4);	//set MODULATION
 80009fa:	2104      	movs	r1, #4
 80009fc:	2010      	movs	r0, #16
 80009fe:	f7ff fec7 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x11, 0x0);	//set ENCODING
 8000a02:	2100      	movs	r1, #0
 8000a04:	2011      	movs	r0, #17
 8000a06:	f7ff fec3 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x12, 0x0);	//set FRAMING
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2012      	movs	r0, #18
 8000a0e:	f7ff febf 	bl	8000790 <SPI_TR_16>
	SPI_TR_24(0x165, ((0x23 & 0xFF0000) >> 16));	//set RATE
 8000a12:	2066      	movs	r0, #102	; 0x66
 8000a14:	2100      	movs	r1, #0
 8000a16:	30ff      	adds	r0, #255	; 0xff
 8000a18:	f7ff fe70 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x166, ((0x23 & 0xFF00) >> 8));
 8000a1c:	20b3      	movs	r0, #179	; 0xb3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	0040      	lsls	r0, r0, #1
 8000a22:	f7ff fe6b 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0x167, (0x23 & 0xFF));
 8000a26:	2068      	movs	r0, #104	; 0x68
 8000a28:	2123      	movs	r1, #35	; 0x23
 8000a2a:	30ff      	adds	r0, #255	; 0xff
 8000a2c:	f7ff fe66 	bl	80006fc <SPI_TR_24>
	SPI_TR_16(0x2, 0x67);	//set FIFO
 8000a30:	2167      	movs	r1, #103	; 0x67
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff feac 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x28, 0x2);	//clear error
 8000a38:	2102      	movs	r1, #2
 8000a3a:	2028      	movs	r0, #40	; 0x28
 8000a3c:	f7ff fea8 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x28, 0x3);	//clear FIFO
 8000a40:	2103      	movs	r1, #3
 8000a42:	2028      	movs	r0, #40	; 0x28
 8000a44:	f7ff fea4 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x06, 0x0);	//set IRQMASK1
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f7ff fea0 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x07, 0x40);	//set IRQMASK0
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	2007      	movs	r0, #7
 8000a54:	f7ff fe9c 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x08, 0x0);	//set RADIOEVENTMASK1
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff fe98 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x09, 0x1);	//set RADIOEVENTMASK0
 8000a60:	2101      	movs	r1, #1
 8000a62:	2009      	movs	r0, #9
 8000a64:	f7ff fe94 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x0A, 0x0);	//set IRQINVERSION1
 8000a68:	2100      	movs	r1, #0
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f7ff fe90 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x0B, 0x40);	//set IRQINVERSION0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	200b      	movs	r0, #11
 8000a74:	f7ff fe8c 	bl	8000790 <SPI_TR_16>
}
 8000a78:	b00e      	add	sp, #56	; 0x38
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <AX5243_init+0x28c>)
 8000a7e:	e787      	b.n	8000990 <AX5243_init+0x168>
 8000a80:	40000400 	.word	0x40000400
 8000a84:	0000270f 	.word	0x0000270f
 8000a88:	00000f35 	.word	0x00000f35
 8000a8c:	00000f34 	.word	0x00000f34
 8000a90:	20000004 	.word	0x20000004
 8000a94:	20000008 	.word	0x20000008
 8000a98:	3b9aca00 	.word	0x3b9aca00
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	00000f5f 	.word	0x00000f5f
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	080035b0 	.word	0x080035b0
 8000ab0:	20000038 	.word	0x20000038
 8000ab4:	0000087b 	.word	0x0000087b

08000ab8 <AX5243_transmit>:

uint8_t AX5243_transmit(uint8_t* data, uint16_t RX_Data_Size) {
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t transmit_timer = 0;
	uint8_t error_flag = 0;

	if((RX_Data_Size>0)&&(RX_Data_Size<(256+0))){
 8000aba:	1e4b      	subs	r3, r1, #1
uint8_t AX5243_transmit(uint8_t* data, uint16_t RX_Data_Size) {
 8000abc:	0006      	movs	r6, r0
 8000abe:	000d      	movs	r5, r1
		}
		//LL_GPIO_ResetOutputPin(LED_PIN);
		LED_PORT->BRR = (1<<LED_PIN);
	}
	else{
	error_flag=1;
 8000ac0:	2001      	movs	r0, #1
	if((RX_Data_Size>0)&&(RX_Data_Size<(256+0))){
 8000ac2:	2bfe      	cmp	r3, #254	; 0xfe
 8000ac4:	d900      	bls.n	8000ac8 <AX5243_transmit+0x10>

	}
	return error_flag;
}
 8000ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SPI_TR_16(0x2, 0x60);// set PWDN
 8000ac8:	2160      	movs	r1, #96	; 0x60
 8000aca:	3001      	adds	r0, #1
 8000acc:	f7ff fe60 	bl	8000790 <SPI_TR_16>
	((AX5243_used_TIM->CNT) = (0));
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4c63      	ldr	r4, [pc, #396]	; (8000c60 <AX5243_transmit+0x1a8>)
	while((AX5243_used_TIM->CNT) < (delay));
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <AX5243_transmit+0x1ac>)
	((AX5243_used_TIM->CNT) = (0));
 8000ad6:	6263      	str	r3, [r4, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d9fc      	bls.n	8000ad8 <AX5243_transmit+0x20>
	SPI_TR_16(0x30, 0x09);  //PLLLOOP
 8000ade:	2109      	movs	r1, #9
 8000ae0:	2030      	movs	r0, #48	; 0x30
 8000ae2:	f7ff fe55 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x32, 0x01);   //PLLVCODIV
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2032      	movs	r0, #50	; 0x32
 8000aea:	f7ff fe51 	bl	8000790 <SPI_TR_16>
	SPI_TR_24(0xF10, 0x04);
 8000aee:	20f1      	movs	r0, #241	; 0xf1
 8000af0:	2104      	movs	r1, #4
 8000af2:	0100      	lsls	r0, r0, #4
 8000af4:	f7ff fe02 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0xF35, 0x11);
 8000af8:	2111      	movs	r1, #17
 8000afa:	485b      	ldr	r0, [pc, #364]	; (8000c68 <AX5243_transmit+0x1b0>)
 8000afc:	f7ff fdfe 	bl	80006fc <SPI_TR_24>
	SPI_TR_24(0xF34, 0x08); //PERFTUNE52
 8000b00:	2108      	movs	r1, #8
 8000b02:	485a      	ldr	r0, [pc, #360]	; (8000c6c <AX5243_transmit+0x1b4>)
 8000b04:	f7ff fdfa 	bl	80006fc <SPI_TR_24>
	SPI_TR_16(0x21, 0x08); //PINFUNCSYSCLK
 8000b08:	2108      	movs	r1, #8
 8000b0a:	2021      	movs	r0, #33	; 0x21
 8000b0c:	f7ff fe40 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x2, 0x65);// set Standby
 8000b10:	2165      	movs	r1, #101	; 0x65
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fe3c 	bl	8000790 <SPI_TR_16>
	((AX5243_used_TIM->CNT) = (0));
 8000b18:	2300      	movs	r3, #0
	while((AX5243_used_TIM->CNT) < (delay));
 8000b1a:	21fa      	movs	r1, #250	; 0xfa
 8000b1c:	4a50      	ldr	r2, [pc, #320]	; (8000c60 <AX5243_transmit+0x1a8>)
	((AX5243_used_TIM->CNT) = (0));
 8000b1e:	6263      	str	r3, [r4, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000b20:	01c9      	lsls	r1, r1, #7
 8000b22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b24:	428b      	cmp	r3, r1
 8000b26:	d3fc      	bcc.n	8000b22 <AX5243_transmit+0x6a>
	((AX5243_used_TIM->CNT) = (0));
 8000b28:	2300      	movs	r3, #0
 8000b2a:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000b2c:	22fa      	movs	r2, #250	; 0xfa
 8000b2e:	4c4c      	ldr	r4, [pc, #304]	; (8000c60 <AX5243_transmit+0x1a8>)
 8000b30:	01d2      	lsls	r2, r2, #7
 8000b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d3fc      	bcc.n	8000b32 <AX5243_transmit+0x7a>
	SPI_TR_16(0x33, 0x18);//set PLLRANGINGA
 8000b38:	2118      	movs	r1, #24
 8000b3a:	2033      	movs	r0, #51	; 0x33
 8000b3c:	f7ff fe28 	bl	8000790 <SPI_TR_16>
	((AX5243_used_TIM->CNT) = (0));
 8000b40:	2300      	movs	r3, #0
	while((AX5243_used_TIM->CNT) < (delay));
 8000b42:	21fa      	movs	r1, #250	; 0xfa
 8000b44:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <AX5243_transmit+0x1a8>)
	((AX5243_used_TIM->CNT) = (0));
 8000b46:	6263      	str	r3, [r4, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000b48:	01c9      	lsls	r1, r1, #7
 8000b4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d3fc      	bcc.n	8000b4a <AX5243_transmit+0x92>
	((AX5243_used_TIM->CNT) = (0));
 8000b50:	2300      	movs	r3, #0
	while((AX5243_used_TIM->CNT) < (delay));
 8000b52:	21fa      	movs	r1, #250	; 0xfa
	((AX5243_used_TIM->CNT) = (0));
 8000b54:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000b56:	4a42      	ldr	r2, [pc, #264]	; (8000c60 <AX5243_transmit+0x1a8>)
 8000b58:	01c9      	lsls	r1, r1, #7
 8000b5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d3fc      	bcc.n	8000b5a <AX5243_transmit+0xa2>
	((AX5243_used_TIM->CNT) = (0));
 8000b60:	2300      	movs	r3, #0
	while((AX5243_used_TIM->CNT) < (delay));
 8000b62:	21fa      	movs	r1, #250	; 0xfa
	((AX5243_used_TIM->CNT) = (0));
 8000b64:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000b66:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <AX5243_transmit+0x1a8>)
 8000b68:	01c9      	lsls	r1, r1, #7
 8000b6a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d3fc      	bcc.n	8000b6a <AX5243_transmit+0xb2>
	((AX5243_used_TIM->CNT) = (0));
 8000b70:	2300      	movs	r3, #0
 8000b72:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000b74:	22fa      	movs	r2, #250	; 0xfa
 8000b76:	493a      	ldr	r1, [pc, #232]	; (8000c60 <AX5243_transmit+0x1a8>)
 8000b78:	01d2      	lsls	r2, r2, #7
 8000b7a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d3fc      	bcc.n	8000b7a <AX5243_transmit+0xc2>
	SPI_TR_16(0x10, 0x4);//set MODULATION
 8000b80:	2104      	movs	r1, #4
 8000b82:	2010      	movs	r0, #16
 8000b84:	f7ff fe04 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x11, 0x0);//set ENCODING
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2011      	movs	r0, #17
 8000b8c:	f7ff fe00 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x12, 0x0);//set FRAMING
 8000b90:	2100      	movs	r1, #0
 8000b92:	2012      	movs	r0, #18
 8000b94:	f7ff fdfc 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x2, 0x67);//set FIFO
 8000b98:	2167      	movs	r1, #103	; 0x67
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fdf8 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x28, 0x2); //clear error
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	2028      	movs	r0, #40	; 0x28
 8000ba4:	f7ff fdf4 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x28, 0x3);	//clear FIFO
 8000ba8:	2103      	movs	r1, #3
 8000baa:	2028      	movs	r0, #40	; 0x28
 8000bac:	f7ff fdf0 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x06, 0x0);		//set IRQMASK1
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f7ff fdec 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x07, 0x40);		//set IRQMASK0
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f7ff fde8 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x08, 0x0);//set RADIOEVENTMASK1
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2008      	movs	r0, #8
 8000bc4:	f7ff fde4 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x09, 0x1);//set RADIOEVENTMASK0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	2009      	movs	r0, #9
 8000bcc:	f7ff fde0 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x0A, 0x0); //set IRQINVERSION1
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f7ff fddc 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x0B, 0x40); 		//set IRQINVERSION0
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f7ff fdd8 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x2, 0x6D);//set FullTX
 8000be0:	216d      	movs	r1, #109	; 0x6d
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fdd4 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x29, 0xE1); //set FIFO RAW
 8000be8:	21e1      	movs	r1, #225	; 0xe1
 8000bea:	2029      	movs	r0, #41	; 0x29
 8000bec:	f7ff fdd0 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x29, RX_Data_Size+1);
 8000bf0:	1c69      	adds	r1, r5, #1
 8000bf2:	2029      	movs	r0, #41	; 0x29
 8000bf4:	b2c9      	uxtb	r1, r1
 8000bf6:	f7ff fdcb 	bl	8000790 <SPI_TR_16>
	SPI_TR_16(0x29, 0x28);
 8000bfa:	2128      	movs	r1, #40	; 0x28
 8000bfc:	2029      	movs	r0, #41	; 0x29
 8000bfe:	f7ff fdc7 	bl	8000790 <SPI_TR_16>
		for(int u = 0; u<RX_Data_Size; u++)
 8000c02:	2400      	movs	r4, #0
			SPI_TR_16(0x29, data[u]);
 8000c04:	5d31      	ldrb	r1, [r6, r4]
 8000c06:	2029      	movs	r0, #41	; 0x29
		for(int u = 0; u<RX_Data_Size; u++)
 8000c08:	3401      	adds	r4, #1
			SPI_TR_16(0x29, data[u]);
 8000c0a:	f7ff fdc1 	bl	8000790 <SPI_TR_16>
		for(int u = 0; u<RX_Data_Size; u++)
 8000c0e:	42ac      	cmp	r4, r5
 8000c10:	dbf8      	blt.n	8000c04 <AX5243_transmit+0x14c>
		SPI_TR_16(0x28, 0x4);// COMMIT
 8000c12:	2104      	movs	r1, #4
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f7ff fdbb 	bl	8000790 <SPI_TR_16>
		LED_PORT->BSRR = (1<<LED_PIN);
 8000c1a:	2390      	movs	r3, #144	; 0x90
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	619a      	str	r2, [r3, #24]
	((AX5243_used_TIM->CNT) = (0));
 8000c22:	2300      	movs	r3, #0
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <AX5243_transmit+0x1a8>)
	while((AX5243_used_TIM->CNT) < (delay));
 8000c26:	4912      	ldr	r1, [pc, #72]	; (8000c70 <AX5243_transmit+0x1b8>)
	((AX5243_used_TIM->CNT) = (0));
 8000c28:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000c2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d9fc      	bls.n	8000c2a <AX5243_transmit+0x172>
		while((AX5243_IRQ_PORT->IDR & (1<<AX5243_IRQ_PIN)) ||(transmit_timer>10320)){
 8000c30:	2090      	movs	r0, #144	; 0x90
		transmit_timer = 0;
 8000c32:	2400      	movs	r4, #0
		while((AX5243_IRQ_PORT->IDR & (1<<AX5243_IRQ_PIN)) ||(transmit_timer>10320)){
 8000c34:	2520      	movs	r5, #32
	((AX5243_used_TIM->CNT) = (0));
 8000c36:	2600      	movs	r6, #0
		while((AX5243_IRQ_PORT->IDR & (1<<AX5243_IRQ_PIN)) ||(transmit_timer>10320)){
 8000c38:	4f0e      	ldr	r7, [pc, #56]	; (8000c74 <AX5243_transmit+0x1bc>)
	((AX5243_used_TIM->CNT) = (0));
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <AX5243_transmit+0x1a8>)
	while((AX5243_used_TIM->CNT) < (delay));
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <AX5243_transmit+0x1b8>)
		while((AX5243_IRQ_PORT->IDR & (1<<AX5243_IRQ_PIN)) ||(transmit_timer>10320)){
 8000c3e:	05c0      	lsls	r0, r0, #23
 8000c40:	6903      	ldr	r3, [r0, #16]
 8000c42:	421d      	tst	r5, r3
 8000c44:	d105      	bne.n	8000c52 <AX5243_transmit+0x19a>
 8000c46:	42bc      	cmp	r4, r7
 8000c48:	d803      	bhi.n	8000c52 <AX5243_transmit+0x19a>
		LED_PORT->BRR = (1<<LED_PIN);
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	6283      	str	r3, [r0, #40]	; 0x28
	uint8_t error_flag = 0;
 8000c4e:	2000      	movs	r0, #0
 8000c50:	e739      	b.n	8000ac6 <AX5243_transmit+0xe>
		transmit_timer++;
 8000c52:	3401      	adds	r4, #1
	((AX5243_used_TIM->CNT) = (0));
 8000c54:	6256      	str	r6, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000c56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d9fc      	bls.n	8000c56 <AX5243_transmit+0x19e>
 8000c5c:	e7f0      	b.n	8000c40 <AX5243_transmit+0x188>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40000400 	.word	0x40000400
 8000c64:	0000270f 	.word	0x0000270f
 8000c68:	00000f35 	.word	0x00000f35
 8000c6c:	00000f34 	.word	0x00000f34
 8000c70:	0000042d 	.word	0x0000042d
 8000c74:	00002850 	.word	0x00002850

08000c78 <AX5243_set_fr>:
}
*/

uint8_t AX5243_set_fr(uint32_t f_carrier) {
	uint8_t error_flag = 0;
		if((f_carrier<864000000) || (f_carrier>870000000)){
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <AX5243_set_fr+0xa8>)
uint8_t AX5243_set_fr(uint32_t f_carrier) {
 8000c7a:	b510      	push	{r4, lr}
		if((f_carrier<864000000) || (f_carrier>870000000)){
 8000c7c:	18c2      	adds	r2, r0, r3
 8000c7e:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <AX5243_set_fr+0xac>)
uint8_t AX5243_set_fr(uint32_t f_carrier) {
 8000c80:	0004      	movs	r4, r0
			f_carrier = 867000000;
			error_flag = 1;
 8000c82:	2001      	movs	r0, #1
		if((f_carrier<864000000) || (f_carrier>870000000)){
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d900      	bls.n	8000c8a <AX5243_set_fr+0x12>
			SPI_TR_16(0x3D, ((FREQA & 0xFF0000) >> 16));// set FREQB2
			SPI_TR_16(0x3E, ((FREQA & 0xFF00) >> 8));// set FREQB1
			SPI_TR_16(0x3F, (FREQA & 0xFF));// set FREQB0
		}
		return error_flag;
}
 8000c88:	bd10      	pop	{r4, pc}
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000c8a:	2160      	movs	r1, #96	; 0x60
 8000c8c:	3001      	adds	r0, #1
 8000c8e:	f7ff fd7f 	bl	8000790 <SPI_TR_16>
	((AX5243_used_TIM->CNT) = (0));
 8000c92:	2300      	movs	r3, #0
 8000c94:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <AX5243_set_fr+0xb0>)
	while((AX5243_used_TIM->CNT) < (delay));
 8000c96:	4925      	ldr	r1, [pc, #148]	; (8000d2c <AX5243_set_fr+0xb4>)
	((AX5243_used_TIM->CNT) = (0));
 8000c98:	6253      	str	r3, [r2, #36]	; 0x24
	while((AX5243_used_TIM->CNT) < (delay));
 8000c9a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d9fc      	bls.n	8000c9a <AX5243_set_fr+0x22>
			FREQA = (uint32_t)((((uint64_t)f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <AX5243_set_fr+0xb8>)
 8000ca2:	0022      	movs	r2, r4
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2300      	movs	r3, #0
 8000caa:	1880      	adds	r0, r0, r2
 8000cac:	4159      	adcs	r1, r3
 8000cae:	2300      	movs	r3, #0
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <AX5243_set_fr+0xbc>)
 8000cb2:	f7ff fb01 	bl	80002b8 <__aeabi_lmul>
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <AX5243_set_fr+0xc0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f7ff fadc 	bl	8000278 <__aeabi_uldivmod>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	000b      	movs	r3, r1
 8000cc4:	0a04      	lsrs	r4, r0, #8
 8000cc6:	0609      	lsls	r1, r1, #24
 8000cc8:	4321      	orrs	r1, r4
 8000cca:	0610      	lsls	r0, r2, #24
 8000ccc:	1880      	adds	r0, r0, r2
 8000cce:	4159      	adcs	r1, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <AX5243_set_fr+0xbc>)
 8000cd4:	f7ff fad0 	bl	8000278 <__aeabi_uldivmod>
 8000cd8:	4c18      	ldr	r4, [pc, #96]	; (8000d3c <AX5243_set_fr+0xc4>)
			SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24));// set FREQA3
 8000cda:	0e01      	lsrs	r1, r0, #24
			FREQA = (uint32_t)((((uint64_t)f_carrier + (uint64_t)f_carrier_calibration)*(uint64_t)1000000000/(uint64_t)f_xtal)*(uint64_t)16777217/(uint64_t)1000000000);
 8000cdc:	6020      	str	r0, [r4, #0]
			SPI_TR_16(0x34, ((FREQA & 0xFF000000) >> 24));// set FREQA3
 8000cde:	2034      	movs	r0, #52	; 0x34
 8000ce0:	f7ff fd56 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x35, ((FREQA & 0xFF0000) >> 16));// set FREQA2
 8000ce4:	2035      	movs	r0, #53	; 0x35
 8000ce6:	78a1      	ldrb	r1, [r4, #2]
 8000ce8:	f7ff fd52 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x36, ((FREQA & 0xFF00) >> 8));// set FREQA1
 8000cec:	2036      	movs	r0, #54	; 0x36
 8000cee:	7861      	ldrb	r1, [r4, #1]
 8000cf0:	f7ff fd4e 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x37, (FREQA & 0xFF));// set FREQA0
 8000cf4:	2037      	movs	r0, #55	; 0x37
 8000cf6:	7821      	ldrb	r1, [r4, #0]
 8000cf8:	f7ff fd4a 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x3C, ((FREQA & 0xFF000000) >> 24));// set FREQB3
 8000cfc:	203c      	movs	r0, #60	; 0x3c
 8000cfe:	78e1      	ldrb	r1, [r4, #3]
 8000d00:	f7ff fd46 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x3D, ((FREQA & 0xFF0000) >> 16));// set FREQB2
 8000d04:	203d      	movs	r0, #61	; 0x3d
 8000d06:	78a1      	ldrb	r1, [r4, #2]
 8000d08:	f7ff fd42 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x3E, ((FREQA & 0xFF00) >> 8));// set FREQB1
 8000d0c:	203e      	movs	r0, #62	; 0x3e
 8000d0e:	7861      	ldrb	r1, [r4, #1]
 8000d10:	f7ff fd3e 	bl	8000790 <SPI_TR_16>
			SPI_TR_16(0x3F, (FREQA & 0xFF));// set FREQB0
 8000d14:	203f      	movs	r0, #63	; 0x3f
 8000d16:	7821      	ldrb	r1, [r4, #0]
 8000d18:	f7ff fd3a 	bl	8000790 <SPI_TR_16>
	uint8_t error_flag = 0;
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	e7b3      	b.n	8000c88 <AX5243_set_fr+0x10>
 8000d20:	cc806800 	.word	0xcc806800
 8000d24:	005b8d80 	.word	0x005b8d80
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	0000270f 	.word	0x0000270f
 8000d30:	20000008 	.word	0x20000008
 8000d34:	3b9aca00 	.word	0x3b9aca00
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000034 	.word	0x20000034

08000d40 <AX5243_set_pw>:



uint8_t AX5243_set_pw(uint16_t PWR_dbm) {
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	0001      	movs	r1, r0
 8000d44:	b08c      	sub	sp, #48	; 0x30
	uint8_t error_flag = 0;
		if(PWR_dbm>11){
			PWR_dbm = 11;
			error_flag = 1;
 8000d46:	2001      	movs	r0, #1
		if(PWR_dbm>11){
 8000d48:	290b      	cmp	r1, #11
 8000d4a:	d901      	bls.n	8000d50 <AX5243_set_pw+0x10>
			SPI_TR_24(0x170, 0x0);
			SPI_TR_24(0x171, 0x0);

		}
		return error_flag;
}
 8000d4c:	b00c      	add	sp, #48	; 0x30
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
uint32_t a_table[] = {97, 110, 124, 134, 153, 175, 210, 242, 275, 345, 410, 530};
 8000d50:	4668      	mov	r0, sp
 8000d52:	0002      	movs	r2, r0
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <AX5243_set_pw+0xb0>)
a = a_table[Dbm];
 8000d56:	0089      	lsls	r1, r1, #2
uint32_t a_table[] = {97, 110, 124, 134, 153, 175, 210, 242, 275, 345, 410, 530};
 8000d58:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000d5a:	c270      	stmia	r2!, {r4, r5, r6}
 8000d5c:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000d5e:	c270      	stmia	r2!, {r4, r5, r6}
 8000d60:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000d62:	c270      	stmia	r2!, {r4, r5, r6}
 8000d64:	cb70      	ldmia	r3!, {r4, r5, r6}
 8000d66:	c270      	stmia	r2!, {r4, r5, r6}
a = a_table[Dbm];
 8000d68:	5808      	ldr	r0, [r1, r0]
			TXPWRCOEFFB = ((DbmToa1(PWR_dbm)*4096)+500)/1000;
 8000d6a:	21fa      	movs	r1, #250	; 0xfa
 8000d6c:	0300      	lsls	r0, r0, #12
 8000d6e:	30f5      	adds	r0, #245	; 0xf5
 8000d70:	0089      	lsls	r1, r1, #2
 8000d72:	30ff      	adds	r0, #255	; 0xff
 8000d74:	f7ff f9d0 	bl	8000118 <__udivsi3>
 8000d78:	4c1e      	ldr	r4, [pc, #120]	; (8000df4 <AX5243_set_pw+0xb4>)
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000d7a:	2160      	movs	r1, #96	; 0x60
			TXPWRCOEFFB = ((DbmToa1(PWR_dbm)*4096)+500)/1000;
 8000d7c:	8020      	strh	r0, [r4, #0]
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fd06 	bl	8000790 <SPI_TR_16>
			SPI_TR_24(0x168, 0x0);// set TXPWR
 8000d84:	20b4      	movs	r0, #180	; 0xb4
 8000d86:	2100      	movs	r1, #0
 8000d88:	0040      	lsls	r0, r0, #1
 8000d8a:	f7ff fcb7 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x169, 0x0);
 8000d8e:	206a      	movs	r0, #106	; 0x6a
 8000d90:	2100      	movs	r1, #0
 8000d92:	30ff      	adds	r0, #255	; 0xff
 8000d94:	f7ff fcb2 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x16A, ((TXPWRCOEFFB & 0xFF00) >> 8));
 8000d98:	20b5      	movs	r0, #181	; 0xb5
 8000d9a:	8821      	ldrh	r1, [r4, #0]
 8000d9c:	0040      	lsls	r0, r0, #1
 8000d9e:	0a09      	lsrs	r1, r1, #8
 8000da0:	f7ff fcac 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x16B, (TXPWRCOEFFB & 0xFF));
 8000da4:	206c      	movs	r0, #108	; 0x6c
 8000da6:	7821      	ldrb	r1, [r4, #0]
 8000da8:	30ff      	adds	r0, #255	; 0xff
 8000daa:	f7ff fca7 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x16C, 0x0);
 8000dae:	20b6      	movs	r0, #182	; 0xb6
 8000db0:	2100      	movs	r1, #0
 8000db2:	0040      	lsls	r0, r0, #1
 8000db4:	f7ff fca2 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x16D, 0x0);
 8000db8:	206e      	movs	r0, #110	; 0x6e
 8000dba:	2100      	movs	r1, #0
 8000dbc:	30ff      	adds	r0, #255	; 0xff
 8000dbe:	f7ff fc9d 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x16E, 0x0);
 8000dc2:	20b7      	movs	r0, #183	; 0xb7
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	0040      	lsls	r0, r0, #1
 8000dc8:	f7ff fc98 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x16F, 0x0);
 8000dcc:	2070      	movs	r0, #112	; 0x70
 8000dce:	2100      	movs	r1, #0
 8000dd0:	30ff      	adds	r0, #255	; 0xff
 8000dd2:	f7ff fc93 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x170, 0x0);
 8000dd6:	20b8      	movs	r0, #184	; 0xb8
 8000dd8:	2100      	movs	r1, #0
 8000dda:	0040      	lsls	r0, r0, #1
 8000ddc:	f7ff fc8e 	bl	80006fc <SPI_TR_24>
			SPI_TR_24(0x171, 0x0);
 8000de0:	2072      	movs	r0, #114	; 0x72
 8000de2:	2100      	movs	r1, #0
 8000de4:	30ff      	adds	r0, #255	; 0xff
 8000de6:	f7ff fc89 	bl	80006fc <SPI_TR_24>
	uint8_t error_flag = 0;
 8000dea:	2000      	movs	r0, #0
 8000dec:	e7ae      	b.n	8000d4c <AX5243_set_pw+0xc>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	080035b0 	.word	0x080035b0
 8000df4:	20000038 	.word	0x20000038

08000df8 <AX5243_set_fl>:

uint8_t AX5243_set_fl(uint8_t shaping_filter) {
 8000df8:	0003      	movs	r3, r0
 8000dfa:	b510      	push	{r4, lr}
	uint8_t error_flag = 0;
		if(shaping_filter==0){
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d003      	beq.n	8000e08 <AX5243_set_fl+0x10>
		else if(shaping_filter==1){
			SPI_TR_16(0x2, 0x60);// set PWDN
			SPI_TR_24(0x164, 0x5);	// set MODCFGA
		}
		else{
		error_flag = 1;
 8000e00:	2001      	movs	r0, #1
		else if(shaping_filter==1){
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d00b      	beq.n	8000e1e <AX5243_set_fl+0x26>
		shaping_filter=1;
		}
		return error_flag;
}
 8000e06:	bd10      	pop	{r4, pc}
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000e08:	2160      	movs	r1, #96	; 0x60
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f7ff fcc0 	bl	8000790 <SPI_TR_16>
			SPI_TR_24(0x164, 0x1);// MODCFGA
 8000e10:	20b2      	movs	r0, #178	; 0xb2
 8000e12:	2101      	movs	r1, #1
 8000e14:	0040      	lsls	r0, r0, #1
 8000e16:	f7ff fc71 	bl	80006fc <SPI_TR_24>
	uint8_t error_flag = 0;
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e7f3      	b.n	8000e06 <AX5243_set_fl+0xe>
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000e1e:	2160      	movs	r1, #96	; 0x60
 8000e20:	3001      	adds	r0, #1
 8000e22:	f7ff fcb5 	bl	8000790 <SPI_TR_16>
			SPI_TR_24(0x164, 0x5);	// set MODCFGA
 8000e26:	20b2      	movs	r0, #178	; 0xb2
 8000e28:	2105      	movs	r1, #5
 8000e2a:	0040      	lsls	r0, r0, #1
 8000e2c:	f7ff fc66 	bl	80006fc <SPI_TR_24>
	uint8_t error_flag = 0;
 8000e30:	2000      	movs	r0, #0
 8000e32:	e7e8      	b.n	8000e06 <AX5243_set_fl+0xe>

08000e34 <AX5243_set_pd>:

uint8_t AX5243_set_pd(uint8_t p_d) {
 8000e34:	0003      	movs	r3, r0
 8000e36:	b510      	push	{r4, lr}
	uint8_t error_flag = 0;
		if(p_d==0){
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d005      	beq.n	8000e48 <AX5243_set_pd+0x14>
			SPI_TR_16(0x2, 0x60);       // set PWDN
			SPI_TR_24(0xf5f, 0xe1);		//dMODCFGP
		}
		else if(p_d==1){
 8000e3c:	2801      	cmp	r0, #1
 8000e3e:	d017      	beq.n	8000e70 <AX5243_set_pd+0x3c>
		else if(p_d==2){
			SPI_TR_16(0x2, 0x60);// set PWDN
			SPI_TR_24(0xf5f, 0xf1);	//dMODCFGP
		}
		else{
		error_flag = 1;
 8000e40:	2001      	movs	r0, #1
		else if(p_d==2){
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d00a      	beq.n	8000e5c <AX5243_set_pd+0x28>
		}
		return error_flag;
}
 8000e46:	bd10      	pop	{r4, pc}
			SPI_TR_16(0x2, 0x60);       // set PWDN
 8000e48:	2160      	movs	r1, #96	; 0x60
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff fca0 	bl	8000790 <SPI_TR_16>
			SPI_TR_24(0xf5f, 0xe1);		//dMODCFGP
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <AX5243_set_pd+0x50>)
 8000e52:	21e1      	movs	r1, #225	; 0xe1
 8000e54:	f7ff fc52 	bl	80006fc <SPI_TR_24>
	uint8_t error_flag = 0;
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7f4      	b.n	8000e46 <AX5243_set_pd+0x12>
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000e5c:	2160      	movs	r1, #96	; 0x60
 8000e5e:	3001      	adds	r0, #1
 8000e60:	f7ff fc96 	bl	8000790 <SPI_TR_16>
			SPI_TR_24(0xf5f, 0xf1);	//dMODCFGP
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <AX5243_set_pd+0x50>)
 8000e66:	21f1      	movs	r1, #241	; 0xf1
 8000e68:	f7ff fc48 	bl	80006fc <SPI_TR_24>
	uint8_t error_flag = 0;
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7ea      	b.n	8000e46 <AX5243_set_pd+0x12>
			SPI_TR_16(0x2, 0x60);// set PWDN
 8000e70:	2160      	movs	r1, #96	; 0x60
 8000e72:	2002      	movs	r0, #2
 8000e74:	f7ff fc8c 	bl	8000790 <SPI_TR_16>
			SPI_TR_24(0xf5f, 0xe9);	//dMODCFGP
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <AX5243_set_pd+0x50>)
 8000e7a:	21e9      	movs	r1, #233	; 0xe9
 8000e7c:	f7ff fc3e 	bl	80006fc <SPI_TR_24>
	uint8_t error_flag = 0;
 8000e80:	2000      	movs	r0, #0
 8000e82:	e7e0      	b.n	8000e46 <AX5243_set_pd+0x12>
 8000e84:	00000f5f 	.word	0x00000f5f

08000e88 <AX5243_rs>:
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	f7ff fccd 	bl	8000828 <AX5243_init>
 8000e8e:	bd10      	pop	{r4, pc}

08000e90 <I2C_Start>:
}

void I2C_Start(void)
{
	uint8_t ind = 0;
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000e90:	2390      	movs	r3, #144	; 0x90
 8000e92:	2201      	movs	r2, #1
 8000e94:	05db      	lsls	r3, r3, #23
{
 8000e96:	b5f0      	push	{r4, r5, r6, r7, lr}
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000e98:	619a      	str	r2, [r3, #24]
((used_TIM->CNT) = (0));
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <I2C_Start+0x94>)
 8000e9e:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000ea0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ea2:	2b09      	cmp	r3, #9
 8000ea4:	d9fc      	bls.n	8000ea0 <I2C_Start+0x10>
        cdelay(ti_delay);
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000ea6:	2390      	movs	r3, #144	; 0x90
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	6199      	str	r1, [r3, #24]
((used_TIM->CNT) = (0));
 8000eae:	2300      	movs	r3, #0
 8000eb0:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <I2C_Start+0x94>)
 8000eb4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000eb6:	2b09      	cmp	r3, #9
 8000eb8:	d9fc      	bls.n	8000eb4 <I2C_Start+0x24>
        cdelay(ti_delay);

        while((!(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))) && (ind < 20))
 8000eba:	2090      	movs	r0, #144	; 0x90
 8000ebc:	05c0      	lsls	r0, r0, #23
 8000ebe:	6903      	ldr	r3, [r0, #16]
 8000ec0:	07db      	lsls	r3, r3, #31
 8000ec2:	d419      	bmi.n	8000ef8 <I2C_Start+0x68>
        {
        I2C_SCL_PORT->BRR  = (1<<I2C_SCL_PIN);
 8000ec4:	2302      	movs	r3, #2
        while((!(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))) && (ind < 20))
 8000ec6:	2114      	movs	r1, #20
        I2C_SCL_PORT->BRR  = (1<<I2C_SCL_PIN);
 8000ec8:	2702      	movs	r7, #2
((used_TIM->CNT) = (0));
 8000eca:	2600      	movs	r6, #0
 8000ecc:	2500      	movs	r5, #0
        while((!(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))) && (ind < 20))
 8000ece:	2401      	movs	r4, #1
        I2C_SCL_PORT->BRR  = (1<<I2C_SCL_PIN);
 8000ed0:	469c      	mov	ip, r3
((used_TIM->CNT) = (0));
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <I2C_Start+0x94>)
        I2C_SCL_PORT->BRR  = (1<<I2C_SCL_PIN);
 8000ed4:	6287      	str	r7, [r0, #40]	; 0x28
((used_TIM->CNT) = (0));
 8000ed6:	625d      	str	r5, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eda:	2a09      	cmp	r2, #9
 8000edc:	d9fc      	bls.n	8000ed8 <I2C_Start+0x48>
        cdelay(ti_delay);
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000ede:	4662      	mov	r2, ip
 8000ee0:	6182      	str	r2, [r0, #24]
((used_TIM->CNT) = (0));
 8000ee2:	625e      	str	r6, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee6:	2a09      	cmp	r2, #9
 8000ee8:	d9fc      	bls.n	8000ee4 <I2C_Start+0x54>
        while((!(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))) && (ind < 20))
 8000eea:	6902      	ldr	r2, [r0, #16]
 8000eec:	4214      	tst	r4, r2
 8000eee:	d103      	bne.n	8000ef8 <I2C_Start+0x68>
 8000ef0:	3901      	subs	r1, #1
 8000ef2:	b2c9      	uxtb	r1, r1
 8000ef4:	2900      	cmp	r1, #0
 8000ef6:	d1ed      	bne.n	8000ed4 <I2C_Start+0x44>
        cdelay(ti_delay);
        ind++;
        }
        I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000ef8:	2390      	movs	r3, #144	; 0x90
 8000efa:	2201      	movs	r2, #1
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
((used_TIM->CNT) = (0));
 8000f00:	2300      	movs	r3, #0
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <I2C_Start+0x94>)
 8000f04:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f06:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d9fc      	bls.n	8000f06 <I2C_Start+0x76>
        cdelay(ti_delay);
        I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8000f0c:	2390      	movs	r3, #144	; 0x90
 8000f0e:	2102      	movs	r1, #2
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	6299      	str	r1, [r3, #40]	; 0x28
((used_TIM->CNT) = (0));
 8000f14:	2300      	movs	r3, #0
 8000f16:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f18:	4a02      	ldr	r2, [pc, #8]	; (8000f24 <I2C_Start+0x94>)
 8000f1a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d9fc      	bls.n	8000f1a <I2C_Start+0x8a>
        cdelay(ti_delay);
}
 8000f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40000400 	.word	0x40000400

08000f28 <I2C_Stop>:
void I2C_Stop(void)
{
        I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000f28:	2390      	movs	r3, #144	; 0x90
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
((used_TIM->CNT) = (0));
 8000f30:	2300      	movs	r3, #0
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <I2C_Stop+0x40>)
 8000f34:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f36:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d9fc      	bls.n	8000f36 <I2C_Stop+0xe>
        cdelay(ti_delay);
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	2102      	movs	r1, #2
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	6199      	str	r1, [r3, #24]
((used_TIM->CNT) = (0));
 8000f44:	2300      	movs	r3, #0
 8000f46:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <I2C_Stop+0x40>)
 8000f4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f4c:	2b09      	cmp	r3, #9
 8000f4e:	d9fc      	bls.n	8000f4a <I2C_Stop+0x22>
        cdelay(ti_delay);
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000f50:	2390      	movs	r3, #144	; 0x90
 8000f52:	2101      	movs	r1, #1
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	6199      	str	r1, [r3, #24]
((used_TIM->CNT) = (0));
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f5c:	4a02      	ldr	r2, [pc, #8]	; (8000f68 <I2C_Stop+0x40>)
 8000f5e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	d9fc      	bls.n	8000f5e <I2C_Stop+0x36>
        cdelay(ti_delay);
}
 8000f64:	4770      	bx	lr
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40000400 	.word	0x40000400

08000f6c <I2C_Write_Byte>:
       {
       I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
       }
       else
       {
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000f6c:	2301      	movs	r3, #1
{
 8000f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000f70:	2490      	movs	r4, #144	; 0x90
{
 8000f72:	2108      	movs	r1, #8
((used_TIM->CNT) = (0));
 8000f74:	2700      	movs	r7, #0
 8000f76:	2600      	movs	r6, #0
       }
       cdelay(ti_delay);
       I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000f78:	2502      	movs	r5, #2
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000f7a:	469c      	mov	ip, r3
((used_TIM->CNT) = (0));
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <I2C_Write_Byte+0x74>)
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000f7e:	05e4      	lsls	r4, r4, #23
       if(data & 0x80)
 8000f80:	b242      	sxtb	r2, r0
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	db29      	blt.n	8000fda <I2C_Write_Byte+0x6e>
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000f86:	4662      	mov	r2, ip
 8000f88:	62a2      	str	r2, [r4, #40]	; 0x28
((used_TIM->CNT) = (0));
 8000f8a:	625e      	str	r6, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8e:	2a09      	cmp	r2, #9
 8000f90:	d9fc      	bls.n	8000f8c <I2C_Write_Byte+0x20>
       I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000f92:	61a5      	str	r5, [r4, #24]
((used_TIM->CNT) = (0));
 8000f94:	625f      	str	r7, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f98:	2a09      	cmp	r2, #9
 8000f9a:	d9fc      	bls.n	8000f96 <I2C_Write_Byte+0x2a>
       cdelay(ti_delay);
       I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8000f9c:	3901      	subs	r1, #1
       data=data<<1;
 8000f9e:	0040      	lsls	r0, r0, #1
 8000fa0:	b2c9      	uxtb	r1, r1
       I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8000fa2:	62a5      	str	r5, [r4, #40]	; 0x28
       data=data<<1;
 8000fa4:	b2c0      	uxtb	r0, r0
       for(i=0;i<8;i++)
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d1ea      	bne.n	8000f80 <I2C_Write_Byte+0x14>
while((used_TIM->CNT) < (ms_delay));
 8000faa:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <I2C_Write_Byte+0x74>)
((used_TIM->CNT) = (0));
 8000fac:	6259      	str	r1, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000fae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fb0:	2b09      	cmp	r3, #9
 8000fb2:	d9fc      	bls.n	8000fae <I2C_Write_Byte+0x42>
       }
       cdelay(ti_delay);
       I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000fb4:	2390      	movs	r3, #144	; 0x90
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	6199      	str	r1, [r3, #24]
((used_TIM->CNT) = (0));
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <I2C_Write_Byte+0x74>)
 8000fc2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d9fc      	bls.n	8000fc2 <I2C_Write_Byte+0x56>
       cdelay(ti_delay);
       ACK = !(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN));
 8000fc8:	2390      	movs	r3, #144	; 0x90
       I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8000fca:	2102      	movs	r1, #2
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000fcc:	2001      	movs	r0, #1
       ACK = !(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN));
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	691a      	ldr	r2, [r3, #16]
       I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8000fd2:	6299      	str	r1, [r3, #40]	; 0x28
       I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8000fd4:	6298      	str	r0, [r3, #40]	; 0x28
       return ACK;
 8000fd6:	4390      	bics	r0, r2
}
 8000fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
       I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000fda:	4662      	mov	r2, ip
 8000fdc:	61a2      	str	r2, [r4, #24]
 8000fde:	e7d4      	b.n	8000f8a <I2C_Write_Byte+0x1e>
 8000fe0:	40000400 	.word	0x40000400

08000fe4 <I2C_Read_Byte>:
((used_TIM->CNT) = (0));
 8000fe4:	2200      	movs	r2, #0

uint8_t I2C_Read_Byte(uint8_t ACK)
{
 8000fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
        uint8_t i;
        uint8_t data = 0;

        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000fe8:	2490      	movs	r4, #144	; 0x90
{
 8000fea:	46c6      	mov	lr, r8
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000fec:	2301      	movs	r3, #1
{
 8000fee:	4680      	mov	r8, r0
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000ff0:	2108      	movs	r1, #8
        uint8_t data = 0;
 8000ff2:	2000      	movs	r0, #0
((used_TIM->CNT) = (0));
 8000ff4:	4694      	mov	ip, r2
 8000ff6:	2700      	movs	r7, #0
      for(i=0;i<8;i++)
        {
    	cdelay(ti_delay);
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8000ff8:	2502      	movs	r5, #2
        cdelay(ti_delay);
        data<<=1;
      if(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))
 8000ffa:	2601      	movs	r6, #1
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8000ffc:	05e4      	lsls	r4, r4, #23
{
 8000ffe:	b500      	push	{lr}
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8001000:	61a3      	str	r3, [r4, #24]
((used_TIM->CNT) = (0));
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <I2C_Read_Byte+0x88>)
 8001004:	625f      	str	r7, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001008:	2a09      	cmp	r2, #9
 800100a:	d9fc      	bls.n	8001006 <I2C_Read_Byte+0x22>
((used_TIM->CNT) = (0));
 800100c:	4662      	mov	r2, ip
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 800100e:	61a5      	str	r5, [r4, #24]
((used_TIM->CNT) = (0));
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001014:	2a09      	cmp	r2, #9
 8001016:	d9fc      	bls.n	8001012 <I2C_Read_Byte+0x2e>
      if(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))
 8001018:	6922      	ldr	r2, [r4, #16]
        data<<=1;
 800101a:	0040      	lsls	r0, r0, #1
 800101c:	b2c0      	uxtb	r0, r0
      if(I2C_SDA_PORT->IDR & (1<<I2C_SDA_PIN))
 800101e:	4216      	tst	r6, r2
 8001020:	d001      	beq.n	8001026 <I2C_Read_Byte+0x42>
        data++;
 8001022:	3001      	adds	r0, #1
 8001024:	b2c0      	uxtb	r0, r0
        I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 8001026:	3901      	subs	r1, #1
 8001028:	b2c9      	uxtb	r1, r1
 800102a:	62a5      	str	r5, [r4, #40]	; 0x28
      for(i=0;i<8;i++)
 800102c:	2900      	cmp	r1, #0
 800102e:	d1e9      	bne.n	8001004 <I2C_Read_Byte+0x20>
        }
      if (ACK)
 8001030:	4643      	mov	r3, r8
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <I2C_Read_Byte+0x56>
        I2C_SDA_PORT->BRR = (1<<I2C_SDA_PIN);
 8001036:	2301      	movs	r3, #1
 8001038:	62a3      	str	r3, [r4, #40]	; 0x28
((used_TIM->CNT) = (0));
 800103a:	2300      	movs	r3, #0
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <I2C_Read_Byte+0x88>)
 800103e:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001040:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001042:	2b09      	cmp	r3, #9
 8001044:	d9fc      	bls.n	8001040 <I2C_Read_Byte+0x5c>
        cdelay(ti_delay);
        I2C_SCL_PORT->BSRR = (1<<I2C_SCL_PIN);
 8001046:	2390      	movs	r3, #144	; 0x90
 8001048:	2102      	movs	r1, #2
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	6199      	str	r1, [r3, #24]
((used_TIM->CNT) = (0));
 800104e:	2300      	movs	r3, #0
 8001050:	6253      	str	r3, [r2, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <I2C_Read_Byte+0x88>)
 8001054:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001056:	2b09      	cmp	r3, #9
 8001058:	d9fc      	bls.n	8001054 <I2C_Read_Byte+0x70>
        cdelay(ti_delay);
        I2C_SCL_PORT->BRR = (1<<I2C_SCL_PIN);
 800105a:	2390      	movs	r3, #144	; 0x90
 800105c:	2202      	movs	r2, #2
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
        I2C_SDA_PORT->BSRR = (1<<I2C_SDA_PIN);
 8001062:	3a01      	subs	r2, #1
 8001064:	619a      	str	r2, [r3, #24]
        return data;
}
 8001066:	bc80      	pop	{r7}
 8001068:	46b8      	mov	r8, r7
 800106a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106c:	40000400 	.word	0x40000400

08001070 <SPI2_Write_Byte>:


void SPI2_Write_Byte(uint8_t addr, uint8_t data)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 8001072:	2490      	movs	r4, #144	; 0x90
 8001074:	2302      	movs	r3, #2
{
 8001076:	46c6      	mov	lr, r8
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <SPI2_Write_Byte+0x68>)
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 800107a:	05e4      	lsls	r4, r4, #23
{
 800107c:	b500      	push	{lr}
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 800107e:	61a3      	str	r3, [r4, #24]
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
 8001080:	6293      	str	r3, [r2, #40]	; 0x28
	  uint8_t bit;
	  uint16_t tr_data = 0;
	  uint8_t rw = 0;
	  tr_data = data + (((addr)&0x7F)<<8) + (rw<<15);
 8001082:	23fe      	movs	r3, #254	; 0xfe
 8001084:	0200      	lsls	r0, r0, #8
 8001086:	01db      	lsls	r3, r3, #7
 8001088:	4018      	ands	r0, r3
    for(uint8_t i = 16; i > 0; i--)
	{
		bit = (tr_data >>(i-1)) & 1;
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 800108a:	2302      	movs	r3, #2
 800108c:	1841      	adds	r1, r0, r1
		bit = (tr_data >>(i-1)) & 1;
 800108e:	2501      	movs	r5, #1
	  tr_data = data + (((addr)&0x7F)<<8) + (rw<<15);
 8001090:	200f      	movs	r0, #15
((used_TIM->CNT) = (0));
 8001092:	2700      	movs	r7, #0
 8001094:	2600      	movs	r6, #0
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001096:	4698      	mov	r8, r3
 8001098:	469c      	mov	ip, r3
((used_TIM->CNT) = (0));
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <SPI2_Write_Byte+0x6c>)
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 800109c:	4662      	mov	r2, ip
 800109e:	62a2      	str	r2, [r4, #40]	; 0x28
		bit = (tr_data >>(i-1)) & 1;
 80010a0:	000a      	movs	r2, r1
 80010a2:	4102      	asrs	r2, r0
		if(bit)
 80010a4:	4215      	tst	r5, r2
 80010a6:	d015      	beq.n	80010d4 <SPI2_Write_Byte+0x64>
		{
		SPI_SENS_MOSI_PORT->BSRR = (1<<SPI_SENS_MOSI_PIN);
 80010a8:	61a5      	str	r5, [r4, #24]
((used_TIM->CNT) = (0));
 80010aa:	625e      	str	r6, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 80010ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ae:	2a01      	cmp	r2, #1
 80010b0:	d9fc      	bls.n	80010ac <SPI2_Write_Byte+0x3c>
		else
		{
		SPI_SENS_MOSI_PORT->BRR = (1<<SPI_SENS_MOSI_PIN);
		}
		cdelay(ts_delay);
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80010b2:	4642      	mov	r2, r8
 80010b4:	61a2      	str	r2, [r4, #24]
((used_TIM->CNT) = (0));
 80010b6:	625f      	str	r7, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 80010b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d9fc      	bls.n	80010b8 <SPI2_Write_Byte+0x48>
    for(uint8_t i = 16; i > 0; i--)
 80010be:	3801      	subs	r0, #1
 80010c0:	d2ec      	bcs.n	800109c <SPI2_Write_Byte+0x2c>
		cdelay(ts_delay);
	}
    SPI_SENS_SS_PORT->BSRR = (1<<SPI_SENS_SS_PIN);
 80010c2:	2302      	movs	r3, #2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <SPI2_Write_Byte+0x68>)
 80010c6:	6193      	str	r3, [r2, #24]
    SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80010c8:	2290      	movs	r2, #144	; 0x90
 80010ca:	05d2      	lsls	r2, r2, #23
 80010cc:	6193      	str	r3, [r2, #24]
}
 80010ce:	bc80      	pop	{r7}
 80010d0:	46b8      	mov	r8, r7
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SPI_SENS_MOSI_PORT->BRR = (1<<SPI_SENS_MOSI_PIN);
 80010d4:	62a5      	str	r5, [r4, #40]	; 0x28
 80010d6:	e7e8      	b.n	80010aa <SPI2_Write_Byte+0x3a>
 80010d8:	48001400 	.word	0x48001400
 80010dc:	40000400 	.word	0x40000400

080010e0 <SPI2_Read_Byte>:

uint8_t SPI2_Read_Byte(uint8_t addr)
{
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80010e0:	2390      	movs	r3, #144	; 0x90
{
 80010e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80010e4:	2202      	movs	r2, #2
{
 80010e6:	4646      	mov	r6, r8
 80010e8:	464f      	mov	r7, r9
 80010ea:	46d6      	mov	lr, sl
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
	  uint8_t bit;
	  uint16_t tr_data = 0;
	  uint8_t rs_data = 0;
	  uint8_t rw = 1;
	  tr_data = (((addr)&0x7F)<<8) + (rw<<15);
 80010ec:	0205      	lsls	r5, r0, #8
 80010ee:	20fe      	movs	r0, #254	; 0xfe
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
 80010f0:	492d      	ldr	r1, [pc, #180]	; (80011a8 <SPI2_Read_Byte+0xc8>)
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80010f2:	05db      	lsls	r3, r3, #23
{
 80010f4:	b5c0      	push	{r6, r7, lr}
	SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 80010f6:	619a      	str	r2, [r3, #24]
	SPI_SENS_SS_PORT->BRR = (1<<SPI_SENS_SS_PIN);
 80010f8:	628a      	str	r2, [r1, #40]	; 0x28
	  tr_data = (((addr)&0x7F)<<8) + (rw<<15);
 80010fa:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <SPI2_Read_Byte+0xcc>)
 80010fc:	01c0      	lsls	r0, r0, #7
 80010fe:	4694      	mov	ip, r2
 8001100:	4005      	ands	r5, r0
    for(uint8_t i = 16; i > 8; i--)
	{
		bit = (tr_data >>(i-1)) & 1;
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001102:	0018      	movs	r0, r3
 8001104:	2302      	movs	r3, #2
	  tr_data = (((addr)&0x7F)<<8) + (rw<<15);
 8001106:	210f      	movs	r1, #15
		bit = (tr_data >>(i-1)) & 1;
 8001108:	2401      	movs	r4, #1
((used_TIM->CNT) = (0));
 800110a:	2700      	movs	r7, #0
 800110c:	2600      	movs	r6, #0
	  tr_data = (((addr)&0x7F)<<8) + (rw<<15);
 800110e:	4465      	add	r5, ip
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001110:	4698      	mov	r8, r3
 8001112:	469c      	mov	ip, r3
((used_TIM->CNT) = (0));
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <SPI2_Read_Byte+0xd0>)
 8001116:	b2ad      	uxth	r5, r5
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001118:	4662      	mov	r2, ip
 800111a:	6282      	str	r2, [r0, #40]	; 0x28
		bit = (tr_data >>(i-1)) & 1;
 800111c:	002a      	movs	r2, r5
 800111e:	410a      	asrs	r2, r1
		if(bit)
 8001120:	4214      	tst	r4, r2
 8001122:	d03e      	beq.n	80011a2 <SPI2_Read_Byte+0xc2>
		{
		SPI_SENS_MOSI_PORT->BSRR = (1<<SPI_SENS_MOSI_PIN);
 8001124:	6184      	str	r4, [r0, #24]
((used_TIM->CNT) = (0));
 8001126:	625e      	str	r6, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112a:	2a01      	cmp	r2, #1
 800112c:	d9fc      	bls.n	8001128 <SPI2_Read_Byte+0x48>
		else
		{
	  SPI_SENS_MOSI_PORT->BRR = (1<<SPI_SENS_MOSI_PIN);
		}
		cdelay(ts_delay);
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 800112e:	4642      	mov	r2, r8
 8001130:	6182      	str	r2, [r0, #24]
((used_TIM->CNT) = (0));
 8001132:	625f      	str	r7, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001136:	2a01      	cmp	r2, #1
 8001138:	d9fc      	bls.n	8001134 <SPI2_Read_Byte+0x54>
    for(uint8_t i = 16; i > 8; i--)
 800113a:	3901      	subs	r1, #1
 800113c:	2907      	cmp	r1, #7
 800113e:	d1eb      	bne.n	8001118 <SPI2_Read_Byte+0x38>
	{
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
		cdelay(ts_delay);
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
	    if(SPI_SENS_MISO_PORT->IDR & (1<<SPI_SENS_MISO_PIN)){
	    rs_data = rs_data | (0x1)<<(i-1);
 8001140:	2201      	movs	r2, #1
	  uint8_t rs_data = 0;
 8001142:	2300      	movs	r3, #0
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001144:	2490      	movs	r4, #144	; 0x90
	    if(SPI_SENS_MISO_PORT->IDR & (1<<SPI_SENS_MISO_PIN)){
 8001146:	2580      	movs	r5, #128	; 0x80
((used_TIM->CNT) = (0));
 8001148:	2700      	movs	r7, #0
 800114a:	2600      	movs	r6, #0
	    rs_data = rs_data | (0x1)<<(i-1);
 800114c:	4690      	mov	r8, r2
	  uint8_t rs_data = 0;
 800114e:	4699      	mov	r9, r3
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001150:	3302      	adds	r3, #2
 8001152:	469c      	mov	ip, r3
 8001154:	469a      	mov	sl, r3
((used_TIM->CNT) = (0));
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <SPI2_Read_Byte+0xd0>)
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 8001158:	05e4      	lsls	r4, r4, #23
	    if(SPI_SENS_MISO_PORT->IDR & (1<<SPI_SENS_MISO_PIN)){
 800115a:	00ed      	lsls	r5, r5, #3
		SPI_SENS_CLK_PORT->BRR = (1<<SPI_SENS_CLK_PIN);
 800115c:	4652      	mov	r2, sl
 800115e:	62a2      	str	r2, [r4, #40]	; 0x28
((used_TIM->CNT) = (0));
 8001160:	625e      	str	r6, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001164:	2a01      	cmp	r2, #1
 8001166:	d9fc      	bls.n	8001162 <SPI2_Read_Byte+0x82>
		SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 8001168:	4662      	mov	r2, ip
 800116a:	61a2      	str	r2, [r4, #24]
	    if(SPI_SENS_MISO_PORT->IDR & (1<<SPI_SENS_MISO_PIN)){
 800116c:	6922      	ldr	r2, [r4, #16]
 800116e:	422a      	tst	r2, r5
 8001170:	d005      	beq.n	800117e <SPI2_Read_Byte+0x9e>
	    rs_data = rs_data | (0x1)<<(i-1);
 8001172:	4642      	mov	r2, r8
 8001174:	4648      	mov	r0, r9
 8001176:	408a      	lsls	r2, r1
 8001178:	4302      	orrs	r2, r0
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	4691      	mov	r9, r2
((used_TIM->CNT) = (0));
 800117e:	625f      	str	r7, [r3, #36]	; 0x24
while((used_TIM->CNT) < (ms_delay));
 8001180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001182:	2a01      	cmp	r2, #1
 8001184:	d9fc      	bls.n	8001180 <SPI2_Read_Byte+0xa0>
    for(uint8_t i = 8; i > 0; i--)
 8001186:	3901      	subs	r1, #1
 8001188:	d2e8      	bcs.n	800115c <SPI2_Read_Byte+0x7c>
	    }
		cdelay(ts_delay);
	}
    SPI_SENS_CLK_PORT->BSRR = (1<<SPI_SENS_CLK_PIN);
 800118a:	2290      	movs	r2, #144	; 0x90
 800118c:	2302      	movs	r3, #2
 800118e:	05d2      	lsls	r2, r2, #23
 8001190:	6193      	str	r3, [r2, #24]
    SPI_SENS_SS_PORT->BSRR = (1<<SPI_SENS_SS_PIN);
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SPI2_Read_Byte+0xc8>)
	  return rs_data;
}
 8001194:	4648      	mov	r0, r9
    SPI_SENS_SS_PORT->BSRR = (1<<SPI_SENS_SS_PIN);
 8001196:	6193      	str	r3, [r2, #24]
}
 8001198:	bce0      	pop	{r5, r6, r7}
 800119a:	46ba      	mov	sl, r7
 800119c:	46b1      	mov	r9, r6
 800119e:	46a8      	mov	r8, r5
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  SPI_SENS_MOSI_PORT->BRR = (1<<SPI_SENS_MOSI_PIN);
 80011a2:	6284      	str	r4, [r0, #40]	; 0x28
 80011a4:	e7bf      	b.n	8001126 <SPI2_Read_Byte+0x46>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	48001400 	.word	0x48001400
 80011ac:	ffff8000 	.word	0xffff8000
 80011b0:	40000400 	.word	0x40000400

080011b4 <Ascii2ToHex.part.0>:
		error_flag = 1;
	}
	hex_num = s_l + (s_h << 4);
	return hex_num;
}
uint16_t Ascii2ToHex(uint8_t *s, uint16_t len, uint8_t number) {
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	46d6      	mov	lr, sl
 80011b8:	464f      	mov	r7, r9
 80011ba:	4646      	mov	r6, r8
	uint16_t ind = 0;
	if ((len - number) % 2) {
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 80011bc:	3901      	subs	r1, #1
 80011be:	b289      	uxth	r1, r1
uint16_t Ascii2ToHex(uint8_t *s, uint16_t len, uint8_t number) {
 80011c0:	0004      	movs	r4, r0
 80011c2:	b5c0      	push	{r6, r7, lr}
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 80011c4:	4281      	cmp	r1, r0
 80011c6:	d254      	bcs.n	8001272 <Ascii2ToHex.part.0+0xbe>
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <Ascii2ToHex.part.0+0xc4>)
	uint16_t ind = 0;
 80011ca:	2000      	movs	r0, #0
 80011cc:	4698      	mov	r8, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4a2a      	ldr	r2, [pc, #168]	; (800127c <Ascii2ToHex.part.0+0xc8>)
 80011d2:	4699      	mov	r9, r3
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	469a      	mov	sl, r3
			}					// C letter
			else if ((u2_rx_buff[i] > 0x60) && (u2_rx_buff[i] < 0x67)) {
				u2_rx_buff[i] = u2_rx_buff[i] - 0x57;
			} 					// m letter
			else {
				u2_rx_buff[i] = 0;
 80011d8:	469c      	mov	ip, r3
 80011da:	4d29      	ldr	r5, [pc, #164]	; (8001280 <Ascii2ToHex.part.0+0xcc>)
			if ((u2_rx_buff[i] > 0x2f) && (u2_rx_buff[i] < 0x3a)) {
 80011dc:	5c56      	ldrb	r6, [r2, r1]
 80011de:	0033      	movs	r3, r6
 80011e0:	3b30      	subs	r3, #48	; 0x30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	d92d      	bls.n	8001244 <Ascii2ToHex.part.0+0x90>
			else if ((u2_rx_buff[i] > 0x40) && (u2_rx_buff[i] < 0x47)) {
 80011e8:	0033      	movs	r3, r6
 80011ea:	3b41      	subs	r3, #65	; 0x41
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d824      	bhi.n	800123a <Ascii2ToHex.part.0+0x86>
				u2_rx_buff[i] = u2_rx_buff[i] - 0x37;
 80011f0:	3e37      	subs	r6, #55	; 0x37
 80011f2:	5456      	strb	r6, [r2, r1]
				error_flag = 1;
			}											// ERROR
			if ((u2_rx_buff[i + 1] > 0x2f) && (u2_rx_buff[i + 1] < 0x3a)) {
 80011f4:	1c4f      	adds	r7, r1, #1
 80011f6:	5dd6      	ldrb	r6, [r2, r7]
 80011f8:	0033      	movs	r3, r6
 80011fa:	3b30      	subs	r3, #48	; 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d905      	bls.n	800120e <Ascii2ToHex.part.0+0x5a>
				u2_rx_buff[i + 1] = u2_rx_buff[i + 1] - 0x30;
			}	// number
			else if ((u2_rx_buff[i + 1] > 0x40) && (u2_rx_buff[i + 1] < 0x47)) {
 8001202:	0033      	movs	r3, r6
 8001204:	3b41      	subs	r3, #65	; 0x41
 8001206:	2b05      	cmp	r3, #5
 8001208:	d81e      	bhi.n	8001248 <Ascii2ToHex.part.0+0x94>
				u2_rx_buff[i + 1] = u2_rx_buff[i + 1] - 0x37;
 800120a:	3e37      	subs	r6, #55	; 0x37
 800120c:	b2f3      	uxtb	r3, r6
 800120e:	55d3      	strb	r3, [r2, r7]
			} 	    // m letter
			else {
				u2_rx_buff[i + 1] = 0;
				error_flag = 1;
			}									// ERROR
			tx_buff[ind] = u2_rx_buff[i + 1] + (u2_rx_buff[i] << 4);
 8001210:	5c57      	ldrb	r7, [r2, r1]
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 8001212:	3102      	adds	r1, #2
			tx_buff[ind] = u2_rx_buff[i + 1] + (u2_rx_buff[i] << 4);
 8001214:	013f      	lsls	r7, r7, #4
 8001216:	19db      	adds	r3, r3, r7
 8001218:	542b      	strb	r3, [r5, r0]
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 800121a:	b289      	uxth	r1, r1
			ind++;
 800121c:	3001      	adds	r0, #1
 800121e:	b280      	uxth	r0, r0
		for (uint16_t i = number - 1; i < len; i = i + 2) {
 8001220:	42a1      	cmp	r1, r4
 8001222:	d3db      	bcc.n	80011dc <Ascii2ToHex.part.0+0x28>
 8001224:	4653      	mov	r3, sl
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <Ascii2ToHex.part.0+0x7c>
 800122a:	4643      	mov	r3, r8
 800122c:	464a      	mov	r2, r9
 800122e:	701a      	strb	r2, [r3, #0]
		}
	} else {
		error_flag = 1;
	}
	return ind;
}
 8001230:	bce0      	pop	{r5, r6, r7}
 8001232:	46ba      	mov	sl, r7
 8001234:	46b1      	mov	r9, r6
 8001236:	46a8      	mov	r8, r5
 8001238:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if ((u2_rx_buff[i] > 0x60) && (u2_rx_buff[i] < 0x67)) {
 800123a:	0033      	movs	r3, r6
 800123c:	3b61      	subs	r3, #97	; 0x61
 800123e:	2b05      	cmp	r3, #5
 8001240:	d80a      	bhi.n	8001258 <Ascii2ToHex.part.0+0xa4>
				u2_rx_buff[i] = u2_rx_buff[i] - 0x57;
 8001242:	330a      	adds	r3, #10
 8001244:	5453      	strb	r3, [r2, r1]
 8001246:	e7d5      	b.n	80011f4 <Ascii2ToHex.part.0+0x40>
			else if ((u2_rx_buff[i + 1] > 0x60) && (u2_rx_buff[i + 1] < 0x67)) {
 8001248:	0033      	movs	r3, r6
 800124a:	3b61      	subs	r3, #97	; 0x61
 800124c:	2b05      	cmp	r3, #5
 800124e:	d809      	bhi.n	8001264 <Ascii2ToHex.part.0+0xb0>
				u2_rx_buff[i + 1] = u2_rx_buff[i + 1] - 0x57;
 8001250:	330a      	adds	r3, #10
 8001252:	b2db      	uxtb	r3, r3
 8001254:	55d3      	strb	r3, [r2, r7]
 8001256:	e7db      	b.n	8001210 <Ascii2ToHex.part.0+0x5c>
				u2_rx_buff[i] = 0;
 8001258:	4663      	mov	r3, ip
 800125a:	5453      	strb	r3, [r2, r1]
 800125c:	2301      	movs	r3, #1
 800125e:	469a      	mov	sl, r3
				error_flag = 1;
 8001260:	4699      	mov	r9, r3
 8001262:	e7c7      	b.n	80011f4 <Ascii2ToHex.part.0+0x40>
				u2_rx_buff[i + 1] = 0;
 8001264:	4663      	mov	r3, ip
 8001266:	2601      	movs	r6, #1
 8001268:	55d3      	strb	r3, [r2, r7]
 800126a:	46b2      	mov	sl, r6
 800126c:	2300      	movs	r3, #0
				error_flag = 1;
 800126e:	46b1      	mov	r9, r6
 8001270:	e7ce      	b.n	8001210 <Ascii2ToHex.part.0+0x5c>
	uint16_t ind = 0;
 8001272:	2000      	movs	r0, #0
 8001274:	e7dc      	b.n	8001230 <Ascii2ToHex.part.0+0x7c>
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000030 	.word	0x20000030
 800127c:	20000044 	.word	0x20000044
 8001280:	20000280 	.word	0x20000280

08001284 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001284:	2101      	movs	r1, #1
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <SystemClock_Config+0x9c>)
void SystemClock_Config(void) {
 8001288:	b510      	push	{r4, lr}
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	438b      	bics	r3, r1
 800128e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001290:	6813      	ldr	r3, [r2, #0]
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8001292:	4219      	tst	r1, r3
 8001294:	d1fc      	bne.n	8001290 <SystemClock_Config+0xc>
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <SystemClock_Config+0xa0>)
 800129a:	02d2      	lsls	r2, r2, #11
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	0252      	lsls	r2, r2, #9
 80012a8:	430a      	orrs	r2, r1
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80012aa:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80012ac:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80012ae:	0289      	lsls	r1, r1, #10
 80012b0:	681a      	ldr	r2, [r3, #0]
	while (LL_RCC_HSE_IsReady() != 1) {
 80012b2:	420a      	tst	r2, r1
 80012b4:	d0fc      	beq.n	80012b0 <SystemClock_Config+0x2c>
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	491b      	ldr	r1, [pc, #108]	; (8001328 <SystemClock_Config+0xa4>)
 80012ba:	4011      	ands	r1, r2
 80012bc:	22c8      	movs	r2, #200	; 0xc8
 80012be:	0352      	lsls	r2, r2, #13
 80012c0:	430a      	orrs	r2, r1
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80012c2:	210f      	movs	r1, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80012c4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	438a      	bics	r2, r1
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	0452      	lsls	r2, r2, #17
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	4912      	ldr	r1, [pc, #72]	; (8001324 <SystemClock_Config+0xa0>)
 80012da:	0492      	lsls	r2, r2, #18
 80012dc:	680b      	ldr	r3, [r1, #0]
	while (LL_RCC_PLL_IsReady() != 1) {
 80012de:	4213      	tst	r3, r2
 80012e0:	d0fc      	beq.n	80012dc <SystemClock_Config+0x58>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012e2:	22f0      	movs	r2, #240	; 0xf0
 80012e4:	684b      	ldr	r3, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012e6:	4c0f      	ldr	r4, [pc, #60]	; (8001324 <SystemClock_Config+0xa0>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012e8:	4393      	bics	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80012ec:	684b      	ldr	r3, [r1, #4]
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <SystemClock_Config+0xa8>)
 80012f0:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012f2:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80012f4:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012f6:	684b      	ldr	r3, [r1, #4]
 80012f8:	4393      	bics	r3, r2
 80012fa:	3a01      	subs	r2, #1
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001300:	320a      	adds	r2, #10
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	4013      	ands	r3, r2
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001306:	2b08      	cmp	r3, #8
 8001308:	d1fb      	bne.n	8001302 <SystemClock_Config+0x7e>
	LL_Init1msTick(24000000);
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <SystemClock_Config+0xac>)
 800130c:	f002 f8e0 	bl	80034d0 <LL_Init1msTick>
	LL_SetSystemCoreClock(24000000);
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <SystemClock_Config+0xac>)
 8001312:	f002 f905 	bl	8003520 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001316:	2203      	movs	r2, #3
 8001318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800131a:	4393      	bics	r3, r2
 800131c:	6323      	str	r3, [r4, #48]	; 0x30
}
 800131e:	bd10      	pop	{r4, pc}
 8001320:	40022000 	.word	0x40022000
 8001324:	40021000 	.word	0x40021000
 8001328:	ffc2ffff 	.word	0xffc2ffff
 800132c:	fffff8ff 	.word	0xfffff8ff
 8001330:	016e3600 	.word	0x016e3600

08001334 <preapare_msg_16bit>:
void preapare_msg_16bit(struct encryptData *initData, uint8_t *in, uint8_t *out) {
 8001334:	b510      	push	{r4, lr}
	encode16Bit(initData, in, buff1, msTicks);
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <preapare_msg_16bit+0x38>)
void preapare_msg_16bit(struct encryptData *initData, uint8_t *in, uint8_t *out) {
 8001338:	b0c2      	sub	sp, #264	; 0x108
	encode16Bit(initData, in, buff1, msTicks);
 800133a:	681b      	ldr	r3, [r3, #0]
void preapare_msg_16bit(struct encryptData *initData, uint8_t *in, uint8_t *out) {
 800133c:	0014      	movs	r4, r2
	encode16Bit(initData, in, buff1, msTicks);
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	aa02      	add	r2, sp, #8
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f001 fad3 	bl	80028f0 <encode16Bit>
	encode64(buff1, out + 4);
 800134a:	1d21      	adds	r1, r4, #4
 800134c:	a802      	add	r0, sp, #8
 800134e:	f001 fef7 	bl	8003140 <encode64>
	memcpy(out, &PREAMB, sizeof(PREAMB));
 8001352:	2204      	movs	r2, #4
 8001354:	0020      	movs	r0, r4
 8001356:	4906      	ldr	r1, [pc, #24]	; (8001370 <preapare_msg_16bit+0x3c>)
 8001358:	f002 f90c 	bl	8003574 <memcpy>
	to_diff(out, out, 20);
 800135c:	2214      	movs	r2, #20
 800135e:	0021      	movs	r1, r4
 8001360:	0020      	movs	r0, r4
 8001362:	f000 fe75 	bl	8002050 <to_diff>
}
 8001366:	b042      	add	sp, #264	; 0x108
 8001368:	bd10      	pop	{r4, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	20000380 	.word	0x20000380
 8001370:	08003aa4 	.word	0x08003aa4

08001374 <preapare_msg_48bit>:
void preapare_msg_48bit(struct encryptData *initData, uint8_t *in, uint8_t *out) {
 8001374:	b510      	push	{r4, lr}
	encode48Bit(initData, in, buff1, msTicks);
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <preapare_msg_48bit+0x38>)
void preapare_msg_48bit(struct encryptData *initData, uint8_t *in, uint8_t *out) {
 8001378:	b0c2      	sub	sp, #264	; 0x108
	encode48Bit(initData, in, buff1, msTicks);
 800137a:	681b      	ldr	r3, [r3, #0]
void preapare_msg_48bit(struct encryptData *initData, uint8_t *in, uint8_t *out) {
 800137c:	0014      	movs	r4, r2
	encode48Bit(initData, in, buff1, msTicks);
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	aa02      	add	r2, sp, #8
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f001 fb87 	bl	8002a98 <encode48Bit>
	encode96(buff1, out + 4);
 800138a:	1d21      	adds	r1, r4, #4
 800138c:	a802      	add	r0, sp, #8
 800138e:	f001 fe9f 	bl	80030d0 <encode96>
	memcpy(out, &PREAMB, sizeof(PREAMB));
 8001392:	2204      	movs	r2, #4
 8001394:	0020      	movs	r0, r4
 8001396:	4906      	ldr	r1, [pc, #24]	; (80013b0 <preapare_msg_48bit+0x3c>)
 8001398:	f002 f8ec 	bl	8003574 <memcpy>
	to_diff(out, out, 36);
 800139c:	2224      	movs	r2, #36	; 0x24
 800139e:	0021      	movs	r1, r4
 80013a0:	0020      	movs	r0, r4
 80013a2:	f000 fe55 	bl	8002050 <to_diff>
}
 80013a6:	b042      	add	sp, #264	; 0x108
 80013a8:	bd10      	pop	{r4, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	20000380 	.word	0x20000380
 80013b0:	08003aa4 	.word	0x08003aa4

080013b4 <preapare_msg_activate>:
void preapare_msg_activate(struct encryptData *initData, uint8_t *out) {
 80013b4:	b510      	push	{r4, lr}
 80013b6:	000c      	movs	r4, r1
	encodeActivateMsg(initData, buff1, msTicks);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <preapare_msg_activate+0x34>)
void preapare_msg_activate(struct encryptData *initData, uint8_t *out) {
 80013ba:	b0c0      	sub	sp, #256	; 0x100
	encodeActivateMsg(initData, buff1, msTicks);
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4669      	mov	r1, sp
 80013c0:	2300      	movs	r3, #0
 80013c2:	f001 f9d7 	bl	8002774 <encodeActivateMsg>
	encode64(buff1, out + 4);
 80013c6:	4668      	mov	r0, sp
 80013c8:	1d21      	adds	r1, r4, #4
 80013ca:	f001 feb9 	bl	8003140 <encode64>
	memcpy(out, &PREAMB, sizeof(PREAMB));
 80013ce:	2204      	movs	r2, #4
 80013d0:	0020      	movs	r0, r4
 80013d2:	4906      	ldr	r1, [pc, #24]	; (80013ec <preapare_msg_activate+0x38>)
 80013d4:	f002 f8ce 	bl	8003574 <memcpy>
	to_diff(out, out, 20);
 80013d8:	2214      	movs	r2, #20
 80013da:	0021      	movs	r1, r4
 80013dc:	0020      	movs	r0, r4
 80013de:	f000 fe37 	bl	8002050 <to_diff>
}
 80013e2:	b040      	add	sp, #256	; 0x100
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000380 	.word	0x20000380
 80013ec:	08003aa4 	.word	0x08003aa4

080013f0 <USART_TX_Str>:
void USART_TX_Str(char *string) {
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	0006      	movs	r6, r0
	uint16_t size = strlen(string);
 80013f4:	f7fe fe88 	bl	8000108 <strlen>
 80013f8:	b280      	uxth	r0, r0
	while (i < size) {
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d00b      	beq.n	8001416 <USART_TX_Str+0x26>
 80013fe:	2300      	movs	r3, #0
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001400:	2480      	movs	r4, #128	; 0x80
 8001402:	4905      	ldr	r1, [pc, #20]	; (8001418 <USART_TX_Str+0x28>)
 8001404:	69ca      	ldr	r2, [r1, #28]
 8001406:	4214      	tst	r4, r2
 8001408:	d0fc      	beq.n	8001404 <USART_TX_Str+0x14>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800140a:	5cf2      	ldrb	r2, [r6, r3]
 800140c:	3301      	adds	r3, #1
 800140e:	850a      	strh	r2, [r1, #40]	; 0x28
 8001410:	b29a      	uxth	r2, r3
 8001412:	4282      	cmp	r2, r0
 8001414:	d3f6      	bcc.n	8001404 <USART_TX_Str+0x14>
}
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	40013800 	.word	0x40013800

0800141c <USART_TX_h_VAL>:
void USART_TX_h_VAL(char *string, uint8_t val) {
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	46c6      	mov	lr, r8
 8001420:	4688      	mov	r8, r1
 8001422:	b500      	push	{lr}
 8001424:	b082      	sub	sp, #8
 8001426:	0005      	movs	r5, r0
	uint8_t s_size = strlen(string);
 8001428:	f7fe fe6e 	bl	8000108 <strlen>
			(((val & 0xf0) >> 4) > 9) ?
 800142c:	4643      	mov	r3, r8
 800142e:	091b      	lsrs	r3, r3, #4
	m_val[0] =
 8001430:	001f      	movs	r7, r3
 8001432:	4642      	mov	r2, r8
void USART_TX_h_VAL(char *string, uint8_t val) {
 8001434:	2400      	movs	r4, #0
	uint8_t s_size = strlen(string);
 8001436:	b2c0      	uxtb	r0, r0
	m_val[0] =
 8001438:	3730      	adds	r7, #48	; 0x30
 800143a:	2a9f      	cmp	r2, #159	; 0x9f
 800143c:	d901      	bls.n	8001442 <USART_TX_h_VAL+0x26>
 800143e:	3357      	adds	r3, #87	; 0x57
 8001440:	001f      	movs	r7, r3
 8001442:	4643      	mov	r3, r8
 8001444:	210f      	movs	r1, #15
 8001446:	4019      	ands	r1, r3
	m_val[1] =
 8001448:	000b      	movs	r3, r1
	m_val[0] =
 800144a:	ae01      	add	r6, sp, #4
 800144c:	7037      	strb	r7, [r6, #0]
	m_val[1] =
 800144e:	3330      	adds	r3, #48	; 0x30
 8001450:	2909      	cmp	r1, #9
 8001452:	d900      	bls.n	8001456 <USART_TX_h_VAL+0x3a>
 8001454:	3327      	adds	r3, #39	; 0x27
 8001456:	7073      	strb	r3, [r6, #1]
	m_val[2] = '\n';
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <USART_TX_h_VAL+0x8c>)
 800145a:	8073      	strh	r3, [r6, #2]
	while (i < s_size) {
 800145c:	2800      	cmp	r0, #0
 800145e:	d00b      	beq.n	8001478 <USART_TX_h_VAL+0x5c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <USART_TX_h_VAL+0x90>)
 8001464:	69d3      	ldr	r3, [r2, #28]
 8001466:	4219      	tst	r1, r3
 8001468:	d0fc      	beq.n	8001464 <USART_TX_h_VAL+0x48>
  USARTx->TDR = Value;
 800146a:	782b      	ldrb	r3, [r5, #0]
		i++;
 800146c:	3401      	adds	r4, #1
 800146e:	b2e4      	uxtb	r4, r4
 8001470:	8513      	strh	r3, [r2, #40]	; 0x28
	while (i < s_size) {
 8001472:	3501      	adds	r5, #1
 8001474:	42a0      	cmp	r0, r4
 8001476:	d1f5      	bne.n	8001464 <USART_TX_h_VAL+0x48>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <USART_TX_h_VAL+0x90>)
 800147c:	a802      	add	r0, sp, #8
 800147e:	69d3      	ldr	r3, [r2, #28]
 8001480:	4219      	tst	r1, r3
 8001482:	d0fc      	beq.n	800147e <USART_TX_h_VAL+0x62>
  USARTx->TDR = Value;
 8001484:	b2bf      	uxth	r7, r7
 8001486:	3601      	adds	r6, #1
 8001488:	8517      	strh	r7, [r2, #40]	; 0x28
	while (n < 4) {
 800148a:	42b0      	cmp	r0, r6
 800148c:	d008      	beq.n	80014a0 <USART_TX_h_VAL+0x84>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800148e:	69d3      	ldr	r3, [r2, #28]
 8001490:	7837      	ldrb	r7, [r6, #0]
 8001492:	4219      	tst	r1, r3
 8001494:	d0f3      	beq.n	800147e <USART_TX_h_VAL+0x62>
  USARTx->TDR = Value;
 8001496:	b2bf      	uxth	r7, r7
 8001498:	3601      	adds	r6, #1
 800149a:	8517      	strh	r7, [r2, #40]	; 0x28
 800149c:	42b0      	cmp	r0, r6
 800149e:	d1f6      	bne.n	800148e <USART_TX_h_VAL+0x72>
}
 80014a0:	b002      	add	sp, #8
 80014a2:	bc80      	pop	{r7}
 80014a4:	46b8      	mov	r8, r7
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	00000d0a 	.word	0x00000d0a
 80014ac:	40013800 	.word	0x40013800

080014b0 <USART_TX_d_VAL>:
void USART_TX_d_VAL(char *string, uint32_t val, uint8_t len) {
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	4657      	mov	r7, sl
 80014b4:	46de      	mov	lr, fp
 80014b6:	464e      	mov	r6, r9
 80014b8:	4645      	mov	r5, r8
 80014ba:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t m_val[len + 2];
 80014bc:	0013      	movs	r3, r2
void USART_TX_d_VAL(char *string, uint32_t val, uint8_t len) {
 80014be:	b083      	sub	sp, #12
 80014c0:	4691      	mov	r9, r2
	uint8_t m_val[len + 2];
 80014c2:	466a      	mov	r2, sp
void USART_TX_d_VAL(char *string, uint32_t val, uint8_t len) {
 80014c4:	af00      	add	r7, sp, #0
	uint8_t m_val[len + 2];
 80014c6:	3301      	adds	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	3308      	adds	r3, #8
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	469d      	mov	sp, r3
	for (uint8_t x = 0; x < len; x++) {
 80014d4:	464b      	mov	r3, r9
void USART_TX_d_VAL(char *string, uint32_t val, uint8_t len) {
 80014d6:	4680      	mov	r8, r0
 80014d8:	468b      	mov	fp, r1
	uint8_t m_val[len + 2];
 80014da:	46ea      	mov	sl, sp
	for (uint8_t x = 0; x < len; x++) {
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d01e      	beq.n	800151e <USART_TX_d_VAL+0x6e>
 80014e0:	2500      	movs	r5, #0
		uint32_t Os = 1;
 80014e2:	2401      	movs	r4, #1
 80014e4:	1e5e      	subs	r6, r3, #1
 80014e6:	446e      	add	r6, sp
		m_val[len - x - 1] = (val % (10 * Os)) / Os + 0x30;
 80014e8:	00a1      	lsls	r1, r4, #2
 80014ea:	1909      	adds	r1, r1, r4
 80014ec:	4658      	mov	r0, fp
 80014ee:	0049      	lsls	r1, r1, #1
 80014f0:	f7fe fe98 	bl	8000224 <__aeabi_uidivmod>
 80014f4:	0008      	movs	r0, r1
 80014f6:	0021      	movs	r1, r4
 80014f8:	f7fe fe0e 	bl	8000118 <__udivsi3>
	for (uint8_t x = 0; x < len; x++) {
 80014fc:	3501      	adds	r5, #1
		m_val[len - x - 1] = (val % (10 * Os)) / Os + 0x30;
 80014fe:	3030      	adds	r0, #48	; 0x30
	for (uint8_t x = 0; x < len; x++) {
 8001500:	b2ed      	uxtb	r5, r5
		m_val[len - x - 1] = (val % (10 * Os)) / Os + 0x30;
 8001502:	7030      	strb	r0, [r6, #0]
	for (uint8_t x = 0; x < len; x++) {
 8001504:	45a9      	cmp	r9, r5
 8001506:	d00a      	beq.n	800151e <USART_TX_d_VAL+0x6e>
		uint32_t Os = 1;
 8001508:	2401      	movs	r4, #1
		for (uint8_t n = 0; n < x; n++) {
 800150a:	2300      	movs	r3, #0
			Os = Os * 10;
 800150c:	00a2      	lsls	r2, r4, #2
		for (uint8_t n = 0; n < x; n++) {
 800150e:	3301      	adds	r3, #1
			Os = Os * 10;
 8001510:	1914      	adds	r4, r2, r4
		for (uint8_t n = 0; n < x; n++) {
 8001512:	b2db      	uxtb	r3, r3
			Os = Os * 10;
 8001514:	0064      	lsls	r4, r4, #1
		for (uint8_t n = 0; n < x; n++) {
 8001516:	429d      	cmp	r5, r3
 8001518:	d8f8      	bhi.n	800150c <USART_TX_d_VAL+0x5c>
 800151a:	3e01      	subs	r6, #1
 800151c:	e7e4      	b.n	80014e8 <USART_TX_d_VAL+0x38>
	m_val[len + 1] = '\n';
 800151e:	230a      	movs	r3, #10
 8001520:	4652      	mov	r2, sl
 8001522:	6879      	ldr	r1, [r7, #4]
	for (uint8_t i = 0; i < (strlen(string)); i++) {
 8001524:	2400      	movs	r4, #0
	m_val[len + 1] = '\n';
 8001526:	5453      	strb	r3, [r2, r1]
	m_val[len] = '\r';
 8001528:	4649      	mov	r1, r9
 800152a:	3303      	adds	r3, #3
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800152c:	2680      	movs	r6, #128	; 0x80
 800152e:	4d14      	ldr	r5, [pc, #80]	; (8001580 <USART_TX_d_VAL+0xd0>)
 8001530:	5453      	strb	r3, [r2, r1]
	for (uint8_t i = 0; i < (strlen(string)); i++) {
 8001532:	e007      	b.n	8001544 <USART_TX_d_VAL+0x94>
 8001534:	69eb      	ldr	r3, [r5, #28]
 8001536:	421e      	tst	r6, r3
 8001538:	d0fc      	beq.n	8001534 <USART_TX_d_VAL+0x84>
  USARTx->TDR = Value;
 800153a:	4643      	mov	r3, r8
 800153c:	5d1b      	ldrb	r3, [r3, r4]
 800153e:	3401      	adds	r4, #1
 8001540:	852b      	strh	r3, [r5, #40]	; 0x28
 8001542:	b2e4      	uxtb	r4, r4
 8001544:	4640      	mov	r0, r8
 8001546:	f7fe fddf 	bl	8000108 <strlen>
 800154a:	4284      	cmp	r4, r0
 800154c:	d3f2      	bcc.n	8001534 <USART_TX_d_VAL+0x84>
	for (uint8_t i = 0; i < (len + 2); i++) {
 800154e:	2400      	movs	r4, #0
 8001550:	2300      	movs	r3, #0
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001552:	2080      	movs	r0, #128	; 0x80
 8001554:	490a      	ldr	r1, [pc, #40]	; (8001580 <USART_TX_d_VAL+0xd0>)
 8001556:	69ca      	ldr	r2, [r1, #28]
 8001558:	4210      	tst	r0, r2
 800155a:	d0fc      	beq.n	8001556 <USART_TX_d_VAL+0xa6>
  USARTx->TDR = Value;
 800155c:	4652      	mov	r2, sl
 800155e:	5d12      	ldrb	r2, [r2, r4]
 8001560:	3301      	adds	r3, #1
 8001562:	850a      	strh	r2, [r1, #40]	; 0x28
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	001c      	movs	r4, r3
 800156a:	429a      	cmp	r2, r3
 800156c:	daf3      	bge.n	8001556 <USART_TX_d_VAL+0xa6>
}
 800156e:	46bd      	mov	sp, r7
 8001570:	b003      	add	sp, #12
 8001572:	bcf0      	pop	{r4, r5, r6, r7}
 8001574:	46bb      	mov	fp, r7
 8001576:	46b2      	mov	sl, r6
 8001578:	46a9      	mov	r9, r5
 800157a:	46a0      	mov	r8, r4
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40013800 	.word	0x40013800

08001584 <USART_RX_Str>:
  SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001584:	2104      	movs	r1, #4
uint16_t USART_RX_Str() {
 8001586:	b530      	push	{r4, r5, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001588:	2520      	movs	r5, #32
  SET_BIT(USARTx->CR1, USART_CR1_RE);
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <USART_RX_Str+0x5c>)
 800158c:	4c15      	ldr	r4, [pc, #84]	; (80015e4 <USART_RX_Str+0x60>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001594:	310c      	adds	r1, #12
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	4211      	tst	r1, r2
 800159a:	d000      	beq.n	800159e <USART_RX_Str+0x1a>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800159c:	6219      	str	r1, [r3, #32]
 800159e:	2000      	movs	r0, #0
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	4211      	tst	r1, r2
 80015a4:	d109      	bne.n	80015ba <USART_RX_Str+0x36>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	4215      	tst	r5, r2
 80015aa:	d0f9      	beq.n	80015a0 <USART_RX_Str+0x1c>
				u2_rx_buff[ind] = (uint8_t) (USART1->RDR & 0x00FF);
 80015ac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80015ae:	5422      	strb	r2, [r4, r0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80015b0:	69da      	ldr	r2, [r3, #28]
				ind++;
 80015b2:	3001      	adds	r0, #1
 80015b4:	b280      	uxth	r0, r0
 80015b6:	4211      	tst	r1, r2
 80015b8:	d0f5      	beq.n	80015a6 <USART_RX_Str+0x22>
	while (!ind) {
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d0eb      	beq.n	8001596 <USART_RX_Str+0x12>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80015be:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 80015c0:	2104      	movs	r1, #4
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	438a      	bics	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	e001      	b.n	80015ce <USART_RX_Str+0x4a>
		ind--;
 80015ca:	3801      	subs	r0, #1
 80015cc:	b280      	uxth	r0, r0
	while ((u2_rx_buff[ind - 1] == 0x0d) || (u2_rx_buff[ind - 1] == 0x0a)) {
 80015ce:	1823      	adds	r3, r4, r0
 80015d0:	3b01      	subs	r3, #1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b0d      	cmp	r3, #13
 80015d6:	d0f8      	beq.n	80015ca <USART_RX_Str+0x46>
 80015d8:	2b0a      	cmp	r3, #10
 80015da:	d0f6      	beq.n	80015ca <USART_RX_Str+0x46>
}
 80015dc:	bd30      	pop	{r4, r5, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40013800 	.word	0x40013800
 80015e4:	20000044 	.word	0x20000044

080015e8 <AsciiToHex>:
	if ((s_h > 0x2f) && (s_h < 0x3a)) {
 80015e8:	0003      	movs	r3, r0
 80015ea:	3b30      	subs	r3, #48	; 0x30
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b09      	cmp	r3, #9
 80015f0:	d809      	bhi.n	8001606 <AsciiToHex+0x1e>
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b2d8      	uxtb	r0, r3
	if ((s_l > 0x2f) && (s_l < 0x3a)) {
 80015f6:	000b      	movs	r3, r1
 80015f8:	3b30      	subs	r3, #48	; 0x30
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d80e      	bhi.n	800161e <AsciiToHex+0x36>
 8001600:	1818      	adds	r0, r3, r0
 8001602:	b2c0      	uxtb	r0, r0
}
 8001604:	4770      	bx	lr
	} else if ((s_h > 0x40) && (s_h < 0x47)) {
 8001606:	0003      	movs	r3, r0
 8001608:	3b41      	subs	r3, #65	; 0x41
 800160a:	2b05      	cmp	r3, #5
 800160c:	d817      	bhi.n	800163e <AsciiToHex+0x56>
	if ((s_l > 0x2f) && (s_l < 0x3a)) {
 800160e:	000b      	movs	r3, r1
		s_h = s_h - 0x37;
 8001610:	3837      	subs	r0, #55	; 0x37
	if ((s_l > 0x2f) && (s_l < 0x3a)) {
 8001612:	3b30      	subs	r3, #48	; 0x30
 8001614:	0100      	lsls	r0, r0, #4
 8001616:	b2db      	uxtb	r3, r3
 8001618:	b2c0      	uxtb	r0, r0
 800161a:	2b09      	cmp	r3, #9
 800161c:	d9f0      	bls.n	8001600 <AsciiToHex+0x18>
	} else if ((s_l > 0x40) && (s_l < 0x47)) {
 800161e:	000b      	movs	r3, r1
 8001620:	3b41      	subs	r3, #65	; 0x41
 8001622:	2b05      	cmp	r3, #5
 8001624:	d803      	bhi.n	800162e <AsciiToHex+0x46>
		s_l = s_l - 0x37;
 8001626:	3937      	subs	r1, #55	; 0x37
 8001628:	1840      	adds	r0, r0, r1
 800162a:	b2c0      	uxtb	r0, r0
 800162c:	e7ea      	b.n	8001604 <AsciiToHex+0x1c>
	} else if ((s_l > 0x60) && (s_l < 0x67)) {
 800162e:	000b      	movs	r3, r1
 8001630:	3b61      	subs	r3, #97	; 0x61
 8001632:	2b05      	cmp	r3, #5
 8001634:	d810      	bhi.n	8001658 <AsciiToHex+0x70>
		s_l = s_l - 0x57;
 8001636:	3957      	subs	r1, #87	; 0x57
 8001638:	1840      	adds	r0, r0, r1
 800163a:	b2c0      	uxtb	r0, r0
 800163c:	e7e2      	b.n	8001604 <AsciiToHex+0x1c>
	} else if ((s_h > 0x60) && (s_h < 0x67)) {
 800163e:	0003      	movs	r3, r0
 8001640:	3b61      	subs	r3, #97	; 0x61
 8001642:	2b05      	cmp	r3, #5
 8001644:	d803      	bhi.n	800164e <AsciiToHex+0x66>
		s_h = s_h - 0x57;
 8001646:	3857      	subs	r0, #87	; 0x57
 8001648:	0100      	lsls	r0, r0, #4
 800164a:	b2c0      	uxtb	r0, r0
 800164c:	e7d3      	b.n	80015f6 <AsciiToHex+0xe>
		error_flag = 1;
 800164e:	2201      	movs	r2, #1
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <AsciiToHex+0x78>)
 8001652:	2000      	movs	r0, #0
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e7ce      	b.n	80015f6 <AsciiToHex+0xe>
		error_flag = 1;
 8001658:	2201      	movs	r2, #1
 800165a:	4b01      	ldr	r3, [pc, #4]	; (8001660 <AsciiToHex+0x78>)
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e7d1      	b.n	8001604 <AsciiToHex+0x1c>
 8001660:	20000030 	.word	0x20000030

08001664 <main>:
int main(void) {
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	46de      	mov	lr, fp
 8001668:	4657      	mov	r7, sl
 800166a:	464e      	mov	r6, r9
 800166c:	4645      	mov	r5, r8
 800166e:	b5e0      	push	{r5, r6, r7, lr}
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001670:	2701      	movs	r7, #1
  SET_BIT(RCC->APB1ENR, Periphs);
 8001672:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->APB2ENR, Periphs);
 8001674:	4dda      	ldr	r5, [pc, #872]	; (80019e0 <main+0x37c>)
 8001676:	b0ab      	sub	sp, #172	; 0xac
 8001678:	69ab      	ldr	r3, [r5, #24]
  SET_BIT(RCC->APB1ENR, Periphs);
 800167a:	0549      	lsls	r1, r1, #21
  SET_BIT(RCC->APB2ENR, Periphs);
 800167c:	433b      	orrs	r3, r7
 800167e:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001680:	69ab      	ldr	r3, [r5, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001682:	2400      	movs	r4, #0
 8001684:	403b      	ands	r3, r7
 8001686:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001688:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->APB1ENR, Periphs);
 800168a:	69ea      	ldr	r2, [r5, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800168c:	2690      	movs	r6, #144	; 0x90
 800168e:	430a      	orrs	r2, r1
 8001690:	61ea      	str	r2, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001692:	69eb      	ldr	r3, [r5, #28]
 8001694:	05f6      	lsls	r6, r6, #23
 8001696:	400b      	ands	r3, r1
 8001698:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800169a:	9b03      	ldr	r3, [sp, #12]
	SystemClock_Config();
 800169c:	f7ff fdf2 	bl	8001284 <SystemClock_Config>
  SET_BIT(RCC->AHBENR, Periphs);
 80016a0:	2180      	movs	r1, #128	; 0x80
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016a2:	9417      	str	r4, [sp, #92]	; 0x5c
 80016a4:	696a      	ldr	r2, [r5, #20]
 80016a6:	03c9      	lsls	r1, r1, #15
 80016a8:	430a      	orrs	r2, r1
 80016aa:	616a      	str	r2, [r5, #20]
 80016ac:	2280      	movs	r2, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016ae:	696b      	ldr	r3, [r5, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 80016b0:	0292      	lsls	r2, r2, #10
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016b2:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 80016b4:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016b6:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 80016b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  SET_BIT(RCC->AHBENR, Periphs);
 80016ba:	696b      	ldr	r3, [r5, #20]
 80016bc:	02c9      	lsls	r1, r1, #11
 80016be:	4313      	orrs	r3, r2
 80016c0:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016c2:	696b      	ldr	r3, [r5, #20]
 80016c4:	48c7      	ldr	r0, [pc, #796]	; (80019e4 <main+0x380>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 80016ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  SET_BIT(RCC->AHBENR, Periphs);
 80016cc:	696a      	ldr	r2, [r5, #20]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	616a      	str	r2, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016d2:	696b      	ldr	r3, [r5, #20]
 80016d4:	400b      	ands	r3, r1
 80016d6:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 80016d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016da:	2302      	movs	r3, #2
 80016dc:	4698      	mov	r8, r3
 80016de:	6183      	str	r3, [r0, #24]
 80016e0:	61b7      	str	r7, [r6, #24]
 80016e2:	61b3      	str	r3, [r6, #24]
 80016e4:	33ff      	adds	r3, #255	; 0xff
 80016e6:	33ff      	adds	r3, #255	; 0xff
 80016e8:	61b3      	str	r3, [r6, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80016ea:	3bf1      	subs	r3, #241	; 0xf1
 80016ec:	3bff      	subs	r3, #255	; 0xff
 80016ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80016f0:	469a      	mov	sl, r3
 80016f2:	3330      	adds	r3, #48	; 0x30
 80016f4:	62b3      	str	r3, [r6, #40]	; 0x28
 80016f6:	4643      	mov	r3, r8
 80016f8:	49bb      	ldr	r1, [pc, #748]	; (80019e8 <main+0x384>)
 80016fa:	628b      	str	r3, [r1, #40]	; 0x28
 80016fc:	468b      	mov	fp, r1
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80016fe:	4641      	mov	r1, r8
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001700:	3101      	adds	r1, #1
 8001702:	4689      	mov	r9, r1
 8001704:	9114      	str	r1, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001706:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001708:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800170a:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800170c:	9415      	str	r4, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800170e:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001710:	f001 fd70 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001714:	4648      	mov	r0, r9
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001718:	9014      	str	r0, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	0030      	movs	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800171c:	9712      	str	r7, [sp, #72]	; 0x48
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800171e:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001720:	9715      	str	r7, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001722:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f001 fd66 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001728:	4640      	mov	r0, r8
 800172a:	9012      	str	r0, [sp, #72]	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800172c:	4648      	mov	r0, r9
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001730:	9014      	str	r0, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	0030      	movs	r0, r6
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001734:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001736:	9715      	str	r7, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001738:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f001 fd5b 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800173e:	4650      	mov	r0, sl
 8001740:	9012      	str	r0, [sp, #72]	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001742:	4648      	mov	r0, r9
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001746:	9014      	str	r0, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	0030      	movs	r0, r6
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800174a:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800174c:	9415      	str	r4, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800174e:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f001 fd50 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001754:	2320      	movs	r3, #32
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	a912      	add	r1, sp, #72	; 0x48
 8001758:	0030      	movs	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800175a:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800175c:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800175e:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f001 fd48 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001764:	4648      	mov	r0, r9
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001766:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001768:	9014      	str	r0, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	a912      	add	r1, sp, #72	; 0x48
 800176c:	0030      	movs	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800176e:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001770:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001772:	9415      	str	r4, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001774:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f001 fd3d 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800177a:	2080      	movs	r0, #128	; 0x80
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800177e:	4682      	mov	sl, r0
 8001780:	9012      	str	r0, [sp, #72]	; 0x48
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	0030      	movs	r0, r6
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001784:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001786:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f001 fd34 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800178c:	4640      	mov	r0, r8
 800178e:	9012      	str	r0, [sp, #72]	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001790:	4648      	mov	r0, r9
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001794:	9014      	str	r0, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	4658      	mov	r0, fp
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001798:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800179a:	9415      	str	r4, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800179c:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f001 fd29 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	0089      	lsls	r1, r1, #2
 80017a6:	9112      	str	r1, [sp, #72]	; 0x48
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017a8:	4649      	mov	r1, r9
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	0030      	movs	r0, r6
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017ac:	9114      	str	r1, [sp, #80]	; 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017b0:	9713      	str	r7, [sp, #76]	; 0x4c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017b2:	9415      	str	r4, [sp, #84]	; 0x54
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017b4:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f001 fd1d 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017ba:	2380      	movs	r3, #128	; 0x80
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	a912      	add	r1, sp, #72	; 0x48
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017be:	00db      	lsls	r3, r3, #3
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	0030      	movs	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017c2:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017c4:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c6:	9416      	str	r4, [sp, #88]	; 0x58
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f001 fd14 	bl	80031f4 <LL_GPIO_Init>
	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 80017cc:	221c      	movs	r2, #28
 80017ce:	2100      	movs	r1, #0
 80017d0:	a812      	add	r0, sp, #72	; 0x48
 80017d2:	f001 fed8 	bl	8003586 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	69aa      	ldr	r2, [r5, #24]
 80017da:	01c9      	lsls	r1, r1, #7
 80017dc:	430a      	orrs	r2, r1
 80017de:	61aa      	str	r2, [r5, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 80017e0:	2280      	movs	r2, #128	; 0x80
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017e2:	69ab      	ldr	r3, [r5, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 80017e4:	0292      	lsls	r2, r2, #10
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017e6:	400b      	ands	r3, r1
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017e8:	4641      	mov	r1, r8
 80017ea:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 80017ec:	9b07      	ldr	r3, [sp, #28]
  SET_BIT(RCC->AHBENR, Periphs);
 80017ee:	696b      	ldr	r3, [r5, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	0030      	movs	r0, r6
 80017f2:	4313      	orrs	r3, r2
 80017f4:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80017f6:	696b      	ldr	r3, [r5, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017f8:	910d      	str	r1, [sp, #52]	; 0x34
 80017fa:	4013      	ands	r3, r2
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017fc:	4649      	mov	r1, r9
 80017fe:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8001800:	9b08      	ldr	r3, [sp, #32]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001802:	2304      	movs	r3, #4
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001804:	910e      	str	r1, [sp, #56]	; 0x38
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	a90c      	add	r1, sp, #48	; 0x30
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001808:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800180a:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180c:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800180e:	9711      	str	r7, [sp, #68]	; 0x44
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f001 fcf0 	bl	80031f4 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001814:	2108      	movs	r1, #8
 8001816:	468b      	mov	fp, r1
 8001818:	910c      	str	r1, [sp, #48]	; 0x30
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800181a:	4641      	mov	r1, r8
 800181c:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800181e:	4649      	mov	r1, r9
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	0030      	movs	r0, r6
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001822:	910e      	str	r1, [sp, #56]	; 0x38
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	a90c      	add	r1, sp, #48	; 0x30
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001826:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001828:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800182a:	9711      	str	r7, [sp, #68]	; 0x44
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f001 fce2 	bl	80031f4 <LL_GPIO_Init>
	USART_InitStruct.BaudRate = 115200;
 8001830:	23e1      	movs	r3, #225	; 0xe1
	LL_USART_Init(USART1, &USART_InitStruct);
 8001832:	496e      	ldr	r1, [pc, #440]	; (80019ec <main+0x388>)
	USART_InitStruct.BaudRate = 115200;
 8001834:	025b      	lsls	r3, r3, #9
	LL_USART_Init(USART1, &USART_InitStruct);
 8001836:	4689      	mov	r9, r1
	USART_InitStruct.BaudRate = 115200;
 8001838:	9312      	str	r3, [sp, #72]	; 0x48
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800183a:	230c      	movs	r3, #12
	LL_USART_Init(USART1, &USART_InitStruct);
 800183c:	4648      	mov	r0, r9
 800183e:	a912      	add	r1, sp, #72	; 0x48
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001840:	9413      	str	r4, [sp, #76]	; 0x4c
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001842:	9414      	str	r4, [sp, #80]	; 0x50
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001844:	9415      	str	r4, [sp, #84]	; 0x54
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001846:	9316      	str	r3, [sp, #88]	; 0x58
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001848:	9417      	str	r4, [sp, #92]	; 0x5c
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800184a:	9418      	str	r4, [sp, #96]	; 0x60
	LL_USART_Init(USART1, &USART_InitStruct);
 800184c:	f001 fdf0 	bl	8003430 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001850:	4649      	mov	r1, r9
 8001852:	4a67      	ldr	r2, [pc, #412]	; (80019f0 <main+0x38c>)
 8001854:	688b      	ldr	r3, [r1, #8]
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8001856:	2042      	movs	r0, #66	; 0x42
 8001858:	4013      	ands	r3, r2
 800185a:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 800185c:	684b      	ldr	r3, [r1, #4]
 800185e:	4a65      	ldr	r2, [pc, #404]	; (80019f4 <main+0x390>)
 8001860:	4013      	ands	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001864:	688b      	ldr	r3, [r1, #8]
 8001866:	4659      	mov	r1, fp
 8001868:	438b      	bics	r3, r1
 800186a:	4649      	mov	r1, r9
 800186c:	608b      	str	r3, [r1, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800186e:	680b      	ldr	r3, [r1, #0]
 8001870:	433b      	orrs	r3, r7
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	a902      	add	r1, sp, #8
 8001876:	1809      	adds	r1, r1, r0
 8001878:	800c      	strh	r4, [r1, #0]
  SET_BIT(RCC->APB2ENR, Periphs);
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	69aa      	ldr	r2, [r5, #24]
 800187e:	0109      	lsls	r1, r1, #4
 8001880:	430a      	orrs	r2, r1
 8001882:	61aa      	str	r2, [r5, #24]
	TIM_InitStruct.Prescaler = 24000;
 8001884:	2240      	movs	r2, #64	; 0x40
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001886:	69ab      	ldr	r3, [r5, #24]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001888:	9413      	str	r4, [sp, #76]	; 0x4c
 800188a:	400b      	ands	r3, r1
 800188c:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 800188e:	9b06      	ldr	r3, [sp, #24]
	TIM_InitStruct.Prescaler = 24000;
 8001890:	a902      	add	r1, sp, #8
 8001892:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <main+0x394>)
 8001894:	1889      	adds	r1, r1, r2
 8001896:	800b      	strh	r3, [r1, #0]
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001898:	4958      	ldr	r1, [pc, #352]	; (80019fc <main+0x398>)
	TIM_InitStruct.Autoreload = 65535;
 800189a:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <main+0x39c>)
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 800189c:	4689      	mov	r9, r1
 800189e:	a912      	add	r1, sp, #72	; 0x48
 80018a0:	4648      	mov	r0, r9
	TIM_InitStruct.Autoreload = 65535;
 80018a2:	9314      	str	r3, [sp, #80]	; 0x50
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018a4:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_InitStruct.RepetitionCounter = 0;
 80018a6:	9416      	str	r4, [sp, #88]	; 0x58
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018a8:	f001 fd82 	bl	80033b0 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80018ac:	4649      	mov	r1, r9
 80018ae:	680b      	ldr	r3, [r1, #0]
 80018b0:	4651      	mov	r1, sl
 80018b2:	438b      	bics	r3, r1
 80018b4:	4649      	mov	r1, r9
 80018b6:	600b      	str	r3, [r1, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80018b8:	688b      	ldr	r3, [r1, #8]
 80018ba:	4952      	ldr	r1, [pc, #328]	; (8001a04 <main+0x3a0>)
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80018bc:	4648      	mov	r0, r9
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80018be:	400b      	ands	r3, r1
 80018c0:	468b      	mov	fp, r1
 80018c2:	4649      	mov	r1, r9
 80018c4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80018c6:	684b      	ldr	r3, [r1, #4]
 80018c8:	2170      	movs	r1, #112	; 0x70
 80018ca:	438b      	bics	r3, r1
 80018cc:	6043      	str	r3, [r0, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80018ce:	6883      	ldr	r3, [r0, #8]
 80018d0:	4650      	mov	r0, sl
 80018d2:	4383      	bics	r3, r0
 80018d4:	4648      	mov	r0, r9
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 80018d6:	2214      	movs	r2, #20
 80018d8:	6083      	str	r3, [r0, #8]
 80018da:	2100      	movs	r1, #0
 80018dc:	a812      	add	r0, sp, #72	; 0x48
 80018de:	f001 fe52 	bl	8003586 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 80018e2:	4640      	mov	r0, r8
 80018e4:	69eb      	ldr	r3, [r5, #28]
	TIM_InitStruct.Prescaler = 21;
 80018e6:	2240      	movs	r2, #64	; 0x40
 80018e8:	4303      	orrs	r3, r0
 80018ea:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018ec:	69eb      	ldr	r3, [r5, #28]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018ee:	9413      	str	r4, [sp, #76]	; 0x4c
 80018f0:	4003      	ands	r3, r0
 80018f2:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80018f4:	9b05      	ldr	r3, [sp, #20]
	TIM_InitStruct.Prescaler = 21;
 80018f6:	2315      	movs	r3, #21
 80018f8:	a802      	add	r0, sp, #8
 80018fa:	1882      	adds	r2, r0, r2
 80018fc:	8013      	strh	r3, [r2, #0]
	TIM_InitStruct.Autoreload = 65533;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <main+0x3a4>)
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001900:	9415      	str	r4, [sp, #84]	; 0x54
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001902:	4c42      	ldr	r4, [pc, #264]	; (8001a0c <main+0x3a8>)
	TIM_InitStruct.Autoreload = 65533;
 8001904:	9314      	str	r3, [sp, #80]	; 0x50
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001906:	ab12      	add	r3, sp, #72	; 0x48
 8001908:	0019      	movs	r1, r3
 800190a:	0020      	movs	r0, r4
 800190c:	f001 fd50 	bl	80033b0 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001910:	4652      	mov	r2, sl
 8001912:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001914:	2170      	movs	r1, #112	; 0x70
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001916:	4393      	bics	r3, r2
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001918:	465a      	mov	r2, fp
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800191a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800191c:	68a3      	ldr	r3, [r4, #8]
	struct encryptData initData = { .DevID = DevID, .DevID_len = sizeof(DevID),
 800191e:	a817      	add	r0, sp, #92	; 0x5c
 8001920:	4013      	ands	r3, r2
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001922:	4652      	mov	r2, sl
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001924:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001926:	6863      	ldr	r3, [r4, #4]
		LED_PORT->BSRR = (1 << LED_PIN);
 8001928:	2510      	movs	r5, #16
 800192a:	438b      	bics	r3, r1
 800192c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800192e:	68a3      	ldr	r3, [r4, #8]
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001930:	4641      	mov	r1, r8
 8001932:	4393      	bics	r3, r2
 8001934:	60a3      	str	r3, [r4, #8]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	464a      	mov	r2, r9
 800193a:	433b      	orrs	r3, r7
 800193c:	6023      	str	r3, [r4, #0]
 800193e:	464b      	mov	r3, r9
 8001940:	681b      	ldr	r3, [r3, #0]
	initEncrypter(&initData);
 8001942:	240a      	movs	r4, #10
 8001944:	433b      	orrs	r3, r7
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <main+0x3ac>)
 800194a:	6813      	ldr	r3, [r2, #0]
 800194c:	430b      	orrs	r3, r1
 800194e:	6013      	str	r3, [r2, #0]
	uint8_t DevID[] = { 0x21, 0x01, 0x01, 0x15, 0x66 }; // Device ID
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <main+0x3b0>)
 8001952:	312a      	adds	r1, #42	; 0x2a
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	920c      	str	r2, [sp, #48]	; 0x30
 8001958:	791b      	ldrb	r3, [r3, #4]
 800195a:	aa02      	add	r2, sp, #8
 800195c:	1852      	adds	r2, r2, r1
 800195e:	7013      	strb	r3, [r2, #0]
	struct encryptData initData = { .DevID = DevID, .DevID_len = sizeof(DevID),
 8001960:	2100      	movs	r1, #0
 8001962:	224c      	movs	r2, #76	; 0x4c
 8001964:	f001 fe0f 	bl	8003586 <memset>
 8001968:	2144      	movs	r1, #68	; 0x44
 800196a:	ab0c      	add	r3, sp, #48	; 0x30
 800196c:	9312      	str	r3, [sp, #72]	; 0x48
 800196e:	2305      	movs	r3, #5
 8001970:	aa02      	add	r2, sp, #8
 8001972:	1852      	adds	r2, r2, r1
 8001974:	7013      	strb	r3, [r2, #0]
 8001976:	ab02      	add	r3, sp, #8
 8001978:	469c      	mov	ip, r3
 800197a:	2045      	movs	r0, #69	; 0x45
 800197c:	2210      	movs	r2, #16
 800197e:	4926      	ldr	r1, [pc, #152]	; (8001a18 <main+0x3b4>)
 8001980:	4460      	add	r0, ip
 8001982:	f001 fdf7 	bl	8003574 <memcpy>
 8001986:	2256      	movs	r2, #86	; 0x56
 8001988:	ab02      	add	r3, sp, #8
 800198a:	189b      	adds	r3, r3, r2
	initEncrypter(&initData);
 800198c:	a812      	add	r0, sp, #72	; 0x48
	struct encryptData initData = { .DevID = DevID, .DevID_len = sizeof(DevID),
 800198e:	801f      	strh	r7, [r3, #0]
	initEncrypter(&initData);
 8001990:	f000 fe28 	bl	80025e4 <initEncrypter>
		LED_PORT->BSRR = (1 << LED_PIN);
 8001994:	370f      	adds	r7, #15
		LL_mDelay(100);
 8001996:	2064      	movs	r0, #100	; 0x64
		LED_PORT->BSRR = (1 << LED_PIN);
 8001998:	61b5      	str	r5, [r6, #24]
		LL_mDelay(100);
 800199a:	f001 fda9 	bl	80034f0 <LL_mDelay>
		LED_PORT->BRR = (1 << LED_PIN);
 800199e:	3c01      	subs	r4, #1
		LL_mDelay(100);
 80019a0:	2064      	movs	r0, #100	; 0x64
		LED_PORT->BRR = (1 << LED_PIN);
 80019a2:	62b7      	str	r7, [r6, #40]	; 0x28
		LL_mDelay(100);
 80019a4:	f001 fda4 	bl	80034f0 <LL_mDelay>
	for (int i = 0; i < 10; i++) {                               //Indication
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	d1f4      	bne.n	8001996 <main+0x332>
	f_carrier = default_f_carrier;
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <main+0x3b8>)
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <main+0x3bc>)
			error_flag = 0;
 80019b0:	2600      	movs	r6, #0
	f_carrier = default_f_carrier;
 80019b2:	6013      	str	r3, [r2, #0]
	PWR_dbm = default_PWR_dbm;
 80019b4:	230b      	movs	r3, #11
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <main+0x3c0>)
 80019b8:	8013      	strh	r3, [r2, #0]
	shaping_filter = default_shaping;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <main+0x3c4>)
 80019bc:	469a      	mov	sl, r3
 80019be:	2301      	movs	r3, #1
 80019c0:	4652      	mov	r2, sl
 80019c2:	7013      	strb	r3, [r2, #0]
	AX5243_init();
 80019c4:	f7fe ff30 	bl	8000828 <AX5243_init>
	USART_TX_Str("TRANSMITTER READY\n\r");
 80019c8:	4818      	ldr	r0, [pc, #96]	; (8001a2c <main+0x3c8>)
 80019ca:	f7ff fd11 	bl	80013f0 <USART_TX_Str>
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <main+0x3cc>)
 80019d0:	4f18      	ldr	r7, [pc, #96]	; (8001a34 <main+0x3d0>)
 80019d2:	4698      	mov	r8, r3
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <main+0x3d4>)
 80019d6:	4c19      	ldr	r4, [pc, #100]	; (8001a3c <main+0x3d8>)
 80019d8:	469b      	mov	fp, r3
 80019da:	4d19      	ldr	r5, [pc, #100]	; (8001a40 <main+0x3dc>)
 80019dc:	e050      	b.n	8001a80 <main+0x41c>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48001400 	.word	0x48001400
 80019e8:	48000400 	.word	0x48000400
 80019ec:	40013800 	.word	0x40013800
 80019f0:	fffffbff 	.word	0xfffffbff
 80019f4:	fffff7ff 	.word	0xfffff7ff
 80019f8:	00005dc0 	.word	0x00005dc0
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	0000ffff 	.word	0x0000ffff
 8001a04:	ffffbff8 	.word	0xffffbff8
 8001a08:	0000fffd 	.word	0x0000fffd
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	e000e010 	.word	0xe000e010
 8001a14:	08003a9c 	.word	0x08003a9c
 8001a18:	080035e0 	.word	0x080035e0
 8001a1c:	2000003c 	.word	0x2000003c
 8001a20:	33bca100 	.word	0x33bca100
 8001a24:	2000027e 	.word	0x2000027e
 8001a28:	20000386 	.word	0x20000386
 8001a2c:	08003610 	.word	0x08003610
 8001a30:	08003a8c 	.word	0x08003a8c
 8001a34:	20000384 	.word	0x20000384
 8001a38:	08003a94 	.word	0x08003a94
 8001a3c:	20000044 	.word	0x20000044
 8001a40:	20000030 	.word	0x20000030
		} else if ((u2_rx_buff[0] == 'F') && (u2_rx_buff[1] == 'R')) {
 8001a44:	2b46      	cmp	r3, #70	; 0x46
 8001a46:	d039      	beq.n	8001abc <main+0x458>
		} else if ((u2_rx_buff[0] == 'P') && (u2_rx_buff[1] == 'W')) {
 8001a48:	2b50      	cmp	r3, #80	; 0x50
 8001a4a:	d04f      	beq.n	8001aec <main+0x488>
		} else if ((u2_rx_buff[0] == 'T') && (u2_rx_buff[1] == 'R')) {
 8001a4c:	2b54      	cmp	r3, #84	; 0x54
 8001a4e:	d065      	beq.n	8001b1c <main+0x4b8>
		} else if ((u2_rx_buff[0] == 'I') && (u2_rx_buff[1] == 'R')) { // IR760D
 8001a50:	2b49      	cmp	r3, #73	; 0x49
 8001a52:	d100      	bne.n	8001a56 <main+0x3f2>
 8001a54:	e083      	b.n	8001b5e <main+0x4fa>
		else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'R')) {    // SR0D
 8001a56:	2b53      	cmp	r3, #83	; 0x53
 8001a58:	d100      	bne.n	8001a5c <main+0x3f8>
 8001a5a:	e0b3      	b.n	8001bc4 <main+0x560>
		else if ((u2_rx_buff[0] == 'N') && (u2_rx_buff[1] == 'T')) {   // NT0201
 8001a5c:	2b4e      	cmp	r3, #78	; 0x4e
 8001a5e:	d100      	bne.n	8001a62 <main+0x3fe>
 8001a60:	e137      	b.n	8001cd2 <main+0x66e>
		} else if ((u2_rx_buff[0] == 'R') && (u2_rx_buff[1] == 'S')) {
 8001a62:	2b52      	cmp	r3, #82	; 0x52
 8001a64:	d103      	bne.n	8001a6e <main+0x40a>
 8001a66:	7863      	ldrb	r3, [r4, #1]
 8001a68:	2b53      	cmp	r3, #83	; 0x53
 8001a6a:	d100      	bne.n	8001a6e <main+0x40a>
 8001a6c:	e2a3      	b.n	8001fb6 <main+0x952>
				error_flag = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	702b      	strb	r3, [r5, #0]
			USART_TX_Str("ERROR\n\r");
 8001a72:	4658      	mov	r0, fp
 8001a74:	f7ff fcbc 	bl	80013f0 <USART_TX_Str>
			error_flag = 0;
 8001a78:	702e      	strb	r6, [r5, #0]
		LL_mDelay(1);
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f001 fd38 	bl	80034f0 <LL_mDelay>
		RX_STR_Size = USART_RX_Str();
 8001a80:	f7ff fd80 	bl	8001584 <USART_RX_Str>
		if ((u2_rx_buff[0] == 'A') && (u2_rx_buff[1] == 'T')) {
 8001a84:	7823      	ldrb	r3, [r4, #0]
		RX_STR_Size = USART_RX_Str();
 8001a86:	8038      	strh	r0, [r7, #0]
		if ((u2_rx_buff[0] == 'A') && (u2_rx_buff[1] == 'T')) {
 8001a88:	2b41      	cmp	r3, #65	; 0x41
 8001a8a:	d1db      	bne.n	8001a44 <main+0x3e0>
 8001a8c:	7863      	ldrb	r3, [r4, #1]
 8001a8e:	2b54      	cmp	r3, #84	; 0x54
 8001a90:	d100      	bne.n	8001a94 <main+0x430>
 8001a92:	e0e2      	b.n	8001c5a <main+0x5f6>
		else if ((u2_rx_buff[0] == 'A') && (u2_rx_buff[1] == 'M')) {    // AM
 8001a94:	2b4d      	cmp	r3, #77	; 0x4d
 8001a96:	d1ea      	bne.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 2) {
 8001a98:	2802      	cmp	r0, #2
 8001a9a:	d1e8      	bne.n	8001a6e <main+0x40a>
				preapare_msg_activate(&initData, data_after_preapare);
 8001a9c:	49d9      	ldr	r1, [pc, #868]	; (8001e04 <main+0x7a0>)
 8001a9e:	a812      	add	r0, sp, #72	; 0x48
 8001aa0:	f7ff fc88 	bl	80013b4 <preapare_msg_activate>
				error_flag = (AX5243_transmit(data_after_preapare, 36));
 8001aa4:	2124      	movs	r1, #36	; 0x24
 8001aa6:	48d7      	ldr	r0, [pc, #860]	; (8001e04 <main+0x7a0>)
 8001aa8:	f7ff f806 	bl	8000ab8 <AX5243_transmit>
 8001aac:	7028      	strb	r0, [r5, #0]
		if (!error_flag) {
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d1df      	bne.n	8001a72 <main+0x40e>
			USART_TX_Str("OK\n\r");
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	f7ff fc9c 	bl	80013f0 <USART_TX_Str>
			error_flag = 0;
 8001ab8:	702e      	strb	r6, [r5, #0]
 8001aba:	e7de      	b.n	8001a7a <main+0x416>
		} else if ((u2_rx_buff[0] == 'F') && (u2_rx_buff[1] == 'R')) {
 8001abc:	7863      	ldrb	r3, [r4, #1]
 8001abe:	2b52      	cmp	r3, #82	; 0x52
 8001ac0:	d100      	bne.n	8001ac4 <main+0x460>
 8001ac2:	e0cf      	b.n	8001c64 <main+0x600>
		} else if ((u2_rx_buff[0] == 'F') && (u2_rx_buff[1] == 'L')) {
 8001ac4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ac6:	d1d2      	bne.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 3) {
 8001ac8:	2803      	cmp	r0, #3
 8001aca:	d1d0      	bne.n	8001a6e <main+0x40a>
		if ((s[i] > 0x2f) && (s[i] < 0x3a)) {
 8001acc:	78a0      	ldrb	r0, [r4, #2]
 8001ace:	3830      	subs	r0, #48	; 0x30
 8001ad0:	b2c0      	uxtb	r0, r0
 8001ad2:	2809      	cmp	r0, #9
 8001ad4:	d900      	bls.n	8001ad8 <main+0x474>
 8001ad6:	e18e      	b.n	8001df6 <main+0x792>
				shaping_filter = AsciiToDec(u2_rx_buff, 1, 3);
 8001ad8:	4652      	mov	r2, sl
 8001ada:	782b      	ldrb	r3, [r5, #0]
			s[i] = s[i] - 0x30;
 8001adc:	70a0      	strb	r0, [r4, #2]
				shaping_filter = AsciiToDec(u2_rx_buff, 1, 3);
 8001ade:	7010      	strb	r0, [r2, #0]
				if (error_flag == 0)
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1c6      	bne.n	8001a72 <main+0x40e>
					error_flag = (AX5243_set_fl(shaping_filter));
 8001ae4:	f7ff f988 	bl	8000df8 <AX5243_set_fl>
 8001ae8:	7028      	strb	r0, [r5, #0]
 8001aea:	e7e0      	b.n	8001aae <main+0x44a>
		} else if ((u2_rx_buff[0] == 'P') && (u2_rx_buff[1] == 'W')) {
 8001aec:	7863      	ldrb	r3, [r4, #1]
 8001aee:	2b57      	cmp	r3, #87	; 0x57
 8001af0:	d100      	bne.n	8001af4 <main+0x490>
 8001af2:	e11a      	b.n	8001d2a <main+0x6c6>
		} else if ((u2_rx_buff[0] == 'P') && (u2_rx_buff[1] == 'D')) {
 8001af4:	2b44      	cmp	r3, #68	; 0x44
 8001af6:	d1ba      	bne.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 3) {
 8001af8:	2803      	cmp	r0, #3
 8001afa:	d1b8      	bne.n	8001a6e <main+0x40a>
		if ((s[i] > 0x2f) && (s[i] < 0x3a)) {
 8001afc:	78a0      	ldrb	r0, [r4, #2]
 8001afe:	3830      	subs	r0, #48	; 0x30
 8001b00:	b2c0      	uxtb	r0, r0
 8001b02:	2809      	cmp	r0, #9
 8001b04:	d900      	bls.n	8001b08 <main+0x4a4>
 8001b06:	e1bf      	b.n	8001e88 <main+0x824>
				p_d = AsciiToDec(u2_rx_buff, 1, 3);
 8001b08:	4abf      	ldr	r2, [pc, #764]	; (8001e08 <main+0x7a4>)
 8001b0a:	782b      	ldrb	r3, [r5, #0]
			s[i] = s[i] - 0x30;
 8001b0c:	70a0      	strb	r0, [r4, #2]
				p_d = AsciiToDec(u2_rx_buff, 1, 3);
 8001b0e:	7010      	strb	r0, [r2, #0]
				if (error_flag == 0)
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ae      	bne.n	8001a72 <main+0x40e>
					error_flag = (AX5243_set_pd(p_d));
 8001b14:	f7ff f98e 	bl	8000e34 <AX5243_set_pd>
 8001b18:	7028      	strb	r0, [r5, #0]
 8001b1a:	e7c8      	b.n	8001aae <main+0x44a>
		} else if ((u2_rx_buff[0] == 'T') && (u2_rx_buff[1] == 'R')) {
 8001b1c:	7863      	ldrb	r3, [r4, #1]
 8001b1e:	2b52      	cmp	r3, #82	; 0x52
 8001b20:	d100      	bne.n	8001b24 <main+0x4c0>
 8001b22:	e11b      	b.n	8001d5c <main+0x6f8>
		} else if ((u2_rx_buff[0] == 'T') && (u2_rx_buff[1] == 'S')) {
 8001b24:	2b53      	cmp	r3, #83	; 0x53
 8001b26:	d1a2      	bne.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 2) {
 8001b28:	2802      	cmp	r0, #2
 8001b2a:	d1a0      	bne.n	8001a6e <main+0x40a>
				USART_TX_Str("Transmitter settings\n\r");
 8001b2c:	48b7      	ldr	r0, [pc, #732]	; (8001e0c <main+0x7a8>)
 8001b2e:	f7ff fc5f 	bl	80013f0 <USART_TX_Str>
				USART_TX_d_VAL("carrier frequency:", f_carrier, 9);
 8001b32:	4bb7      	ldr	r3, [pc, #732]	; (8001e10 <main+0x7ac>)
 8001b34:	2209      	movs	r2, #9
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	48b6      	ldr	r0, [pc, #728]	; (8001e14 <main+0x7b0>)
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	f7ff fcb7 	bl	80014b0 <USART_TX_d_VAL>
				USART_TX_d_VAL("transmit power:", PWR_dbm, 2);
 8001b42:	4bb5      	ldr	r3, [pc, #724]	; (8001e18 <main+0x7b4>)
 8001b44:	2202      	movs	r2, #2
 8001b46:	8819      	ldrh	r1, [r3, #0]
 8001b48:	48b4      	ldr	r0, [pc, #720]	; (8001e1c <main+0x7b8>)
 8001b4a:	f7ff fcb1 	bl	80014b0 <USART_TX_d_VAL>
				USART_TX_d_VAL("shaping filter:", shaping_filter, 1);
 8001b4e:	4653      	mov	r3, sl
 8001b50:	48b3      	ldr	r0, [pc, #716]	; (8001e20 <main+0x7bc>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	7819      	ldrb	r1, [r3, #0]
 8001b56:	f7ff fcab 	bl	80014b0 <USART_TX_d_VAL>
 8001b5a:	7828      	ldrb	r0, [r5, #0]
 8001b5c:	e7a7      	b.n	8001aae <main+0x44a>
		} else if ((u2_rx_buff[0] == 'I') && (u2_rx_buff[1] == 'R')) { // IR760D
 8001b5e:	7863      	ldrb	r3, [r4, #1]
 8001b60:	2b52      	cmp	r3, #82	; 0x52
 8001b62:	d100      	bne.n	8001b66 <main+0x502>
 8001b64:	e110      	b.n	8001d88 <main+0x724>
		else if ((u2_rx_buff[0] == 'I') && (u2_rx_buff[1] == 'W')) { // IW760D11
 8001b66:	2b57      	cmp	r3, #87	; 0x57
 8001b68:	d181      	bne.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 8) {
 8001b6a:	2808      	cmp	r0, #8
 8001b6c:	d000      	beq.n	8001b70 <main+0x50c>
 8001b6e:	e77e      	b.n	8001a6e <main+0x40a>
				Dev_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8001b70:	78e1      	ldrb	r1, [r4, #3]
 8001b72:	78a0      	ldrb	r0, [r4, #2]
 8001b74:	f7ff fd38 	bl	80015e8 <AsciiToHex>
 8001b78:	4baa      	ldr	r3, [pc, #680]	; (8001e24 <main+0x7c0>)
 8001b7a:	7018      	strb	r0, [r3, #0]
				Reg_addr = AsciiToHex(u2_rx_buff[4], u2_rx_buff[5]);
 8001b7c:	7961      	ldrb	r1, [r4, #5]
 8001b7e:	7920      	ldrb	r0, [r4, #4]
 8001b80:	f7ff fd32 	bl	80015e8 <AsciiToHex>
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <main+0x7c4>)
 8001b86:	7018      	strb	r0, [r3, #0]
				Reg_data = AsciiToHex(u2_rx_buff[6], u2_rx_buff[7]);
 8001b88:	79e1      	ldrb	r1, [r4, #7]
 8001b8a:	79a0      	ldrb	r0, [r4, #6]
 8001b8c:	f7ff fd2c 	bl	80015e8 <AsciiToHex>
 8001b90:	4ba6      	ldr	r3, [pc, #664]	; (8001e2c <main+0x7c8>)
 8001b92:	7018      	strb	r0, [r3, #0]
				if (error_flag == 0) {
 8001b94:	782b      	ldrb	r3, [r5, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d000      	beq.n	8001b9c <main+0x538>
 8001b9a:	e76a      	b.n	8001a72 <main+0x40e>
					I2C_Start();
 8001b9c:	f7ff f978 	bl	8000e90 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1);
 8001ba0:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <main+0x7c0>)
 8001ba2:	7818      	ldrb	r0, [r3, #0]
 8001ba4:	0040      	lsls	r0, r0, #1
 8001ba6:	b2c0      	uxtb	r0, r0
 8001ba8:	f7ff f9e0 	bl	8000f6c <I2C_Write_Byte>
					I2C_Write_Byte(Reg_addr);
 8001bac:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <main+0x7c4>)
 8001bae:	7818      	ldrb	r0, [r3, #0]
 8001bb0:	f7ff f9dc 	bl	8000f6c <I2C_Write_Byte>
					I2C_Write_Byte(Reg_data);
 8001bb4:	4b9d      	ldr	r3, [pc, #628]	; (8001e2c <main+0x7c8>)
 8001bb6:	7818      	ldrb	r0, [r3, #0]
 8001bb8:	f7ff f9d8 	bl	8000f6c <I2C_Write_Byte>
					I2C_Stop();
 8001bbc:	f7ff f9b4 	bl	8000f28 <I2C_Stop>
 8001bc0:	7828      	ldrb	r0, [r5, #0]
 8001bc2:	e774      	b.n	8001aae <main+0x44a>
		else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'R')) {    // SR0D
 8001bc4:	7863      	ldrb	r3, [r4, #1]
 8001bc6:	2b52      	cmp	r3, #82	; 0x52
 8001bc8:	d100      	bne.n	8001bcc <main+0x568>
 8001bca:	e163      	b.n	8001e94 <main+0x830>
		else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'W')) {   // SW0D11
 8001bcc:	2b57      	cmp	r3, #87	; 0x57
 8001bce:	d100      	bne.n	8001bd2 <main+0x56e>
 8001bd0:	e177      	b.n	8001ec2 <main+0x85e>
		else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'V')) {
 8001bd2:	2b56      	cmp	r3, #86	; 0x56
 8001bd4:	d100      	bne.n	8001bd8 <main+0x574>
 8001bd6:	e1e6      	b.n	8001fa6 <main+0x942>
		} else if ((u2_rx_buff[0] == 'S') && (u2_rx_buff[1] == 'C')) {
 8001bd8:	2b43      	cmp	r3, #67	; 0x43
 8001bda:	d000      	beq.n	8001bde <main+0x57a>
 8001bdc:	e747      	b.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 2) {
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d000      	beq.n	8001be4 <main+0x580>
 8001be2:	e744      	b.n	8001a6e <main+0x40a>
				USART_TX_Str("Supported Commands:\n\r");
 8001be4:	4892      	ldr	r0, [pc, #584]	; (8001e30 <main+0x7cc>)
 8001be6:	f7ff fc03 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("AT-communication test,\n\r");
 8001bea:	4892      	ldr	r0, [pc, #584]	; (8001e34 <main+0x7d0>)
 8001bec:	f7ff fc00 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("FRxxxxxxxxx-carrier frequency,\n\r");
 8001bf0:	4891      	ldr	r0, [pc, #580]	; (8001e38 <main+0x7d4>)
 8001bf2:	f7ff fbfd 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("PWxx-transmitter power,\n\r");
 8001bf6:	4891      	ldr	r0, [pc, #580]	; (8001e3c <main+0x7d8>)
 8001bf8:	f7ff fbfa 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("SV-software version,\n\r");
 8001bfc:	4890      	ldr	r0, [pc, #576]	; (8001e40 <main+0x7dc>)
 8001bfe:	f7ff fbf7 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("TRzz...z-raw data transfer,\n\r");
 8001c02:	4890      	ldr	r0, [pc, #576]	; (8001e44 <main+0x7e0>)
 8001c04:	f7ff fbf4 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("TS-transmitter settings,\n\r");
 8001c08:	488f      	ldr	r0, [pc, #572]	; (8001e48 <main+0x7e4>)
 8001c0a:	f7ff fbf1 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("RS-module reboot,\n\r");
 8001c0e:	488f      	ldr	r0, [pc, #572]	; (8001e4c <main+0x7e8>)
 8001c10:	f7ff fbee 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("SC-command list,\n\r");
 8001c14:	488e      	ldr	r0, [pc, #568]	; (8001e50 <main+0x7ec>)
 8001c16:	f7ff fbeb 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str("PDx-Phase direction.\n\r");
 8001c1a:	488e      	ldr	r0, [pc, #568]	; (8001e54 <main+0x7f0>)
 8001c1c:	f7ff fbe8 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c20:	488d      	ldr	r0, [pc, #564]	; (8001e58 <main+0x7f4>)
 8001c22:	f7ff fbe5 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c26:	488d      	ldr	r0, [pc, #564]	; (8001e5c <main+0x7f8>)
 8001c28:	f7ff fbe2 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c2c:	488c      	ldr	r0, [pc, #560]	; (8001e60 <main+0x7fc>)
 8001c2e:	f7ff fbdf 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c32:	488c      	ldr	r0, [pc, #560]	; (8001e64 <main+0x800>)
 8001c34:	f7ff fbdc 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c38:	488b      	ldr	r0, [pc, #556]	; (8001e68 <main+0x804>)
 8001c3a:	f7ff fbd9 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c3e:	488b      	ldr	r0, [pc, #556]	; (8001e6c <main+0x808>)
 8001c40:	f7ff fbd6 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c44:	488a      	ldr	r0, [pc, #552]	; (8001e70 <main+0x80c>)
 8001c46:	f7ff fbd3 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c4a:	488a      	ldr	r0, [pc, #552]	; (8001e74 <main+0x810>)
 8001c4c:	f7ff fbd0 	bl	80013f0 <USART_TX_Str>
				USART_TX_Str(
 8001c50:	4889      	ldr	r0, [pc, #548]	; (8001e78 <main+0x814>)
 8001c52:	f7ff fbcd 	bl	80013f0 <USART_TX_Str>
 8001c56:	7828      	ldrb	r0, [r5, #0]
 8001c58:	e729      	b.n	8001aae <main+0x44a>
			if (RX_STR_Size == 2) {
 8001c5a:	2802      	cmp	r0, #2
 8001c5c:	d000      	beq.n	8001c60 <main+0x5fc>
 8001c5e:	e706      	b.n	8001a6e <main+0x40a>
				error_flag = 0;
 8001c60:	702e      	strb	r6, [r5, #0]
		if (!error_flag) {
 8001c62:	e726      	b.n	8001ab2 <main+0x44e>
			if (RX_STR_Size == 11) {
 8001c64:	280b      	cmp	r0, #11
 8001c66:	d000      	beq.n	8001c6a <main+0x606>
 8001c68:	e701      	b.n	8001a6e <main+0x40a>
 8001c6a:	782b      	ldrb	r3, [r5, #0]
 8001c6c:	0021      	movs	r1, r4
 8001c6e:	4699      	mov	r9, r3
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2300      	movs	r3, #0
 8001c74:	1c62      	adds	r2, r4, #1
 8001c76:	4694      	mov	ip, r2
	uint32_t dec_num = 0;
 8001c78:	2000      	movs	r0, #0
	uint32_t dec = 1;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	310a      	adds	r1, #10
			if (RX_STR_Size == 11) {
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	e008      	b.n	8001c94 <main+0x630>
			s[i] = s[i] - 0x30;
 8001c82:	700b      	strb	r3, [r1, #0]
 8001c84:	4353      	muls	r3, r2
 8001c86:	18c0      	adds	r0, r0, r3
		dec *= 10;
 8001c88:	0093      	lsls	r3, r2, #2
 8001c8a:	189a      	adds	r2, r3, r2
 8001c8c:	3901      	subs	r1, #1
 8001c8e:	0052      	lsls	r2, r2, #1
	for (uint8_t i = number + len - 2; i > number - 2; i--) {
 8001c90:	458c      	cmp	ip, r1
 8001c92:	d00e      	beq.n	8001cb2 <main+0x64e>
		if ((s[i] > 0x2f) && (s[i] < 0x3a)) {
 8001c94:	780b      	ldrb	r3, [r1, #0]
 8001c96:	3b30      	subs	r3, #48	; 0x30
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b09      	cmp	r3, #9
 8001c9c:	d9f1      	bls.n	8001c82 <main+0x61e>
			s[i] = 0;
 8001c9e:	2301      	movs	r3, #1
			error_flag = 1;         // ERROR
 8001ca0:	4699      	mov	r9, r3
			s[i] = 0;
 8001ca2:	9300      	str	r3, [sp, #0]
		dec *= 10;
 8001ca4:	0093      	lsls	r3, r2, #2
			s[i] = 0;
 8001ca6:	700e      	strb	r6, [r1, #0]
		dec *= 10;
 8001ca8:	189a      	adds	r2, r3, r2
 8001caa:	3901      	subs	r1, #1
 8001cac:	0052      	lsls	r2, r2, #1
	for (uint8_t i = number + len - 2; i > number - 2; i--) {
 8001cae:	458c      	cmp	ip, r1
 8001cb0:	d1f0      	bne.n	8001c94 <main+0x630>
 8001cb2:	9b00      	ldr	r3, [sp, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <main+0x65a>
 8001cb8:	464b      	mov	r3, r9
 8001cba:	702b      	strb	r3, [r5, #0]
 8001cbc:	9301      	str	r3, [sp, #4]
				f_carrier = AsciiToDec(u2_rx_buff, 9, 3);
 8001cbe:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <main+0x7ac>)
 8001cc0:	6018      	str	r0, [r3, #0]
				if (error_flag == 0)
 8001cc2:	9b01      	ldr	r3, [sp, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d000      	beq.n	8001cca <main+0x666>
 8001cc8:	e6d3      	b.n	8001a72 <main+0x40e>
					error_flag = (AX5243_set_fr(f_carrier));
 8001cca:	f7fe ffd5 	bl	8000c78 <AX5243_set_fr>
 8001cce:	7028      	strb	r0, [r5, #0]
 8001cd0:	e6ed      	b.n	8001aae <main+0x44a>
		else if ((u2_rx_buff[0] == 'N') && (u2_rx_buff[1] == 'T')) {   // NT0201
 8001cd2:	7863      	ldrb	r3, [r4, #1]
 8001cd4:	2b54      	cmp	r3, #84	; 0x54
 8001cd6:	d100      	bne.n	8001cda <main+0x676>
 8001cd8:	e10d      	b.n	8001ef6 <main+0x892>
		else if ((u2_rx_buff[0] == 'N') && (u2_rx_buff[1] == 'I')) {   // NI760D
 8001cda:	2b49      	cmp	r3, #73	; 0x49
 8001cdc:	d100      	bne.n	8001ce0 <main+0x67c>
 8001cde:	e128      	b.n	8001f32 <main+0x8ce>
		else if ((u2_rx_buff[0] == 'N') && (u2_rx_buff[1] == 'S')) {    // NS0D
 8001ce0:	2b53      	cmp	r3, #83	; 0x53
 8001ce2:	d000      	beq.n	8001ce6 <main+0x682>
 8001ce4:	e6c3      	b.n	8001a6e <main+0x40a>
			if (RX_STR_Size == 4) {
 8001ce6:	2804      	cmp	r0, #4
 8001ce8:	d000      	beq.n	8001cec <main+0x688>
 8001cea:	e6c0      	b.n	8001a6e <main+0x40a>
				Reg_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8001cec:	78e1      	ldrb	r1, [r4, #3]
 8001cee:	78a0      	ldrb	r0, [r4, #2]
 8001cf0:	f7ff fc7a 	bl	80015e8 <AsciiToHex>
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <main+0x7c4>)
 8001cf6:	7018      	strb	r0, [r3, #0]
				if (error_flag == 0) {
 8001cf8:	782b      	ldrb	r3, [r5, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d000      	beq.n	8001d00 <main+0x69c>
 8001cfe:	e6b8      	b.n	8001a72 <main+0x40e>
					Reg_data = SPI2_Read_Byte(Reg_addr);
 8001d00:	f7ff f9ee 	bl	80010e0 <SPI2_Read_Byte>
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <main+0x7c8>)
					tx_buff[0] = Reg_addr;
 8001d06:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <main+0x818>)
					Reg_data = SPI2_Read_Byte(Reg_addr);
 8001d08:	7018      	strb	r0, [r3, #0]
					tx_buff[0] = Reg_addr;
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <main+0x7c4>)
					tx_buff[1] = Reg_data;
 8001d0c:	7050      	strb	r0, [r2, #1]
					tx_buff[0] = Reg_addr;
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	7013      	strb	r3, [r2, #0]
					tx_buff[1] = Reg_data;
 8001d12:	0013      	movs	r3, r2
					preapare_msg_16bit(&initData, tx_buff, data_after_preapare);
 8001d14:	0019      	movs	r1, r3
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <main+0x7a0>)
 8001d18:	a812      	add	r0, sp, #72	; 0x48
 8001d1a:	f7ff fb0b 	bl	8001334 <preapare_msg_16bit>
					error_flag = (AX5243_transmit(data_after_preapare, 20));
 8001d1e:	2114      	movs	r1, #20
 8001d20:	4838      	ldr	r0, [pc, #224]	; (8001e04 <main+0x7a0>)
 8001d22:	f7fe fec9 	bl	8000ab8 <AX5243_transmit>
 8001d26:	7028      	strb	r0, [r5, #0]
 8001d28:	e6c1      	b.n	8001aae <main+0x44a>
			if (RX_STR_Size == 4) {
 8001d2a:	2804      	cmp	r0, #4
 8001d2c:	d000      	beq.n	8001d30 <main+0x6cc>
 8001d2e:	e69e      	b.n	8001a6e <main+0x40a>
		if ((s[i] > 0x2f) && (s[i] < 0x3a)) {
 8001d30:	78e0      	ldrb	r0, [r4, #3]
 8001d32:	3830      	subs	r0, #48	; 0x30
 8001d34:	b2c0      	uxtb	r0, r0
 8001d36:	2809      	cmp	r0, #9
 8001d38:	d800      	bhi.n	8001d3c <main+0x6d8>
 8001d3a:	e152      	b.n	8001fe2 <main+0x97e>
			error_flag = 1;         // ERROR
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	3b56      	subs	r3, #86	; 0x56
			s[i] = 0;
 8001d40:	70e6      	strb	r6, [r4, #3]
			error_flag = 1;         // ERROR
 8001d42:	702b      	strb	r3, [r5, #0]
		if ((s[i] > 0x2f) && (s[i] < 0x3a)) {
 8001d44:	78a3      	ldrb	r3, [r4, #2]
 8001d46:	3b30      	subs	r3, #48	; 0x30
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	d800      	bhi.n	8001d50 <main+0x6ec>
 8001d4e:	e139      	b.n	8001fc4 <main+0x960>
			error_flag = 1;         // ERROR
 8001d50:	2301      	movs	r3, #1
 8001d52:	702b      	strb	r3, [r5, #0]
				PWR_dbm = AsciiToDec(u2_rx_buff, 2, 3);
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <main+0x7b4>)
			s[i] = 0;
 8001d56:	70a6      	strb	r6, [r4, #2]
				PWR_dbm = AsciiToDec(u2_rx_buff, 2, 3);
 8001d58:	8018      	strh	r0, [r3, #0]
				if (error_flag == 0)
 8001d5a:	e68a      	b.n	8001a72 <main+0x40e>
	if ((len - number) % 2) {
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	0011      	movs	r1, r2
 8001d60:	1ec3      	subs	r3, r0, #3
 8001d62:	4019      	ands	r1, r3
 8001d64:	421a      	tst	r2, r3
 8001d66:	d100      	bne.n	8001d6a <main+0x706>
 8001d68:	e0df      	b.n	8001f2a <main+0x8c6>
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	f7ff fa22 	bl	80011b4 <Ascii2ToHex.part.0>
			RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 8001d70:	4a43      	ldr	r2, [pc, #268]	; (8001e80 <main+0x81c>)
 8001d72:	782b      	ldrb	r3, [r5, #0]
	return ind;
 8001d74:	0001      	movs	r1, r0
			RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 8001d76:	8010      	strh	r0, [r2, #0]
			if (error_flag == 0)
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d000      	beq.n	8001d7e <main+0x71a>
 8001d7c:	e679      	b.n	8001a72 <main+0x40e>
				error_flag = (AX5243_transmit(tx_buff, RX_Data_Size));
 8001d7e:	483f      	ldr	r0, [pc, #252]	; (8001e7c <main+0x818>)
 8001d80:	f7fe fe9a 	bl	8000ab8 <AX5243_transmit>
 8001d84:	7028      	strb	r0, [r5, #0]
 8001d86:	e692      	b.n	8001aae <main+0x44a>
			if (RX_STR_Size == 6) {
 8001d88:	2806      	cmp	r0, #6
 8001d8a:	d000      	beq.n	8001d8e <main+0x72a>
 8001d8c:	e66f      	b.n	8001a6e <main+0x40a>
				Dev_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8001d8e:	78e1      	ldrb	r1, [r4, #3]
 8001d90:	78a0      	ldrb	r0, [r4, #2]
 8001d92:	f7ff fc29 	bl	80015e8 <AsciiToHex>
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <main+0x7c0>)
 8001d98:	7018      	strb	r0, [r3, #0]
				Reg_addr = AsciiToHex(u2_rx_buff[4], u2_rx_buff[5]);
 8001d9a:	7961      	ldrb	r1, [r4, #5]
 8001d9c:	7920      	ldrb	r0, [r4, #4]
 8001d9e:	f7ff fc23 	bl	80015e8 <AsciiToHex>
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <main+0x7c4>)
 8001da4:	7018      	strb	r0, [r3, #0]
				if (error_flag == 0) {
 8001da6:	782b      	ldrb	r3, [r5, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d000      	beq.n	8001dae <main+0x74a>
 8001dac:	e661      	b.n	8001a72 <main+0x40e>
					I2C_Start();
 8001dae:	f7ff f86f 	bl	8000e90 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1);
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <main+0x7c0>)
 8001db4:	7818      	ldrb	r0, [r3, #0]
 8001db6:	0040      	lsls	r0, r0, #1
 8001db8:	b2c0      	uxtb	r0, r0
 8001dba:	f7ff f8d7 	bl	8000f6c <I2C_Write_Byte>
					I2C_Write_Byte(Reg_addr);
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <main+0x7c4>)
 8001dc0:	7818      	ldrb	r0, [r3, #0]
 8001dc2:	f7ff f8d3 	bl	8000f6c <I2C_Write_Byte>
					I2C_Start();
 8001dc6:	f7ff f863 	bl	8000e90 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1 | 0x1);
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <main+0x7c0>)
 8001dcc:	7818      	ldrb	r0, [r3, #0]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	0040      	lsls	r0, r0, #1
 8001dd2:	4318      	orrs	r0, r3
 8001dd4:	b2c0      	uxtb	r0, r0
 8001dd6:	f7ff f8c9 	bl	8000f6c <I2C_Write_Byte>
					Reg_data = I2C_Read_Byte(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f902 	bl	8000fe4 <I2C_Read_Byte>
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <main+0x7c8>)
 8001de2:	7018      	strb	r0, [r3, #0]
					I2C_Stop();
 8001de4:	f7ff f8a0 	bl	8000f28 <I2C_Stop>
					USART_TX_h_VAL("Reg_data:", Reg_data);
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <main+0x7c8>)
 8001dea:	4826      	ldr	r0, [pc, #152]	; (8001e84 <main+0x820>)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	f7ff fb15 	bl	800141c <USART_TX_h_VAL>
 8001df2:	7828      	ldrb	r0, [r5, #0]
 8001df4:	e65b      	b.n	8001aae <main+0x44a>
			error_flag = 1;         // ERROR
 8001df6:	2301      	movs	r3, #1
 8001df8:	702b      	strb	r3, [r5, #0]
				shaping_filter = AsciiToDec(u2_rx_buff, 1, 3);
 8001dfa:	4653      	mov	r3, sl
			s[i] = 0;
 8001dfc:	70a6      	strb	r6, [r4, #2]
				shaping_filter = AsciiToDec(u2_rx_buff, 1, 3);
 8001dfe:	701e      	strb	r6, [r3, #0]
				if (error_flag == 0)
 8001e00:	e637      	b.n	8001a72 <main+0x40e>
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	2000023c 	.word	0x2000023c
 8001e08:	2000027c 	.word	0x2000027c
 8001e0c:	08003648 	.word	0x08003648
 8001e10:	2000003c 	.word	0x2000003c
 8001e14:	08003660 	.word	0x08003660
 8001e18:	2000027e 	.word	0x2000027e
 8001e1c:	08003674 	.word	0x08003674
 8001e20:	08003684 	.word	0x08003684
 8001e24:	20000238 	.word	0x20000238
 8001e28:	20000042 	.word	0x20000042
 8001e2c:	2000027d 	.word	0x2000027d
 8001e30:	08003694 	.word	0x08003694
 8001e34:	080036ac 	.word	0x080036ac
 8001e38:	080036c8 	.word	0x080036c8
 8001e3c:	080036ec 	.word	0x080036ec
 8001e40:	08003708 	.word	0x08003708
 8001e44:	08003720 	.word	0x08003720
 8001e48:	08003740 	.word	0x08003740
 8001e4c:	0800375c 	.word	0x0800375c
 8001e50:	08003770 	.word	0x08003770
 8001e54:	08003784 	.word	0x08003784
 8001e58:	0800379c 	.word	0x0800379c
 8001e5c:	080037d8 	.word	0x080037d8
 8001e60:	08003830 	.word	0x08003830
 8001e64:	08003898 	.word	0x08003898
 8001e68:	080038dc 	.word	0x080038dc
 8001e6c:	08003934 	.word	0x08003934
 8001e70:	08003980 	.word	0x08003980
 8001e74:	080039b8 	.word	0x080039b8
 8001e78:	08003a2c 	.word	0x08003a2c
 8001e7c:	20000280 	.word	0x20000280
 8001e80:	20000040 	.word	0x20000040
 8001e84:	08003624 	.word	0x08003624
			error_flag = 1;         // ERROR
 8001e88:	2301      	movs	r3, #1
 8001e8a:	702b      	strb	r3, [r5, #0]
				p_d = AsciiToDec(u2_rx_buff, 1, 3);
 8001e8c:	4b66      	ldr	r3, [pc, #408]	; (8002028 <main+0x9c4>)
			s[i] = 0;
 8001e8e:	70a6      	strb	r6, [r4, #2]
				p_d = AsciiToDec(u2_rx_buff, 1, 3);
 8001e90:	701e      	strb	r6, [r3, #0]
				if (error_flag == 0)
 8001e92:	e5ee      	b.n	8001a72 <main+0x40e>
			if (RX_STR_Size == 4) {
 8001e94:	2804      	cmp	r0, #4
 8001e96:	d000      	beq.n	8001e9a <main+0x836>
 8001e98:	e5e9      	b.n	8001a6e <main+0x40a>
				Reg_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8001e9a:	78e1      	ldrb	r1, [r4, #3]
 8001e9c:	78a0      	ldrb	r0, [r4, #2]
 8001e9e:	f7ff fba3 	bl	80015e8 <AsciiToHex>
 8001ea2:	4b62      	ldr	r3, [pc, #392]	; (800202c <main+0x9c8>)
 8001ea4:	7018      	strb	r0, [r3, #0]
				if (error_flag == 0) {
 8001ea6:	782b      	ldrb	r3, [r5, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d000      	beq.n	8001eae <main+0x84a>
 8001eac:	e5e1      	b.n	8001a72 <main+0x40e>
					Reg_data = SPI2_Read_Byte(Reg_addr);
 8001eae:	f7ff f917 	bl	80010e0 <SPI2_Read_Byte>
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <main+0x9cc>)
 8001eb4:	0001      	movs	r1, r0
 8001eb6:	7018      	strb	r0, [r3, #0]
					USART_TX_h_VAL("Reg_data:", Reg_data);
 8001eb8:	485e      	ldr	r0, [pc, #376]	; (8002034 <main+0x9d0>)
 8001eba:	f7ff faaf 	bl	800141c <USART_TX_h_VAL>
 8001ebe:	7828      	ldrb	r0, [r5, #0]
 8001ec0:	e5f5      	b.n	8001aae <main+0x44a>
			if (RX_STR_Size == 6) {
 8001ec2:	2806      	cmp	r0, #6
 8001ec4:	d000      	beq.n	8001ec8 <main+0x864>
 8001ec6:	e5d2      	b.n	8001a6e <main+0x40a>
				Reg_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8001ec8:	78e1      	ldrb	r1, [r4, #3]
 8001eca:	78a0      	ldrb	r0, [r4, #2]
 8001ecc:	f7ff fb8c 	bl	80015e8 <AsciiToHex>
 8001ed0:	4b56      	ldr	r3, [pc, #344]	; (800202c <main+0x9c8>)
 8001ed2:	7018      	strb	r0, [r3, #0]
				Reg_data = AsciiToHex(u2_rx_buff[4], u2_rx_buff[5]);
 8001ed4:	7961      	ldrb	r1, [r4, #5]
 8001ed6:	7920      	ldrb	r0, [r4, #4]
 8001ed8:	f7ff fb86 	bl	80015e8 <AsciiToHex>
 8001edc:	4b54      	ldr	r3, [pc, #336]	; (8002030 <main+0x9cc>)
 8001ede:	0001      	movs	r1, r0
 8001ee0:	7018      	strb	r0, [r3, #0]
				if (error_flag == 0) {
 8001ee2:	782b      	ldrb	r3, [r5, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d000      	beq.n	8001eea <main+0x886>
 8001ee8:	e5c3      	b.n	8001a72 <main+0x40e>
					SPI2_Write_Byte(Reg_addr, Reg_data);
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <main+0x9c8>)
 8001eec:	7818      	ldrb	r0, [r3, #0]
 8001eee:	f7ff f8bf 	bl	8001070 <SPI2_Write_Byte>
 8001ef2:	7828      	ldrb	r0, [r5, #0]
 8001ef4:	e5db      	b.n	8001aae <main+0x44a>
			if (RX_STR_Size == 6 || RX_STR_Size == 14) {
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	3b4c      	subs	r3, #76	; 0x4c
 8001efa:	439a      	bics	r2, r3
 8001efc:	2a06      	cmp	r2, #6
 8001efe:	d000      	beq.n	8001f02 <main+0x89e>
 8001f00:	e5b5      	b.n	8001a6e <main+0x40a>
	if ((len - number) % 2) {
 8001f02:	2103      	movs	r1, #3
 8001f04:	f7ff f956 	bl	80011b4 <Ascii2ToHex.part.0>
				RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <main+0x9d4>)
 8001f0a:	8018      	strh	r0, [r3, #0]
				if (RX_Data_Size == 2 && error_flag == 0) {
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d16a      	bne.n	8001fe6 <main+0x982>
 8001f10:	782b      	ldrb	r3, [r5, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d000      	beq.n	8001f18 <main+0x8b4>
 8001f16:	e5ac      	b.n	8001a72 <main+0x40e>
					uint8_t tmp = tx_buff[0];
 8001f18:	4b48      	ldr	r3, [pc, #288]	; (800203c <main+0x9d8>)
					tx_buff[0] = tx_buff[1];
 8001f1a:	4a48      	ldr	r2, [pc, #288]	; (800203c <main+0x9d8>)
					uint8_t tmp = tx_buff[0];
 8001f1c:	781b      	ldrb	r3, [r3, #0]
					tx_buff[0] = tx_buff[1];
 8001f1e:	7852      	ldrb	r2, [r2, #1]
 8001f20:	4946      	ldr	r1, [pc, #280]	; (800203c <main+0x9d8>)
 8001f22:	700a      	strb	r2, [r1, #0]
					tx_buff[1] = tmp;
 8001f24:	704b      	strb	r3, [r1, #1]
					preapare_msg_16bit(&initData, tx_buff, data_after_preapare);
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <main+0x9dc>)
 8001f28:	e6f6      	b.n	8001d18 <main+0x6b4>
			RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <main+0x9d4>)
		error_flag = 1;
 8001f2c:	702a      	strb	r2, [r5, #0]
			RX_Data_Size = Ascii2ToHex(u2_rx_buff, RX_STR_Size, 3);
 8001f2e:	8019      	strh	r1, [r3, #0]
			if (error_flag == 0)
 8001f30:	e59f      	b.n	8001a72 <main+0x40e>
			if (RX_STR_Size == 6) {
 8001f32:	2806      	cmp	r0, #6
 8001f34:	d000      	beq.n	8001f38 <main+0x8d4>
 8001f36:	e59a      	b.n	8001a6e <main+0x40a>
				Dev_addr = AsciiToHex(u2_rx_buff[2], u2_rx_buff[3]);
 8001f38:	78e1      	ldrb	r1, [r4, #3]
 8001f3a:	78a0      	ldrb	r0, [r4, #2]
 8001f3c:	f7ff fb54 	bl	80015e8 <AsciiToHex>
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <main+0x9e0>)
 8001f42:	7018      	strb	r0, [r3, #0]
				Reg_addr = AsciiToHex(u2_rx_buff[4], u2_rx_buff[5]);
 8001f44:	7961      	ldrb	r1, [r4, #5]
 8001f46:	7920      	ldrb	r0, [r4, #4]
 8001f48:	f7ff fb4e 	bl	80015e8 <AsciiToHex>
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <main+0x9c8>)
 8001f4e:	7018      	strb	r0, [r3, #0]
				if (error_flag == 0) {
 8001f50:	782b      	ldrb	r3, [r5, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d000      	beq.n	8001f58 <main+0x8f4>
 8001f56:	e58c      	b.n	8001a72 <main+0x40e>
					I2C_Start();
 8001f58:	f7fe ff9a 	bl	8000e90 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1);
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <main+0x9e0>)
 8001f5e:	7818      	ldrb	r0, [r3, #0]
 8001f60:	0040      	lsls	r0, r0, #1
 8001f62:	b2c0      	uxtb	r0, r0
 8001f64:	f7ff f802 	bl	8000f6c <I2C_Write_Byte>
					I2C_Write_Byte(Reg_addr);
 8001f68:	4b30      	ldr	r3, [pc, #192]	; (800202c <main+0x9c8>)
 8001f6a:	7818      	ldrb	r0, [r3, #0]
 8001f6c:	f7fe fffe 	bl	8000f6c <I2C_Write_Byte>
					I2C_Start();
 8001f70:	f7fe ff8e 	bl	8000e90 <I2C_Start>
					I2C_Write_Byte(Dev_addr << 1 | 0x1);
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <main+0x9e0>)
 8001f76:	7818      	ldrb	r0, [r3, #0]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	0040      	lsls	r0, r0, #1
 8001f7c:	4318      	orrs	r0, r3
 8001f7e:	b2c0      	uxtb	r0, r0
 8001f80:	f7fe fff4 	bl	8000f6c <I2C_Write_Byte>
					Reg_data = I2C_Read_Byte(1);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff f82d 	bl	8000fe4 <I2C_Read_Byte>
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <main+0x9cc>)
 8001f8c:	7018      	strb	r0, [r3, #0]
					I2C_Stop();
 8001f8e:	f7fe ffcb 	bl	8000f28 <I2C_Stop>
					tx_buff[0] = Reg_addr;
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <main+0x9c8>)
 8001f94:	4a29      	ldr	r2, [pc, #164]	; (800203c <main+0x9d8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
					preapare_msg_16bit(&initData, tx_buff, data_after_preapare);
 8001f98:	4928      	ldr	r1, [pc, #160]	; (800203c <main+0x9d8>)
					tx_buff[0] = Reg_addr;
 8001f9a:	7013      	strb	r3, [r2, #0]
					tx_buff[1] = Reg_data;
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <main+0x9cc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	7053      	strb	r3, [r2, #1]
					preapare_msg_16bit(&initData, tx_buff, data_after_preapare);
 8001fa2:	4a27      	ldr	r2, [pc, #156]	; (8002040 <main+0x9dc>)
 8001fa4:	e6b8      	b.n	8001d18 <main+0x6b4>
			if (RX_STR_Size == 2) {
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d000      	beq.n	8001fac <main+0x948>
 8001faa:	e560      	b.n	8001a6e <main+0x40a>
				USART_TX_Str("Software version:2.0 \n\r");
 8001fac:	4826      	ldr	r0, [pc, #152]	; (8002048 <main+0x9e4>)
 8001fae:	f7ff fa1f 	bl	80013f0 <USART_TX_Str>
 8001fb2:	7828      	ldrb	r0, [r5, #0]
 8001fb4:	e57b      	b.n	8001aae <main+0x44a>
			if (RX_STR_Size == 2) {
 8001fb6:	2802      	cmp	r0, #2
 8001fb8:	d000      	beq.n	8001fbc <main+0x958>
 8001fba:	e558      	b.n	8001a6e <main+0x40a>
				AX5243_rs();
 8001fbc:	f7fe ff64 	bl	8000e88 <AX5243_rs>
 8001fc0:	7828      	ldrb	r0, [r5, #0]
 8001fc2:	e574      	b.n	8001aae <main+0x44a>
				PWR_dbm = AsciiToDec(u2_rx_buff, 2, 3);
 8001fc4:	0099      	lsls	r1, r3, #2
			s[i] = s[i] - 0x30;
 8001fc6:	70a3      	strb	r3, [r4, #2]
				PWR_dbm = AsciiToDec(u2_rx_buff, 2, 3);
 8001fc8:	18cb      	adds	r3, r1, r3
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	1818      	adds	r0, r3, r0
 8001fce:	782a      	ldrb	r2, [r5, #0]
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <main+0x9e8>)
 8001fd2:	8018      	strh	r0, [r3, #0]
				if (error_flag == 0)
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d000      	beq.n	8001fda <main+0x976>
 8001fd8:	e54b      	b.n	8001a72 <main+0x40e>
					error_flag = (AX5243_set_pw(PWR_dbm));
 8001fda:	f7fe feb1 	bl	8000d40 <AX5243_set_pw>
 8001fde:	7028      	strb	r0, [r5, #0]
 8001fe0:	e565      	b.n	8001aae <main+0x44a>
			s[i] = s[i] - 0x30;
 8001fe2:	70e0      	strb	r0, [r4, #3]
 8001fe4:	e6ae      	b.n	8001d44 <main+0x6e0>
				} else if (RX_Data_Size == 6 && error_flag == 0) {
 8001fe6:	2806      	cmp	r0, #6
 8001fe8:	d11c      	bne.n	8002024 <main+0x9c0>
 8001fea:	782b      	ldrb	r3, [r5, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d000      	beq.n	8001ff2 <main+0x98e>
 8001ff0:	e53f      	b.n	8001a72 <main+0x40e>
						tx_buff[i] = tx_buff[5 - i];
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <main+0x9d8>)
						uint8_t tmp = tx_buff[i];
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <main+0x9d8>)
						tx_buff[i] = tx_buff[5 - i];
 8001ff6:	4911      	ldr	r1, [pc, #68]	; (800203c <main+0x9d8>)
 8001ff8:	7952      	ldrb	r2, [r2, #5]
						uint8_t tmp = tx_buff[i];
 8001ffa:	781b      	ldrb	r3, [r3, #0]
						tx_buff[i] = tx_buff[5 - i];
 8001ffc:	700a      	strb	r2, [r1, #0]
 8001ffe:	790a      	ldrb	r2, [r1, #4]
						tx_buff[5 - i] = tmp;
 8002000:	714b      	strb	r3, [r1, #5]
						uint8_t tmp = tx_buff[i];
 8002002:	784b      	ldrb	r3, [r1, #1]
						tx_buff[i] = tx_buff[5 - i];
 8002004:	704a      	strb	r2, [r1, #1]
 8002006:	78ca      	ldrb	r2, [r1, #3]
						tx_buff[5 - i] = tmp;
 8002008:	710b      	strb	r3, [r1, #4]
						uint8_t tmp = tx_buff[i];
 800200a:	788b      	ldrb	r3, [r1, #2]
					preapare_msg_48bit(&initData, tx_buff, data_after_preapare);
 800200c:	a812      	add	r0, sp, #72	; 0x48
						tx_buff[i] = tx_buff[5 - i];
 800200e:	708a      	strb	r2, [r1, #2]
					preapare_msg_48bit(&initData, tx_buff, data_after_preapare);
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <main+0x9dc>)
						tx_buff[5 - i] = tmp;
 8002012:	70cb      	strb	r3, [r1, #3]
					preapare_msg_48bit(&initData, tx_buff, data_after_preapare);
 8002014:	f7ff f9ae 	bl	8001374 <preapare_msg_48bit>
					error_flag = (AX5243_transmit(data_after_preapare, 36));
 8002018:	2124      	movs	r1, #36	; 0x24
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <main+0x9dc>)
 800201c:	f7fe fd4c 	bl	8000ab8 <AX5243_transmit>
 8002020:	7028      	strb	r0, [r5, #0]
 8002022:	e544      	b.n	8001aae <main+0x44a>
 8002024:	7828      	ldrb	r0, [r5, #0]
 8002026:	e542      	b.n	8001aae <main+0x44a>
 8002028:	2000027c 	.word	0x2000027c
 800202c:	20000042 	.word	0x20000042
 8002030:	2000027d 	.word	0x2000027d
 8002034:	08003624 	.word	0x08003624
 8002038:	20000040 	.word	0x20000040
 800203c:	20000280 	.word	0x20000280
 8002040:	2000023c 	.word	0x2000023c
 8002044:	20000238 	.word	0x20000238
 8002048:	08003630 	.word	0x08003630
 800204c:	2000027e 	.word	0x2000027e

08002050 <to_diff>:
#include "phy.h"

void to_diff(uint8_t* src, uint8_t* dis, uint16_t len) {
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	46ce      	mov	lr, r9
 8002054:	4647      	mov	r7, r8
 8002056:	4690      	mov	r8, r2
 8002058:	b580      	push	{r7, lr}
 800205a:	4681      	mov	r9, r0
	
	uint8_t res = src[0] & 1;
 800205c:	7802      	ldrb	r2, [r0, #0]
	
	for (int i=0; i<len; i++) {
 800205e:	4643      	mov	r3, r8
	uint8_t res = src[0] & 1;
 8002060:	2001      	movs	r0, #1
void to_diff(uint8_t* src, uint8_t* dis, uint16_t len) {
 8002062:	468c      	mov	ip, r1
	uint8_t res = src[0] & 1;
 8002064:	4010      	ands	r0, r2
	for (int i=0; i<len; i++) {
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01f      	beq.n	80020aa <to_diff+0x5a>
 800206a:	2700      	movs	r7, #0
		uint8_t dis_p = 0;
		
		for (int j=0; j<8; j++) {
			if (j != 0 || i != 0)
				res = (res ^ ((src[i] >> j) & 1));
 800206c:	2101      	movs	r1, #1
 800206e:	2300      	movs	r3, #0
			if (j != 0 || i != 0)
 8002070:	003c      	movs	r4, r7
		uint8_t dis_p = 0;
 8002072:	2600      	movs	r6, #0
			if (j != 0 || i != 0)
 8002074:	431c      	orrs	r4, r3
 8002076:	d00d      	beq.n	8002094 <to_diff+0x44>
				res = (res ^ ((src[i] >> j) & 1));
 8002078:	0014      	movs	r4, r2
 800207a:	411c      	asrs	r4, r3
 800207c:	400c      	ands	r4, r1
 800207e:	4060      	eors	r0, r4
 8002080:	b245      	sxtb	r5, r0
			dis_p |= res << j;
 8002082:	409d      	lsls	r5, r3
 8002084:	432e      	orrs	r6, r5
 8002086:	b2f6      	uxtb	r6, r6
		for (int j=0; j<8; j++) {
 8002088:	2b07      	cmp	r3, #7
 800208a:	d006      	beq.n	800209a <to_diff+0x4a>
 800208c:	3301      	adds	r3, #1
			if (j != 0 || i != 0)
 800208e:	003c      	movs	r4, r7
 8002090:	431c      	orrs	r4, r3
 8002092:	d1f1      	bne.n	8002078 <to_diff+0x28>
			dis_p |= res << j;
 8002094:	4306      	orrs	r6, r0
		for (int j=0; j<8; j++) {
 8002096:	3301      	adds	r3, #1
 8002098:	e7f9      	b.n	800208e <to_diff+0x3e>
		}
		
		dis[i] = dis_p;
 800209a:	4663      	mov	r3, ip
 800209c:	55de      	strb	r6, [r3, r7]
	for (int i=0; i<len; i++) {
 800209e:	3701      	adds	r7, #1
 80020a0:	45b8      	cmp	r8, r7
 80020a2:	dd02      	ble.n	80020aa <to_diff+0x5a>
 80020a4:	464b      	mov	r3, r9
 80020a6:	5dda      	ldrb	r2, [r3, r7]
 80020a8:	e7e1      	b.n	800206e <to_diff+0x1e>
	}
	
 80020aa:	bcc0      	pop	{r6, r7}
 80020ac:	46b9      	mov	r9, r7
 80020ae:	46b0      	mov	r8, r6
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)

080020b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler>
 80020b6:	46c0      	nop			; (mov r8, r8)

080020b8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <HardFault_Handler>
 80020ba:	46c0      	nop			; (mov r8, r8)

080020bc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020bc:	4770      	bx	lr
 80020be:	46c0      	nop			; (mov r8, r8)

080020c0 <PendSV_Handler>:
 80020c0:	4770      	bx	lr
 80020c2:	46c0      	nop			; (mov r8, r8)

080020c4 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	msTicks++;
 80020c4:	4a02      	ldr	r2, [pc, #8]	; (80020d0 <SysTick_Handler+0xc>)
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020cc:	4770      	bx	lr
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	20000380 	.word	0x20000380

080020d4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020d4:	4770      	bx	lr
 80020d6:	46c0      	nop			; (mov r8, r8)

080020d8 <aesCTR_a>:

uint128_256_t aesCTR(uint128_256_t key, iv_t iv, uint128_256_t data) {
    return aesCTR_a(key, iv, data.data, sizeof (data.data));
}

uint128_256_t aesCTR_a(uint128_256_t key, iv_t iv, uint8_t* data, size_t size) {
 80020d8:	b084      	sub	sp, #16
 80020da:	b510      	push	{r4, lr}
 80020dc:	0004      	movs	r4, r0
 80020de:	b0b4      	sub	sp, #208	; 0xd0
 80020e0:	9137      	str	r1, [sp, #220]	; 0xdc
 80020e2:	9238      	str	r2, [sp, #224]	; 0xe0
    struct AES_ctx _key;
    uint128_256_t ret;
    memcpy(ret.data, data, size);
 80020e4:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80020e6:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80020e8:	4668      	mov	r0, sp
uint128_256_t aesCTR_a(uint128_256_t key, iv_t iv, uint8_t* data, size_t size) {
 80020ea:	9339      	str	r3, [sp, #228]	; 0xe4
    memcpy(ret.data, data, size);
 80020ec:	f001 fa42 	bl	8003574 <memcpy>
    AES_init_ctx_iv(&_key, key.data, (uint8_t*)&iv);
 80020f0:	aa3b      	add	r2, sp, #236	; 0xec
 80020f2:	a937      	add	r1, sp, #220	; 0xdc
 80020f4:	a804      	add	r0, sp, #16
 80020f6:	f000 fe81 	bl	8002dfc <AES_init_ctx_iv>
    AES_CTR_xcrypt_buffer(&_key, ret.data, size);
 80020fa:	4669      	mov	r1, sp
 80020fc:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80020fe:	a804      	add	r0, sp, #16
 8002100:	f000 fe90 	bl	8002e24 <AES_CTR_xcrypt_buffer>

    return ret;
 8002104:	2210      	movs	r2, #16
 8002106:	4669      	mov	r1, sp
 8002108:	0020      	movs	r0, r4
 800210a:	f001 fa33 	bl	8003574 <memcpy>
}
 800210e:	0020      	movs	r0, r4
 8002110:	b034      	add	sp, #208	; 0xd0
 8002112:	bc10      	pop	{r4}
 8002114:	bc08      	pop	{r3}
 8002116:	b004      	add	sp, #16
 8002118:	4718      	bx	r3
 800211a:	46c0      	nop			; (mov r8, r8)

0800211c <aesECB>:

uint128_256_t aesECB(uint128_256_t key, uint128_256_t data) {
 800211c:	b084      	sub	sp, #16
 800211e:	b510      	push	{r4, lr}
 8002120:	0004      	movs	r4, r0
 8002122:	b0b4      	sub	sp, #208	; 0xd0
 8002124:	9137      	str	r1, [sp, #220]	; 0xdc
 8002126:	9238      	str	r2, [sp, #224]	; 0xe0

    struct AES_ctx _key;
    uint128_256_t ret;
    memcpy(ret.data, data.data, sizeof(ret.data));
 8002128:	a93b      	add	r1, sp, #236	; 0xec
 800212a:	2210      	movs	r2, #16
 800212c:	4668      	mov	r0, sp
uint128_256_t aesECB(uint128_256_t key, uint128_256_t data) {
 800212e:	9339      	str	r3, [sp, #228]	; 0xe4
    memcpy(ret.data, data.data, sizeof(ret.data));
 8002130:	f001 fa20 	bl	8003574 <memcpy>
    AES_init_ctx(&_key, key.data);
 8002134:	a937      	add	r1, sp, #220	; 0xdc
 8002136:	a804      	add	r0, sp, #16
 8002138:	f000 fe5c 	bl	8002df4 <AES_init_ctx>
    AES_ECB_encrypt(&_key, ret.data);
 800213c:	4669      	mov	r1, sp
 800213e:	a804      	add	r0, sp, #16
 8002140:	f000 fe68 	bl	8002e14 <AES_ECB_encrypt>


    return ret;
 8002144:	2210      	movs	r2, #16
 8002146:	4669      	mov	r1, sp
 8002148:	0020      	movs	r0, r4
 800214a:	f001 fa13 	bl	8003574 <memcpy>
}
 800214e:	0020      	movs	r0, r4
 8002150:	b034      	add	sp, #208	; 0xd0
 8002152:	bc10      	pop	{r4}
 8002154:	bc08      	pop	{r3}
 8002156:	b004      	add	sp, #16
 8002158:	4718      	bx	r3
 800215a:	46c0      	nop			; (mov r8, r8)

0800215c <getMIC16>:
uint24a_t getMIC16(uint128_256_t Km, uint24a_t DevAddr, uint16_t cryptoMacPayload, uint16_t Nn) {
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	46d6      	mov	lr, sl
 8002160:	464f      	mov	r7, r9
 8002162:	4646      	mov	r6, r8
 8002164:	b5c0      	push	{r6, r7, lr}
 8002166:	b0a2      	sub	sp, #136	; 0x88
 8002168:	930b      	str	r3, [sp, #44]	; 0x2c
    uint24a_t ret = { 0 };
 800216a:	2300      	movs	r3, #0
    memset(P.data, 0, sizeof(P.data));
 800216c:	ae0e      	add	r6, sp, #56	; 0x38
uint24a_t getMIC16(uint128_256_t Km, uint24a_t DevAddr, uint16_t cryptoMacPayload, uint16_t Nn) {
 800216e:	9008      	str	r0, [sp, #32]
 8002170:	9109      	str	r1, [sp, #36]	; 0x24
 8002172:	920a      	str	r2, [sp, #40]	; 0x28
    memset(P.data, 0, sizeof(P.data));
 8002174:	2100      	movs	r1, #0
 8002176:	2209      	movs	r2, #9
 8002178:	0030      	movs	r0, r6
    uint24a_t ret = { 0 };
 800217a:	930c      	str	r3, [sp, #48]	; 0x30
    memset(P.data, 0, sizeof(P.data));
 800217c:	f001 fa03 	bl	8003586 <memset>
    memcpy(P.data + sizeof(P.data) - sizeof(DevAddr.data), DevAddr.data, sizeof(DevAddr.data));
 8002180:	ab02      	add	r3, sp, #8
 8002182:	469c      	mov	ip, r3
 8002184:	203d      	movs	r0, #61	; 0x3d
 8002186:	2203      	movs	r2, #3
 8002188:	a92a      	add	r1, sp, #168	; 0xa8
 800218a:	4460      	add	r0, ip
 800218c:	f001 f9f2 	bl	8003574 <memcpy>
    memcpy(P.data + sizeof(P.data) - sizeof(DevAddr.data) - sizeof(cryptoMacPayload), &cryptoMacPayload, sizeof(cryptoMacPayload));
 8002190:	ab02      	add	r3, sp, #8
 8002192:	469c      	mov	ip, r3
 8002194:	203b      	movs	r0, #59	; 0x3b
 8002196:	2202      	movs	r2, #2
 8002198:	a92b      	add	r1, sp, #172	; 0xac
 800219a:	4460      	add	r0, ip
 800219c:	f001 f9ea 	bl	8003574 <memcpy>
    memcpy(P.data + sizeof(P.data) - sizeof(DevAddr.data) - sizeof(cryptoMacPayload) - sizeof(Nn), &Nn, sizeof(Nn));
 80021a0:	ab02      	add	r3, sp, #8
 80021a2:	469c      	mov	ip, r3
 80021a4:	2039      	movs	r0, #57	; 0x39
 80021a6:	a92c      	add	r1, sp, #176	; 0xb0
 80021a8:	4460      	add	r0, ip
 80021aa:	2202      	movs	r2, #2
 80021ac:	f001 f9e2 	bl	8003574 <memcpy>
    P.data[0] = 0x10;
 80021b0:	2310      	movs	r3, #16
    uint128_256_t t = {0};
 80021b2:	ac1a      	add	r4, sp, #104	; 0x68
 80021b4:	0022      	movs	r2, r4
    P.data[0] = 0x10;
 80021b6:	7033      	strb	r3, [r6, #0]
    uint128_256_t t = {0};
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <getMIC16+0x160>)
 80021ba:	4699      	mov	r9, r3
 80021bc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80021be:	c223      	stmia	r2!, {r0, r1, r5}
    R = aesECB(Km, t);
 80021c0:	0021      	movs	r1, r4
    uint128_256_t t = {0};
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6013      	str	r3, [r2, #0]
    R = aesECB(Km, t);
 80021c6:	aa01      	add	r2, sp, #4
 80021c8:	4692      	mov	sl, r2
 80021ca:	c9a1      	ldmia	r1!, {r0, r5, r7}
 80021cc:	c2a1      	stmia	r2!, {r0, r5, r7}
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021d2:	9908      	ldr	r1, [sp, #32]
 80021d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021d6:	9307      	str	r3, [sp, #28]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	a812      	add	r0, sp, #72	; 0x48
 80021dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021de:	f7ff ff9d 	bl	800211c <aesECB>
    uint8_t msb = (R.data[sizeof(R.data) - 1] >> 7) & 1;
 80021e2:	234f      	movs	r3, #79	; 0x4f
 80021e4:	aa02      	add	r2, sp, #8
 80021e6:	18d2      	adds	r2, r2, r3
 80021e8:	7811      	ldrb	r1, [r2, #0]
 80021ea:	2531      	movs	r5, #49	; 0x31
 80021ec:	09ca      	lsrs	r2, r1, #7
 80021ee:	4694      	mov	ip, r2
        R.data[i] = R.data[i] << 1;
 80021f0:	0049      	lsls	r1, r1, #1
 80021f2:	aa02      	add	r2, sp, #8
 80021f4:	18d3      	adds	r3, r2, r3
 80021f6:	4690      	mov	r8, r2
 80021f8:	b2c8      	uxtb	r0, r1
 80021fa:	af12      	add	r7, sp, #72	; 0x48
 80021fc:	7018      	strb	r0, [r3, #0]
 80021fe:	003b      	movs	r3, r7
 8002200:	4445      	add	r5, r8
            R.data[i] |= (R.data[i - 1] >> 7) & 1;
 8002202:	7b9a      	ldrb	r2, [r3, #14]
 8002204:	3b01      	subs	r3, #1
 8002206:	09d1      	lsrs	r1, r2, #7
        R.data[i] = R.data[i] << 1;
 8002208:	0052      	lsls	r2, r2, #1
            R.data[i] |= (R.data[i - 1] >> 7) & 1;
 800220a:	4301      	orrs	r1, r0
        R.data[i] = R.data[i] << 1;
 800220c:	b2d0      	uxtb	r0, r2
            R.data[i] |= (R.data[i - 1] >> 7) & 1;
 800220e:	7419      	strb	r1, [r3, #16]
        R.data[i] = R.data[i] << 1;
 8002210:	73d8      	strb	r0, [r3, #15]
        if (i != 0)
 8002212:	42ab      	cmp	r3, r5
 8002214:	d1f5      	bne.n	8002202 <getMIC16+0xa6>
    if (msb) {
 8002216:	4663      	mov	r3, ip
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01a      	beq.n	8002252 <getMIC16+0xf6>
        uint128_256_t B = {0};
 800221c:	464f      	mov	r7, r9
 800221e:	ab1e      	add	r3, sp, #120	; 0x78
 8002220:	4698      	mov	r8, r3
 8002222:	cf07      	ldmia	r7!, {r0, r1, r2}
 8002224:	c307      	stmia	r3!, {r0, r1, r2}
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	214f      	movs	r1, #79	; 0x4f
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	aa02      	add	r2, sp, #8
 800222e:	4694      	mov	ip, r2
 8002230:	206f      	movs	r0, #111	; 0x6f
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	2301      	movs	r3, #1
 8002236:	2787      	movs	r7, #135	; 0x87
 8002238:	4461      	add	r1, ip
 800223a:	4462      	add	r2, ip
 800223c:	4460      	add	r0, ip
 800223e:	e000      	b.n	8002242 <getMIC16+0xe6>
 8002240:	5cc7      	ldrb	r7, [r0, r3]
            K1.data[i] = R.data[i] ^ B.data[i];
 8002242:	5cd5      	ldrb	r5, [r2, r3]
 8002244:	406f      	eors	r7, r5
 8002246:	54cf      	strb	r7, [r1, r3]
        for (unsigned int i = 0; i < sizeof(K1.data); i++) {
 8002248:	3301      	adds	r3, #1
 800224a:	2b11      	cmp	r3, #17
 800224c:	d1f8      	bne.n	8002240 <getMIC16+0xe4>
 800224e:	a816      	add	r0, sp, #88	; 0x58
 8002250:	e00a      	b.n	8002268 <getMIC16+0x10c>
 8002252:	a816      	add	r0, sp, #88	; 0x58
 8002254:	0003      	movs	r3, r0
 8002256:	0001      	movs	r1, r0
            K1.data[i] = R.data[i];
 8002258:	783a      	ldrb	r2, [r7, #0]
 800225a:	3701      	adds	r7, #1
 800225c:	701a      	strb	r2, [r3, #0]
        for (unsigned int i = 0; i < sizeof(K1.data); i++) {
 800225e:	3301      	adds	r3, #1
 8002260:	428f      	cmp	r7, r1
 8002262:	d1f9      	bne.n	8002258 <getMIC16+0xfc>
 8002264:	ab1e      	add	r3, sp, #120	; 0x78
 8002266:	4698      	mov	r8, r3
 8002268:	0003      	movs	r3, r0
        uint128_256_t B = {0};
 800226a:	2210      	movs	r2, #16
 800226c:	e000      	b.n	8002270 <getMIC16+0x114>
 800226e:	7832      	ldrb	r2, [r6, #0]
        K1.data[i] ^= P.data[i];
 8002270:	7819      	ldrb	r1, [r3, #0]
 8002272:	3601      	adds	r6, #1
 8002274:	404a      	eors	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < sizeof(P.data); i++) {
 8002278:	3301      	adds	r3, #1
 800227a:	429c      	cmp	r4, r3
 800227c:	d1f7      	bne.n	800226e <getMIC16+0x112>
    tmp = aesECB(Km, K1);
 800227e:	4653      	mov	r3, sl
 8002280:	c816      	ldmia	r0!, {r1, r2, r4}
 8002282:	c316      	stmia	r3!, {r1, r2, r4}
 8002284:	6802      	ldr	r2, [r0, #0]
 8002286:	4640      	mov	r0, r8
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800228c:	9908      	ldr	r1, [sp, #32]
 800228e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002290:	9307      	str	r3, [sp, #28]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002296:	f7ff ff41 	bl	800211c <aesECB>
        ret.data[i] = tmp.data[sizeof(tmp.data) - sizeof(ret.data) + i];
 800229a:	4643      	mov	r3, r8
    return ret;
 800229c:	4640      	mov	r0, r8
        ret.data[i] = tmp.data[sizeof(tmp.data) - sizeof(ret.data) + i];
 800229e:	7b99      	ldrb	r1, [r3, #14]
    return ret;
 80022a0:	7b40      	ldrb	r0, [r0, #13]
        ret.data[i] = tmp.data[sizeof(tmp.data) - sizeof(ret.data) + i];
 80022a2:	7bda      	ldrb	r2, [r3, #15]
    return ret;
 80022a4:	ab0c      	add	r3, sp, #48	; 0x30
 80022a6:	7018      	strb	r0, [r3, #0]
 80022a8:	7059      	strb	r1, [r3, #1]
 80022aa:	709a      	strb	r2, [r3, #2]
 80022ac:	980c      	ldr	r0, [sp, #48]	; 0x30
}
 80022ae:	b022      	add	sp, #136	; 0x88
 80022b0:	bce0      	pop	{r5, r6, r7}
 80022b2:	46ba      	mov	sl, r7
 80022b4:	46b1      	mov	r9, r6
 80022b6:	46a8      	mov	r8, r5
 80022b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	080035f0 	.word	0x080035f0

080022c0 <getMIC48>:
uint24a_t getMIC48(uint128_256_t Km, uint24a_t DevAddr, uint48a_t cryptoMacPayload, uint16_t Nn) {
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	46d6      	mov	lr, sl
 80022c4:	464f      	mov	r7, r9
 80022c6:	4646      	mov	r6, r8
 80022c8:	b5c0      	push	{r6, r7, lr}
 80022ca:	b0a2      	sub	sp, #136	; 0x88
 80022cc:	930b      	str	r3, [sp, #44]	; 0x2c
    uint24a_t ret = { 0 };
 80022ce:	2300      	movs	r3, #0
 80022d0:	930c      	str	r3, [sp, #48]	; 0x30
    memset(P.data, 0, sizeof(P.data));
 80022d2:	ab0e      	add	r3, sp, #56	; 0x38
 80022d4:	469a      	mov	sl, r3
 80022d6:	ab02      	add	r3, sp, #8
 80022d8:	469c      	mov	ip, r3
 80022da:	2731      	movs	r7, #49	; 0x31
 80022dc:	4467      	add	r7, ip
uint24a_t getMIC48(uint128_256_t Km, uint24a_t DevAddr, uint48a_t cryptoMacPayload, uint16_t Nn) {
 80022de:	9008      	str	r0, [sp, #32]
 80022e0:	9109      	str	r1, [sp, #36]	; 0x24
 80022e2:	920a      	str	r2, [sp, #40]	; 0x28
    memset(P.data, 0, sizeof(P.data));
 80022e4:	2100      	movs	r1, #0
 80022e6:	2204      	movs	r2, #4
 80022e8:	0038      	movs	r0, r7
 80022ea:	f001 f94c 	bl	8003586 <memset>
    memcpy(P.data + sizeof(P.data) - sizeof(DevAddr.data), DevAddr.data, sizeof(DevAddr.data));
 80022ee:	ab02      	add	r3, sp, #8
 80022f0:	469c      	mov	ip, r3
 80022f2:	203d      	movs	r0, #61	; 0x3d
 80022f4:	2203      	movs	r2, #3
 80022f6:	a92a      	add	r1, sp, #168	; 0xa8
 80022f8:	4460      	add	r0, ip
 80022fa:	f001 f93b 	bl	8003574 <memcpy>
    memcpy(P.data + sizeof(P.data) - sizeof(DevAddr.data) - sizeof(cryptoMacPayload.data), cryptoMacPayload.data, sizeof(cryptoMacPayload).data);
 80022fe:	ab02      	add	r3, sp, #8
 8002300:	469c      	mov	ip, r3
 8002302:	2037      	movs	r0, #55	; 0x37
 8002304:	2206      	movs	r2, #6
 8002306:	a92c      	add	r1, sp, #176	; 0xb0
 8002308:	4460      	add	r0, ip
 800230a:	f001 f933 	bl	8003574 <memcpy>
    memcpy(P.data + sizeof(P.data) - sizeof(DevAddr.data) - sizeof(cryptoMacPayload.data) - sizeof(Nn), &Nn, sizeof(Nn));
 800230e:	ab02      	add	r3, sp, #8
 8002310:	469c      	mov	ip, r3
 8002312:	2035      	movs	r0, #53	; 0x35
 8002314:	a92e      	add	r1, sp, #184	; 0xb8
 8002316:	4460      	add	r0, ip
 8002318:	2202      	movs	r2, #2
 800231a:	f001 f92b 	bl	8003574 <memcpy>
    P.data[0] = 0x30;
 800231e:	2330      	movs	r3, #48	; 0x30
 8002320:	4652      	mov	r2, sl
    uint128_256_t t = {0};
 8002322:	ac1a      	add	r4, sp, #104	; 0x68
    P.data[0] = 0x30;
 8002324:	7013      	strb	r3, [r2, #0]
    uint128_256_t t = {0};
 8002326:	0022      	movs	r2, r4
 8002328:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <getMIC48+0x160>)
 800232a:	4698      	mov	r8, r3
 800232c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800232e:	c223      	stmia	r2!, {r0, r1, r5}
    R = aesECB(Km, t);
 8002330:	0021      	movs	r1, r4
    uint128_256_t t = {0};
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6013      	str	r3, [r2, #0]
    R = aesECB(Km, t);
 8002336:	aa01      	add	r2, sp, #4
 8002338:	4691      	mov	r9, r2
 800233a:	c961      	ldmia	r1!, {r0, r5, r6}
 800233c:	c261      	stmia	r2!, {r0, r5, r6}
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002342:	9908      	ldr	r1, [sp, #32]
 8002344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002346:	9307      	str	r3, [sp, #28]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	a812      	add	r0, sp, #72	; 0x48
 800234c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800234e:	f7ff fee5 	bl	800211c <aesECB>
    uint8_t msb = (R.data[sizeof(R.data) - 1] >> 7) & 1;
 8002352:	234f      	movs	r3, #79	; 0x4f
 8002354:	aa02      	add	r2, sp, #8
 8002356:	18d2      	adds	r2, r2, r3
 8002358:	7811      	ldrb	r1, [r2, #0]
 800235a:	ad12      	add	r5, sp, #72	; 0x48
 800235c:	09ca      	lsrs	r2, r1, #7
 800235e:	4694      	mov	ip, r2
        R.data[i] = R.data[i] << 1;
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	aa02      	add	r2, sp, #8
 8002364:	18d3      	adds	r3, r2, r3
 8002366:	b2c8      	uxtb	r0, r1
 8002368:	7018      	strb	r0, [r3, #0]
 800236a:	002b      	movs	r3, r5
            R.data[i] |= (R.data[i - 1] >> 7) & 1;
 800236c:	7b9a      	ldrb	r2, [r3, #14]
 800236e:	3b01      	subs	r3, #1
 8002370:	09d1      	lsrs	r1, r2, #7
        R.data[i] = R.data[i] << 1;
 8002372:	0052      	lsls	r2, r2, #1
            R.data[i] |= (R.data[i - 1] >> 7) & 1;
 8002374:	4301      	orrs	r1, r0
        R.data[i] = R.data[i] << 1;
 8002376:	b2d0      	uxtb	r0, r2
            R.data[i] |= (R.data[i - 1] >> 7) & 1;
 8002378:	7419      	strb	r1, [r3, #16]
        R.data[i] = R.data[i] << 1;
 800237a:	73d8      	strb	r0, [r3, #15]
        if (i != 0)
 800237c:	429f      	cmp	r7, r3
 800237e:	d1f5      	bne.n	800236c <getMIC48+0xac>
    if (msb) {
 8002380:	4663      	mov	r3, ip
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01a      	beq.n	80023bc <getMIC48+0xfc>
        uint128_256_t B = {0};
 8002386:	af1e      	add	r7, sp, #120	; 0x78
 8002388:	003b      	movs	r3, r7
 800238a:	4642      	mov	r2, r8
 800238c:	ca23      	ldmia	r2!, {r0, r1, r5}
 800238e:	c323      	stmia	r3!, {r0, r1, r5}
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	214f      	movs	r1, #79	; 0x4f
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	aa02      	add	r2, sp, #8
 8002398:	4694      	mov	ip, r2
 800239a:	206f      	movs	r0, #111	; 0x6f
 800239c:	223f      	movs	r2, #63	; 0x3f
 800239e:	2301      	movs	r3, #1
 80023a0:	2587      	movs	r5, #135	; 0x87
 80023a2:	4461      	add	r1, ip
 80023a4:	4462      	add	r2, ip
 80023a6:	4460      	add	r0, ip
 80023a8:	e000      	b.n	80023ac <getMIC48+0xec>
 80023aa:	5cc5      	ldrb	r5, [r0, r3]
            K1.data[i] = R.data[i] ^ B.data[i];
 80023ac:	5cd6      	ldrb	r6, [r2, r3]
 80023ae:	4075      	eors	r5, r6
 80023b0:	54cd      	strb	r5, [r1, r3]
        for (unsigned int i = 0; i < sizeof(K1.data); i++) {
 80023b2:	3301      	adds	r3, #1
 80023b4:	2b11      	cmp	r3, #17
 80023b6:	d1f8      	bne.n	80023aa <getMIC48+0xea>
 80023b8:	a816      	add	r0, sp, #88	; 0x58
 80023ba:	e009      	b.n	80023d0 <getMIC48+0x110>
 80023bc:	a816      	add	r0, sp, #88	; 0x58
 80023be:	0003      	movs	r3, r0
 80023c0:	0001      	movs	r1, r0
            K1.data[i] = R.data[i];
 80023c2:	782a      	ldrb	r2, [r5, #0]
 80023c4:	3501      	adds	r5, #1
 80023c6:	701a      	strb	r2, [r3, #0]
        for (unsigned int i = 0; i < sizeof(K1.data); i++) {
 80023c8:	3301      	adds	r3, #1
 80023ca:	428d      	cmp	r5, r1
 80023cc:	d1f9      	bne.n	80023c2 <getMIC48+0x102>
 80023ce:	af1e      	add	r7, sp, #120	; 0x78
 80023d0:	0003      	movs	r3, r0
 80023d2:	4656      	mov	r6, sl
        uint128_256_t B = {0};
 80023d4:	2230      	movs	r2, #48	; 0x30
 80023d6:	e000      	b.n	80023da <getMIC48+0x11a>
 80023d8:	7832      	ldrb	r2, [r6, #0]
        K1.data[i] ^= P.data[i];
 80023da:	7819      	ldrb	r1, [r3, #0]
 80023dc:	3601      	adds	r6, #1
 80023de:	404a      	eors	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < sizeof(P.data); i++) {
 80023e2:	3301      	adds	r3, #1
 80023e4:	429c      	cmp	r4, r3
 80023e6:	d1f7      	bne.n	80023d8 <getMIC48+0x118>
    tmp = aesECB(Km, K1);
 80023e8:	464b      	mov	r3, r9
 80023ea:	c816      	ldmia	r0!, {r1, r2, r4}
 80023ec:	c316      	stmia	r3!, {r1, r2, r4}
 80023ee:	6802      	ldr	r2, [r0, #0]
 80023f0:	0038      	movs	r0, r7
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80023f6:	9908      	ldr	r1, [sp, #32]
 80023f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023fa:	9307      	str	r3, [sp, #28]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002400:	f7ff fe8c 	bl	800211c <aesECB>
    return ret;
 8002404:	7b78      	ldrb	r0, [r7, #13]
        ret.data[i] = tmp.data[sizeof(tmp.data) - sizeof(ret.data) + i];
 8002406:	7bb9      	ldrb	r1, [r7, #14]
 8002408:	7bfa      	ldrb	r2, [r7, #15]
    return ret;
 800240a:	ab0c      	add	r3, sp, #48	; 0x30
 800240c:	7018      	strb	r0, [r3, #0]
 800240e:	7059      	strb	r1, [r3, #1]
 8002410:	709a      	strb	r2, [r3, #2]
 8002412:	980c      	ldr	r0, [sp, #48]	; 0x30
}
 8002414:	b022      	add	sp, #136	; 0x88
 8002416:	bce0      	pop	{r5, r6, r7}
 8002418:	46ba      	mov	sl, r7
 800241a:	46b1      	mov	r9, r6
 800241c:	46a8      	mov	r8, r5
 800241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002420:	080035f0 	.word	0x080035f0

08002424 <encECB>:
    return ret;
}



uint128_256_t encECB(uint128_256_t key, uint128_256_t data) {
 8002424:	b084      	sub	sp, #16
 8002426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002428:	b08b      	sub	sp, #44	; 0x2c
 800242a:	0005      	movs	r5, r0
    uint128_256_t ret;

    ret = aesECB(key, data);//aes128Enc(Ka, tmp);
 800242c:	a801      	add	r0, sp, #4
uint128_256_t encECB(uint128_256_t key, uint128_256_t data) {
 800242e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002430:	001e      	movs	r6, r3
    ret = aesECB(key, data);//aes128Enc(Ka, tmp);
 8002432:	0003      	movs	r3, r0
uint128_256_t encECB(uint128_256_t key, uint128_256_t data) {
 8002434:	468c      	mov	ip, r1
 8002436:	0017      	movs	r7, r2
 8002438:	9111      	str	r1, [sp, #68]	; 0x44
 800243a:	9212      	str	r2, [sp, #72]	; 0x48
    ret = aesECB(key, data);//aes128Enc(Ka, tmp);
 800243c:	ac15      	add	r4, sp, #84	; 0x54
 800243e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002440:	c307      	stmia	r3!, {r0, r1, r2}
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	4661      	mov	r1, ip
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800244a:	003a      	movs	r2, r7
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	a806      	add	r0, sp, #24
 8002450:	0033      	movs	r3, r6
 8002452:	f7ff fe63 	bl	800211c <aesECB>

    return ret;
 8002456:	2210      	movs	r2, #16
 8002458:	0028      	movs	r0, r5
 800245a:	a906      	add	r1, sp, #24
 800245c:	f001 f88a 	bl	8003574 <memcpy>
}
 8002460:	0028      	movs	r0, r5
 8002462:	b00b      	add	sp, #44	; 0x2c
 8002464:	bcf0      	pop	{r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	b004      	add	sp, #16
 800246a:	4718      	bx	r3

0800246c <getDevAddr>:
uint24a_t getDevAddr(uint128_256_t Ka, uint24a_t Ne) {
 800246c:	b510      	push	{r4, lr}
 800246e:	b096      	sub	sp, #88	; 0x58
    memset(tmp.data, 0, sizeof(tmp.data));
 8002470:	ac0e      	add	r4, sp, #56	; 0x38
uint24a_t getDevAddr(uint128_256_t Ka, uint24a_t Ne) {
 8002472:	9008      	str	r0, [sp, #32]
 8002474:	9109      	str	r1, [sp, #36]	; 0x24
 8002476:	920a      	str	r2, [sp, #40]	; 0x28
    memset(tmp.data, 0, sizeof(tmp.data));
 8002478:	2100      	movs	r1, #0
 800247a:	220b      	movs	r2, #11
 800247c:	0020      	movs	r0, r4
uint24a_t getDevAddr(uint128_256_t Ka, uint24a_t Ne) {
 800247e:	930b      	str	r3, [sp, #44]	; 0x2c
    memset(tmp.data, 0, sizeof(tmp.data));
 8002480:	f001 f881 	bl	8003586 <memset>
    tmp.data[sizeof(tmp.data) - 1] = 0x01;
 8002484:	2301      	movs	r3, #1
 8002486:	73e3      	strb	r3, [r4, #15]
    memcpy(tmp.data + sizeof(tmp.data) - sizeof(Ne) - 1, &Ne, sizeof(Ne));
 8002488:	ab02      	add	r3, sp, #8
 800248a:	469c      	mov	ip, r3
 800248c:	203b      	movs	r0, #59	; 0x3b
 800248e:	a918      	add	r1, sp, #96	; 0x60
 8002490:	2204      	movs	r2, #4
 8002492:	4460      	add	r0, ip
 8002494:	f001 f86e 	bl	8003574 <memcpy>
    tmpRet = encECB(Ka, tmp);
 8002498:	ab01      	add	r3, sp, #4
 800249a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800249c:	c307      	stmia	r3!, {r0, r1, r2}
 800249e:	001a      	movs	r2, r3
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	a812      	add	r0, sp, #72	; 0x48
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024a8:	9908      	ldr	r1, [sp, #32]
 80024aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024ac:	9307      	str	r3, [sp, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024b2:	f7ff ffb7 	bl	8002424 <encECB>
    memcpy(ret.data, tmpRet.data + sizeof(tmpRet.data) - sizeof(ret.data), sizeof(ret.data));
 80024b6:	ab02      	add	r3, sp, #8
 80024b8:	469c      	mov	ip, r3
 80024ba:	214d      	movs	r1, #77	; 0x4d
 80024bc:	2203      	movs	r2, #3
 80024be:	4461      	add	r1, ip
 80024c0:	a80c      	add	r0, sp, #48	; 0x30
 80024c2:	f001 f857 	bl	8003574 <memcpy>
}
 80024c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80024c8:	b016      	add	sp, #88	; 0x58
 80024ca:	bd10      	pop	{r4, pc}

080024cc <encCTR>:

uint128_256_t encCTR(uint128_256_t key, iv_t iv, uint128_256_t data) {
 80024cc:	b084      	sub	sp, #16
 80024ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d0:	46ce      	mov	lr, r9
 80024d2:	4647      	mov	r7, r8
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b099      	sub	sp, #100	; 0x64
 80024d8:	ad0c      	add	r5, sp, #48	; 0x30
 80024da:	9323      	str	r3, [sp, #140]	; 0x8c
 80024dc:	002b      	movs	r3, r5
 80024de:	9121      	str	r1, [sp, #132]	; 0x84
 80024e0:	9222      	str	r2, [sp, #136]	; 0x88
 80024e2:	ac21      	add	r4, sp, #132	; 0x84
 80024e4:	0006      	movs	r6, r0
 80024e6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80024e8:	c307      	stmia	r3!, {r0, r1, r2}
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	ab10      	add	r3, sp, #64	; 0x40
 80024f0:	0019      	movs	r1, r3
 80024f2:	4694      	mov	ip, r2
 80024f4:	aa25      	add	r2, sp, #148	; 0x94
 80024f6:	4698      	mov	r8, r3
 80024f8:	ca98      	ldmia	r2!, {r3, r4, r7}
 80024fa:	c198      	stmia	r1!, {r3, r4, r7}
 80024fc:	ab14      	add	r3, sp, #80	; 0x50
 80024fe:	4699      	mov	r9, r3
 8002500:	001f      	movs	r7, r3
 8002502:	6814      	ldr	r4, [r2, #0]
 8002504:	aa29      	add	r2, sp, #164	; 0xa4
 8002506:	600c      	str	r4, [r1, #0]
 8002508:	ca0b      	ldmia	r2!, {r0, r1, r3}
 800250a:	c70b      	stmia	r7!, {r0, r1, r3}
    return aesCTR_a(key, iv, data.data, sizeof (data.data));
 800250c:	464b      	mov	r3, r9
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	603a      	str	r2, [r7, #0]
 8002512:	2210      	movs	r2, #16
 8002514:	9305      	str	r3, [sp, #20]
 8002516:	4643      	mov	r3, r8
 8002518:	9206      	str	r2, [sp, #24]
 800251a:	aa01      	add	r2, sp, #4
 800251c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800251e:	c283      	stmia	r2!, {r0, r1, r7}
 8002520:	4663      	mov	r3, ip
 8002522:	6014      	str	r4, [r2, #0]
 8002524:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	a808      	add	r0, sp, #32
 800252c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800252e:	f7ff fdd3 	bl	80020d8 <aesCTR_a>
    uint128_256_t ret;

    ret = aesCTR(key, iv, data);


    return ret;
 8002532:	2210      	movs	r2, #16
 8002534:	0030      	movs	r0, r6
 8002536:	a908      	add	r1, sp, #32
 8002538:	f001 f81c 	bl	8003574 <memcpy>
}
 800253c:	0030      	movs	r0, r6
 800253e:	b019      	add	sp, #100	; 0x64
 8002540:	bcc0      	pop	{r6, r7}
 8002542:	46b9      	mov	r9, r7
 8002544:	46b0      	mov	r8, r6
 8002546:	bcf0      	pop	{r4, r5, r6, r7}
 8002548:	bc08      	pop	{r3}
 800254a:	b004      	add	sp, #16
 800254c:	4718      	bx	r3
 800254e:	46c0      	nop			; (mov r8, r8)

08002550 <getKa>:
uint128_256_t getKa(uint128_256_t K0, uint16_t Na) {
 8002550:	b084      	sub	sp, #16
 8002552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002554:	46de      	mov	lr, fp
 8002556:	4657      	mov	r7, sl
 8002558:	464e      	mov	r6, r9
 800255a:	4645      	mov	r5, r8
 800255c:	b5e0      	push	{r5, r6, r7, lr}
 800255e:	b097      	sub	sp, #92	; 0x5c
 8002560:	9323      	str	r3, [sp, #140]	; 0x8c
 8002562:	469b      	mov	fp, r3
    iv_t iv = {0};
 8002564:	4e1e      	ldr	r6, [pc, #120]	; (80025e0 <getKa+0x90>)
uint128_256_t getKa(uint128_256_t K0, uint16_t Na) {
 8002566:	ab25      	add	r3, sp, #148	; 0x94
 8002568:	881b      	ldrh	r3, [r3, #0]
    iv_t iv = {0};
 800256a:	ac0e      	add	r4, sp, #56	; 0x38
 800256c:	0035      	movs	r5, r6
uint128_256_t getKa(uint128_256_t K0, uint16_t Na) {
 800256e:	9222      	str	r2, [sp, #136]	; 0x88
 8002570:	4694      	mov	ip, r2
 8002572:	469a      	mov	sl, r3
    iv_t iv = {0};
 8002574:	0022      	movs	r2, r4
uint128_256_t getKa(uint128_256_t K0, uint16_t Na) {
 8002576:	9121      	str	r1, [sp, #132]	; 0x84
    iv_t iv = {0};
 8002578:	3510      	adds	r5, #16
uint128_256_t getKa(uint128_256_t K0, uint16_t Na) {
 800257a:	0007      	movs	r7, r0
 800257c:	4688      	mov	r8, r1
    iv_t iv = {0};
 800257e:	cd0b      	ldmia	r5!, {r0, r1, r3}
 8002580:	c20b      	stmia	r2!, {r0, r1, r3}
    memcpy((char*)&iv + sizeof(iv.data) - sizeof(Na), &Na, sizeof(Na));
 8002582:	4653      	mov	r3, sl
    iv_t iv = {0};
 8002584:	6829      	ldr	r1, [r5, #0]
    uint128_256_t t = {0};
 8002586:	ad12      	add	r5, sp, #72	; 0x48
    iv_t iv = {0};
 8002588:	6011      	str	r1, [r2, #0]
    memcpy((char*)&iv + sizeof(iv.data) - sizeof(Na), &Na, sizeof(Na));
 800258a:	81e3      	strh	r3, [r4, #14]
    uint128_256_t t = {0};
 800258c:	002b      	movs	r3, r5
    iv_t iv = {0};
 800258e:	4691      	mov	r9, r2
    uint128_256_t t = {0};
 8002590:	ce07      	ldmia	r6!, {r0, r1, r2}
 8002592:	c307      	stmia	r3!, {r0, r1, r2}
 8002594:	6831      	ldr	r1, [r6, #0]
 8002596:	6019      	str	r1, [r3, #0]
    ret = encCTR(K0, iv, t);
 8002598:	ab05      	add	r3, sp, #20
 800259a:	cd45      	ldmia	r5!, {r0, r2, r6}
 800259c:	c345      	stmia	r3!, {r0, r2, r6}
 800259e:	6019      	str	r1, [r3, #0]
 80025a0:	ab01      	add	r3, sp, #4
 80025a2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80025a4:	c307      	stmia	r3!, {r0, r1, r2}
 80025a6:	0019      	movs	r1, r3
 80025a8:	464b      	mov	r3, r9
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4662      	mov	r2, ip
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80025b2:	4641      	mov	r1, r8
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	a80a      	add	r0, sp, #40	; 0x28
 80025b8:	465b      	mov	r3, fp
 80025ba:	f7ff ff87 	bl	80024cc <encCTR>
    return ret;
 80025be:	2210      	movs	r2, #16
 80025c0:	0038      	movs	r0, r7
 80025c2:	a90a      	add	r1, sp, #40	; 0x28
 80025c4:	f000 ffd6 	bl	8003574 <memcpy>
}
 80025c8:	0038      	movs	r0, r7
 80025ca:	b017      	add	sp, #92	; 0x5c
 80025cc:	bcf0      	pop	{r4, r5, r6, r7}
 80025ce:	46bb      	mov	fp, r7
 80025d0:	46b2      	mov	sl, r6
 80025d2:	46a9      	mov	r9, r5
 80025d4:	46a0      	mov	r8, r4
 80025d6:	bcf0      	pop	{r4, r5, r6, r7}
 80025d8:	bc08      	pop	{r3}
 80025da:	b004      	add	sp, #16
 80025dc:	4718      	bx	r3
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	080035f0 	.word	0x080035f0

080025e4 <initEncrypter>:
void initEncrypter(struct encryptData* enc_data) {
 80025e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	enc_data->Ka = getKa(enc_data->K0, enc_data->Na);
 80025e6:	0001      	movs	r1, r0
 80025e8:	8ac3      	ldrh	r3, [r0, #22]
void initEncrypter(struct encryptData* enc_data) {
 80025ea:	0004      	movs	r4, r0
 80025ec:	b087      	sub	sp, #28
	enc_data->Ka = getKa(enc_data->K0, enc_data->Na);
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	7983      	ldrb	r3, [r0, #6]
 80025f2:	7947      	ldrb	r7, [r0, #5]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	433b      	orrs	r3, r7
 80025f8:	79c7      	ldrb	r7, [r0, #7]
 80025fa:	7a46      	ldrb	r6, [r0, #9]
 80025fc:	043f      	lsls	r7, r7, #16
 80025fe:	433b      	orrs	r3, r7
 8002600:	7a07      	ldrb	r7, [r0, #8]
 8002602:	7b45      	ldrb	r5, [r0, #13]
 8002604:	063f      	lsls	r7, r7, #24
 8002606:	431f      	orrs	r7, r3
 8002608:	7a83      	ldrb	r3, [r0, #10]
 800260a:	2204      	movs	r2, #4
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	4333      	orrs	r3, r6
 8002610:	7ac6      	ldrb	r6, [r0, #11]
 8002612:	3111      	adds	r1, #17
 8002614:	0436      	lsls	r6, r6, #16
 8002616:	4333      	orrs	r3, r6
 8002618:	7b06      	ldrb	r6, [r0, #12]
 800261a:	0636      	lsls	r6, r6, #24
 800261c:	431e      	orrs	r6, r3
 800261e:	7b83      	ldrb	r3, [r0, #14]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	432b      	orrs	r3, r5
 8002624:	7bc5      	ldrb	r5, [r0, #15]
 8002626:	042d      	lsls	r5, r5, #16
 8002628:	432b      	orrs	r3, r5
 800262a:	7c05      	ldrb	r5, [r0, #16]
 800262c:	4668      	mov	r0, sp
 800262e:	062d      	lsls	r5, r5, #24
 8002630:	431d      	orrs	r5, r3
 8002632:	f000 ff9f 	bl	8003574 <memcpy>
 8002636:	0039      	movs	r1, r7
 8002638:	0032      	movs	r2, r6
 800263a:	002b      	movs	r3, r5
 800263c:	a802      	add	r0, sp, #8
 800263e:	f7ff ff87 	bl	8002550 <getKa>
 8002642:	0020      	movs	r0, r4
 8002644:	2210      	movs	r2, #16
 8002646:	a902      	add	r1, sp, #8
 8002648:	301c      	adds	r0, #28
 800264a:	f000 ff93 	bl	8003574 <memcpy>
}
 800264e:	b007      	add	sp, #28
 8002650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)

08002654 <getKm>:
uint128_256_t getKm(uint128_256_t Ka, uint24a_t Ne) {
 8002654:	b084      	sub	sp, #16
 8002656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002658:	46c6      	mov	lr, r8
 800265a:	b500      	push	{lr}
    iv_t iv = {0};
 800265c:	4d20      	ldr	r5, [pc, #128]	; (80026e0 <getKm+0x8c>)
uint128_256_t getKm(uint128_256_t Ka, uint24a_t Ne) {
 800265e:	b098      	sub	sp, #96	; 0x60
 8002660:	9321      	str	r3, [sp, #132]	; 0x84
    iv_t iv = {0};
 8002662:	ac10      	add	r4, sp, #64	; 0x40
 8002664:	002b      	movs	r3, r5
 8002666:	0027      	movs	r7, r4
uint128_256_t getKm(uint128_256_t Ka, uint24a_t Ne) {
 8002668:	911f      	str	r1, [sp, #124]	; 0x7c
 800266a:	9220      	str	r2, [sp, #128]	; 0x80
    iv_t iv = {0};
 800266c:	3310      	adds	r3, #16
uint128_256_t getKm(uint128_256_t Ka, uint24a_t Ne) {
 800266e:	0006      	movs	r6, r0
    iv_t iv = {0};
 8002670:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002672:	c707      	stmia	r7!, {r0, r1, r2}
 8002674:	681b      	ldr	r3, [r3, #0]
    memcpy(iv.data + sizeof(iv.data) - sizeof(Ne) - 1, &Ne, sizeof(Ne));
 8002676:	2043      	movs	r0, #67	; 0x43
    iv_t iv = {0};
 8002678:	603b      	str	r3, [r7, #0]
    iv.data[sizeof(iv) - 1] = 0x02;
 800267a:	2302      	movs	r3, #2
 800267c:	73e3      	strb	r3, [r4, #15]
    memcpy(iv.data + sizeof(iv.data) - sizeof(Ne) - 1, &Ne, sizeof(Ne));
 800267e:	ab02      	add	r3, sp, #8
 8002680:	469c      	mov	ip, r3
 8002682:	a923      	add	r1, sp, #140	; 0x8c
 8002684:	2204      	movs	r2, #4
 8002686:	4460      	add	r0, ip
 8002688:	f000 ff74 	bl	8003574 <memcpy>
    uint128_256_t t = {0};
 800268c:	ab14      	add	r3, sp, #80	; 0x50
 800268e:	001a      	movs	r2, r3
 8002690:	469c      	mov	ip, r3
 8002692:	cd0b      	ldmia	r5!, {r0, r1, r3}
 8002694:	c20b      	stmia	r2!, {r0, r1, r3}
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4698      	mov	r8, r3
    ret = encCTR(Ka, iv, t);
 800269c:	4663      	mov	r3, ip
 800269e:	aa05      	add	r2, sp, #20
 80026a0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80026a2:	c223      	stmia	r2!, {r0, r1, r5}
 80026a4:	4643      	mov	r3, r8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	ab01      	add	r3, sp, #4
 80026aa:	cc07      	ldmia	r4!, {r0, r1, r2}
 80026ac:	c307      	stmia	r3!, {r0, r1, r2}
 80026ae:	001a      	movs	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	a80c      	add	r0, sp, #48	; 0x30
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80026b8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80026ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80026bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80026c2:	f7ff ff03 	bl	80024cc <encCTR>
    return ret;
 80026c6:	2210      	movs	r2, #16
 80026c8:	0030      	movs	r0, r6
 80026ca:	a90c      	add	r1, sp, #48	; 0x30
 80026cc:	f000 ff52 	bl	8003574 <memcpy>
}
 80026d0:	0030      	movs	r0, r6
 80026d2:	b018      	add	sp, #96	; 0x60
 80026d4:	bc80      	pop	{r7}
 80026d6:	46b8      	mov	r8, r7
 80026d8:	bcf0      	pop	{r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	b004      	add	sp, #16
 80026de:	4718      	bx	r3
 80026e0:	080035f0 	.word	0x080035f0

080026e4 <getKe>:
uint128_256_t getKe(uint128_256_t Ka, uint24a_t Ne) {
 80026e4:	b084      	sub	sp, #16
 80026e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e8:	46c6      	mov	lr, r8
 80026ea:	b500      	push	{lr}
    iv_t iv = {0};
 80026ec:	4d20      	ldr	r5, [pc, #128]	; (8002770 <getKe+0x8c>)
uint128_256_t getKe(uint128_256_t Ka, uint24a_t Ne) {
 80026ee:	b098      	sub	sp, #96	; 0x60
 80026f0:	9321      	str	r3, [sp, #132]	; 0x84
    iv_t iv = {0};
 80026f2:	ac10      	add	r4, sp, #64	; 0x40
 80026f4:	002b      	movs	r3, r5
 80026f6:	0027      	movs	r7, r4
uint128_256_t getKe(uint128_256_t Ka, uint24a_t Ne) {
 80026f8:	911f      	str	r1, [sp, #124]	; 0x7c
 80026fa:	9220      	str	r2, [sp, #128]	; 0x80
    iv_t iv = {0};
 80026fc:	3310      	adds	r3, #16
uint128_256_t getKe(uint128_256_t Ka, uint24a_t Ne) {
 80026fe:	0006      	movs	r6, r0
    iv_t iv = {0};
 8002700:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002702:	c707      	stmia	r7!, {r0, r1, r2}
 8002704:	681b      	ldr	r3, [r3, #0]
    memcpy(iv.data + sizeof(iv.data) - sizeof(Ne) - 1, &Ne, sizeof(Ne));
 8002706:	2043      	movs	r0, #67	; 0x43
    iv_t iv = {0};
 8002708:	603b      	str	r3, [r7, #0]
    iv.data[sizeof(iv) - 1] = 0x03;
 800270a:	2303      	movs	r3, #3
 800270c:	73e3      	strb	r3, [r4, #15]
    memcpy(iv.data + sizeof(iv.data) - sizeof(Ne) - 1, &Ne, sizeof(Ne));
 800270e:	ab02      	add	r3, sp, #8
 8002710:	469c      	mov	ip, r3
 8002712:	a923      	add	r1, sp, #140	; 0x8c
 8002714:	2204      	movs	r2, #4
 8002716:	4460      	add	r0, ip
 8002718:	f000 ff2c 	bl	8003574 <memcpy>
    uint128_256_t t = {0};
 800271c:	ab14      	add	r3, sp, #80	; 0x50
 800271e:	001a      	movs	r2, r3
 8002720:	469c      	mov	ip, r3
 8002722:	cd0b      	ldmia	r5!, {r0, r1, r3}
 8002724:	c20b      	stmia	r2!, {r0, r1, r3}
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4698      	mov	r8, r3
    ret = encCTR(Ka, iv, t);
 800272c:	4663      	mov	r3, ip
 800272e:	aa05      	add	r2, sp, #20
 8002730:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002732:	c223      	stmia	r2!, {r0, r1, r5}
 8002734:	4643      	mov	r3, r8
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	ab01      	add	r3, sp, #4
 800273a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800273c:	c307      	stmia	r3!, {r0, r1, r2}
 800273e:	001a      	movs	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	a80c      	add	r0, sp, #48	; 0x30
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002748:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800274a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800274c:	930b      	str	r3, [sp, #44]	; 0x2c
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002752:	f7ff febb 	bl	80024cc <encCTR>
    return ret;
 8002756:	2210      	movs	r2, #16
 8002758:	0030      	movs	r0, r6
 800275a:	a90c      	add	r1, sp, #48	; 0x30
 800275c:	f000 ff0a 	bl	8003574 <memcpy>
}
 8002760:	0030      	movs	r0, r6
 8002762:	b018      	add	sp, #96	; 0x60
 8002764:	bc80      	pop	{r7}
 8002766:	46b8      	mov	r8, r7
 8002768:	bcf0      	pop	{r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	b004      	add	sp, #16
 800276e:	4718      	bx	r3
 8002770:	080035f0 	.word	0x080035f0

08002774 <encodeActivateMsg>:
void encodeActivateMsg(struct encryptData* enc_data, uint8_t* out, time_t time) {
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	46d6      	mov	lr, sl
 8002778:	464f      	mov	r7, r9
 800277a:	4646      	mov	r6, r8
 800277c:	0004      	movs	r4, r0
 800277e:	0010      	movs	r0, r2
	enc_data->initTime = MS2S(time); // to sec
 8002780:	22fa      	movs	r2, #250	; 0xfa
void encodeActivateMsg(struct encryptData* enc_data, uint8_t* out, time_t time) {
 8002782:	b5c0      	push	{r6, r7, lr}
 8002784:	000d      	movs	r5, r1
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	0019      	movs	r1, r3
	enc_data->initTime = MS2S(time); // to sec
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	2300      	movs	r3, #0
 800278e:	f7fd fd4f 	bl	8000230 <__aeabi_ldivmod>
	enc_data->Ne.ud = 0;
 8002792:	7ee3      	ldrb	r3, [r4, #27]
	enc_data->initTime = MS2S(time); // to sec
 8002794:	65a0      	str	r0, [r4, #88]	; 0x58
 8002796:	65e1      	str	r1, [r4, #92]	; 0x5c
	enc_data->Ne.ud = 0;
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	61a3      	str	r3, [r4, #24]
	enc_data->Ke = getKe(enc_data->Ka, enc_data->Ne);
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027a0:	69e1      	ldr	r1, [r4, #28]
 80027a2:	6a22      	ldr	r2, [r4, #32]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	a804      	add	r0, sp, #16
 80027a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027aa:	f7ff ff9b 	bl	80026e4 <getKe>
 80027ae:	0020      	movs	r0, r4
 80027b0:	a904      	add	r1, sp, #16
 80027b2:	2210      	movs	r2, #16
 80027b4:	3040      	adds	r0, #64	; 0x40
 80027b6:	f000 fedd 	bl	8003574 <memcpy>
	enc_data->Km = getKm(enc_data->Ka, enc_data->Ne);
 80027ba:	69a3      	ldr	r3, [r4, #24]
 80027bc:	69e1      	ldr	r1, [r4, #28]
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027c2:	6a22      	ldr	r2, [r4, #32]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	a804      	add	r0, sp, #16
 80027c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ca:	f7ff ff43 	bl	8002654 <getKm>
 80027ce:	0020      	movs	r0, r4
 80027d0:	a904      	add	r1, sp, #16
 80027d2:	2210      	movs	r2, #16
 80027d4:	3030      	adds	r0, #48	; 0x30
 80027d6:	f000 fecd 	bl	8003574 <memcpy>
	enc_data->DevAddr = getDevAddr(enc_data->Ka, enc_data->Ne);
 80027da:	69a3      	ldr	r3, [r4, #24]
 80027dc:	6a21      	ldr	r1, [r4, #32]
 80027de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	69e0      	ldr	r0, [r4, #28]
 80027e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027e6:	f7ff fe41 	bl	800246c <getDevAddr>
	uint24a_t devAddr24 = {0};
 80027ea:	2300      	movs	r3, #0
 80027ec:	4699      	mov	r9, r3
 80027ee:	464a      	mov	r2, r9
	uint16_t payload = enc_data->Na;
 80027f0:	2726      	movs	r7, #38	; 0x26
	uint24a_t devAddr24 = {0};
 80027f2:	ab0a      	add	r3, sp, #40	; 0x28
 80027f4:	70da      	strb	r2, [r3, #3]
	uint16_t payload = enc_data->Na;
 80027f6:	8ae3      	ldrh	r3, [r4, #22]
 80027f8:	446f      	add	r7, sp
 80027fa:	803b      	strh	r3, [r7, #0]
	devAddr24.ud = crc24(enc_data->DevID, enc_data->DevID_len);
 80027fc:	7921      	ldrb	r1, [r4, #4]
	enc_data->DevAddr = getDevAddr(enc_data->Ka, enc_data->Ne);
 80027fe:	62e0      	str	r0, [r4, #44]	; 0x2c
	devAddr24.ud = crc24(enc_data->DevID, enc_data->DevID_len);
 8002800:	6820      	ldr	r0, [r4, #0]
	uint16_t payload = enc_data->Na;
 8002802:	4698      	mov	r8, r3
	devAddr24.ud = crc24(enc_data->DevID, enc_data->DevID_len);
 8002804:	f000 fb46 	bl	8002e94 <crc24>
 8002808:	0206      	lsls	r6, r0, #8
 800280a:	0a33      	lsrs	r3, r6, #8
	MIC = getMIC16(enc_data->Km, devAddr24, payload, 0);
 800280c:	001a      	movs	r2, r3
	devAddr24.ud = crc24(enc_data->DevID, enc_data->DevID_len);
 800280e:	469a      	mov	sl, r3
	MIC = getMIC16(enc_data->Km, devAddr24, payload, 0);
 8002810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002812:	3430      	adds	r4, #48	; 0x30
 8002814:	0e1b      	lsrs	r3, r3, #24
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	4313      	orrs	r3, r2
 800281a:	464a      	mov	r2, r9
 800281c:	9202      	str	r2, [sp, #8]
 800281e:	4642      	mov	r2, r8
 8002820:	930a      	str	r3, [sp, #40]	; 0x28
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	f7ff fc98 	bl	800215c <getMIC16>
	memcpy(out, devAddr24.data, sizeof(devAddr24.data));
 800282c:	4653      	mov	r3, sl
 800282e:	702b      	strb	r3, [r5, #0]
 8002830:	0c33      	lsrs	r3, r6, #16
 8002832:	0e36      	lsrs	r6, r6, #24
	memcpy(out + sizeof (devAddr24.data), &payload, sizeof (payload));
 8002834:	0039      	movs	r1, r7
	MIC = getMIC16(enc_data->Km, devAddr24, payload, 0);
 8002836:	900b      	str	r0, [sp, #44]	; 0x2c
	memcpy(out, devAddr24.data, sizeof(devAddr24.data));
 8002838:	706b      	strb	r3, [r5, #1]
	memcpy(out + sizeof (devAddr24.data), &payload, sizeof (payload));
 800283a:	2202      	movs	r2, #2
	memcpy(out, devAddr24.data, sizeof(devAddr24.data));
 800283c:	70ae      	strb	r6, [r5, #2]
	memcpy(out + sizeof (devAddr24.data), &payload, sizeof (payload));
 800283e:	1ce8      	adds	r0, r5, #3
 8002840:	f000 fe98 	bl	8003574 <memcpy>
	memcpy(out + sizeof (devAddr24.data) + sizeof (payload), MIC.data, sizeof (MIC.data));
 8002844:	2203      	movs	r2, #3
 8002846:	1d68      	adds	r0, r5, #5
 8002848:	a90b      	add	r1, sp, #44	; 0x2c
 800284a:	f000 fe93 	bl	8003574 <memcpy>
}
 800284e:	b00c      	add	sp, #48	; 0x30
 8002850:	bce0      	pop	{r5, r6, r7}
 8002852:	46ba      	mov	sl, r7
 8002854:	46b1      	mov	r9, r6
 8002856:	46a8      	mov	r8, r5
 8002858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)

0800285c <cryptoMacPayload16>:
uint16_t cryptoMacPayload16(uint16_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 800285c:	b084      	sub	sp, #16
 800285e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002860:	46d6      	mov	lr, sl
 8002862:	464f      	mov	r7, r9
 8002864:	4646      	mov	r6, r8
 8002866:	b5c0      	push	{r6, r7, lr}
    iv_t iv = {0};
 8002868:	4e20      	ldr	r6, [pc, #128]	; (80028ec <cryptoMacPayload16+0x90>)
uint16_t cryptoMacPayload16(uint16_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 800286a:	b096      	sub	sp, #88	; 0x58
    iv_t iv = {0};
 800286c:	ac0a      	add	r4, sp, #40	; 0x28
 800286e:	0035      	movs	r5, r6
uint16_t cryptoMacPayload16(uint16_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 8002870:	9220      	str	r2, [sp, #128]	; 0x80
 8002872:	4694      	mov	ip, r2
    iv_t iv = {0};
 8002874:	0022      	movs	r2, r4
uint16_t cryptoMacPayload16(uint16_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 8002876:	9321      	str	r3, [sp, #132]	; 0x84
 8002878:	911f      	str	r1, [sp, #124]	; 0x7c
 800287a:	4699      	mov	r9, r3
    iv_t iv = {0};
 800287c:	3510      	adds	r5, #16
uint16_t cryptoMacPayload16(uint16_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 800287e:	ab23      	add	r3, sp, #140	; 0x8c
 8002880:	881f      	ldrh	r7, [r3, #0]
 8002882:	4682      	mov	sl, r0
 8002884:	4688      	mov	r8, r1
    iv_t iv = {0};
 8002886:	cd0b      	ldmia	r5!, {r0, r1, r3}
 8002888:	c20b      	stmia	r2!, {r0, r1, r3}
 800288a:	6829      	ldr	r1, [r5, #0]
    uint128_256_t t = {0};
 800288c:	ad12      	add	r5, sp, #72	; 0x48
 800288e:	002b      	movs	r3, r5
    iv_t iv = {0};
 8002890:	6011      	str	r1, [r2, #0]
    memcpy((char*)&iv + sizeof(iv.data) - sizeof(Nn), &Nn, sizeof(Nn));
 8002892:	81e7      	strh	r7, [r4, #14]
    uint128_256_t t = {0};
 8002894:	ce83      	ldmia	r6!, {r0, r1, r7}
 8002896:	c383      	stmia	r3!, {r0, r1, r7}
 8002898:	6831      	ldr	r1, [r6, #0]
 800289a:	6019      	str	r1, [r3, #0]
    memcpy(t.data, &macPayload, sizeof(macPayload));
 800289c:	4653      	mov	r3, sl
 800289e:	802b      	strh	r3, [r5, #0]
    tmpRet = encCTR(Ke, iv, t);
 80028a0:	ab05      	add	r3, sp, #20
 80028a2:	cdc1      	ldmia	r5!, {r0, r6, r7}
 80028a4:	c3c1      	stmia	r3!, {r0, r6, r7}
 80028a6:	a801      	add	r0, sp, #4
 80028a8:	6019      	str	r1, [r3, #0]
 80028aa:	0003      	movs	r3, r0
 80028ac:	cc23      	ldmia	r4!, {r0, r1, r5}
 80028ae:	c323      	stmia	r3!, {r0, r1, r5}
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	4641      	mov	r1, r8
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80028b8:	4662      	mov	r2, ip
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	a80e      	add	r0, sp, #56	; 0x38
 80028be:	464b      	mov	r3, r9
 80028c0:	f7ff fe04 	bl	80024cc <encCTR>
    ret = (tmpRet.data[1] << 8) | (tmpRet.data[0]);
 80028c4:	466b      	mov	r3, sp
 80028c6:	2239      	movs	r2, #57	; 0x39
 80028c8:	2138      	movs	r1, #56	; 0x38
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	466a      	mov	r2, sp
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	1852      	adds	r2, r2, r1
 80028d2:	7810      	ldrb	r0, [r2, #0]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	4318      	orrs	r0, r3
}
 80028d8:	b016      	add	sp, #88	; 0x58
 80028da:	bce0      	pop	{r5, r6, r7}
 80028dc:	46ba      	mov	sl, r7
 80028de:	46b1      	mov	r9, r6
 80028e0:	46a8      	mov	r8, r5
 80028e2:	bcf0      	pop	{r4, r5, r6, r7}
 80028e4:	bc08      	pop	{r3}
 80028e6:	b004      	add	sp, #16
 80028e8:	4718      	bx	r3
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	080035f0 	.word	0x080035f0

080028f0 <encode16Bit>:
void encode16Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f2:	46ce      	mov	lr, r9
 80028f4:	4647      	mov	r7, r8
	uint24a_t newNe = {0};
 80028f6:	2300      	movs	r3, #0
void encode16Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 80028f8:	0015      	movs	r5, r2
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 80028fa:	22fa      	movs	r2, #250	; 0xfa
void encode16Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08d      	sub	sp, #52	; 0x34
 8002900:	0004      	movs	r4, r0
	uint24a_t newNe = {0};
 8002902:	930a      	str	r3, [sp, #40]	; 0x28
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002904:	0092      	lsls	r2, r2, #2
void encode16Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 8002906:	4688      	mov	r8, r1
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002908:	9814      	ldr	r0, [sp, #80]	; 0x50
 800290a:	9915      	ldr	r1, [sp, #84]	; 0x54
	uint24a_t newNe = {0};
 800290c:	4699      	mov	r9, r3
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 800290e:	2300      	movs	r3, #0
 8002910:	f7fd fc8e 	bl	8000230 <__aeabi_ldivmod>
 8002914:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002916:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002918:	1a80      	subs	r0, r0, r2
 800291a:	4199      	sbcs	r1, r3
 800291c:	22f0      	movs	r2, #240	; 0xf0
 800291e:	2300      	movs	r3, #0
 8002920:	0006      	movs	r6, r0
 8002922:	000f      	movs	r7, r1
 8002924:	f7fd fc84 	bl	8000230 <__aeabi_ldivmod>
	if (newNe.ud != enc_data->Ne.ud) {
 8002928:	69a3      	ldr	r3, [r4, #24]
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 800292a:	0200      	lsls	r0, r0, #8
	if (newNe.ud != enc_data->Ne.ud) {
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	0a02      	lsrs	r2, r0, #8
 8002930:	4283      	cmp	r3, r0
 8002932:	d13d      	bne.n	80029b0 <encode16Bit+0xc0>
		enc_data->Nn = S2M((MS2S(time) - enc_data->initTime) % EPOCH_DURATION_TIME);
 8002934:	22f0      	movs	r2, #240	; 0xf0
 8002936:	2300      	movs	r3, #0
 8002938:	0030      	movs	r0, r6
 800293a:	0039      	movs	r1, r7
 800293c:	f7fd fc78 	bl	8000230 <__aeabi_ldivmod>
 8002940:	0010      	movs	r0, r2
 8002942:	0019      	movs	r1, r3
 8002944:	223c      	movs	r2, #60	; 0x3c
 8002946:	2300      	movs	r3, #0
 8002948:	f7fd fc72 	bl	8000230 <__aeabi_ldivmod>
 800294c:	2250      	movs	r2, #80	; 0x50
 800294e:	b283      	uxth	r3, r0
 8002950:	52a3      	strh	r3, [r4, r2]
	int16_t payload = cryptoMacPayload16(*(uint16_t*)in, enc_data->Ke, enc_data->Nn);
 8002952:	4642      	mov	r2, r8
 8002954:	8810      	ldrh	r0, [r2, #0]
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800295a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800295c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2626      	movs	r6, #38	; 0x26
 8002962:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002964:	f7ff ff7a 	bl	800285c <cryptoMacPayload16>
	MIC = getMIC16(enc_data->Km, enc_data->DevAddr, payload, enc_data->Nn);
 8002968:	2350      	movs	r3, #80	; 0x50
	int16_t payload = cryptoMacPayload16(*(uint16_t*)in, enc_data->Ke, enc_data->Nn);
 800296a:	446e      	add	r6, sp
 800296c:	8030      	strh	r0, [r6, #0]
	MIC = getMIC16(enc_data->Km, enc_data->DevAddr, payload, enc_data->Nn);
 800296e:	5ae3      	ldrh	r3, [r4, r3]
 8002970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002976:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002978:	9001      	str	r0, [sp, #4]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800297e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002980:	f7ff fbec 	bl	800215c <getMIC16>
	memcpy(out, enc_data->DevAddr.data, sizeof (enc_data->DevAddr.data));
 8002984:	0021      	movs	r1, r4
	MIC = getMIC16(enc_data->Km, enc_data->DevAddr, payload, enc_data->Nn);
 8002986:	900b      	str	r0, [sp, #44]	; 0x2c
	memcpy(out, enc_data->DevAddr.data, sizeof (enc_data->DevAddr.data));
 8002988:	2203      	movs	r2, #3
 800298a:	0028      	movs	r0, r5
 800298c:	312c      	adds	r1, #44	; 0x2c
 800298e:	f000 fdf1 	bl	8003574 <memcpy>
	memcpy(out + sizeof (enc_data->DevAddr.data), &payload, sizeof (payload));
 8002992:	0031      	movs	r1, r6
 8002994:	2202      	movs	r2, #2
 8002996:	1ce8      	adds	r0, r5, #3
 8002998:	f000 fdec 	bl	8003574 <memcpy>
	memcpy(out + sizeof (enc_data->DevAddr.data) + sizeof (payload), MIC.data, sizeof (MIC.data));
 800299c:	2203      	movs	r2, #3
 800299e:	1d68      	adds	r0, r5, #5
 80029a0:	a90b      	add	r1, sp, #44	; 0x2c
 80029a2:	f000 fde7 	bl	8003574 <memcpy>
}
 80029a6:	b00d      	add	sp, #52	; 0x34
 80029a8:	bcc0      	pop	{r6, r7}
 80029aa:	46b9      	mov	r9, r7
 80029ac:	46b0      	mov	r8, r6
 80029ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		enc_data->Ke = getKe(enc_data->Ka, enc_data->Ne);
 80029b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029b2:	69e1      	ldr	r1, [r4, #28]
		enc_data->Ne = newNe;
 80029b4:	920a      	str	r2, [sp, #40]	; 0x28
 80029b6:	61a2      	str	r2, [r4, #24]
		enc_data->Ke = getKe(enc_data->Ka, enc_data->Ne);
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	6a22      	ldr	r2, [r4, #32]
 80029be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029c0:	a804      	add	r0, sp, #16
 80029c2:	f7ff fe8f 	bl	80026e4 <getKe>
 80029c6:	0020      	movs	r0, r4
 80029c8:	2210      	movs	r2, #16
 80029ca:	a904      	add	r1, sp, #16
 80029cc:	3040      	adds	r0, #64	; 0x40
 80029ce:	f000 fdd1 	bl	8003574 <memcpy>
		enc_data->Km = getKm(enc_data->Ka, enc_data->Ne);
 80029d2:	69a3      	ldr	r3, [r4, #24]
 80029d4:	69e1      	ldr	r1, [r4, #28]
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029da:	6a22      	ldr	r2, [r4, #32]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	a804      	add	r0, sp, #16
 80029e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029e2:	f7ff fe37 	bl	8002654 <getKm>
 80029e6:	0020      	movs	r0, r4
 80029e8:	2210      	movs	r2, #16
 80029ea:	a904      	add	r1, sp, #16
 80029ec:	3030      	adds	r0, #48	; 0x30
 80029ee:	f000 fdc1 	bl	8003574 <memcpy>
		enc_data->DevAddr = getDevAddr(enc_data->Ka, enc_data->Ne);
 80029f2:	69a3      	ldr	r3, [r4, #24]
 80029f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	69e0      	ldr	r0, [r4, #28]
 80029fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029fc:	6a21      	ldr	r1, [r4, #32]
 80029fe:	f7ff fd35 	bl	800246c <getDevAddr>
		enc_data->Nn = 0;
 8002a02:	2350      	movs	r3, #80	; 0x50
 8002a04:	464a      	mov	r2, r9
		enc_data->DevAddr = getDevAddr(enc_data->Ka, enc_data->Ne);
 8002a06:	62e0      	str	r0, [r4, #44]	; 0x2c
		enc_data->Nn = 0;
 8002a08:	52e2      	strh	r2, [r4, r3]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e7a1      	b.n	8002952 <encode16Bit+0x62>
 8002a0e:	46c0      	nop			; (mov r8, r8)

08002a10 <cryptoMacPayload48>:
uint48a_t cryptoMacPayload48(uint48a_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	46ce      	mov	lr, r9
 8002a14:	4647      	mov	r7, r8
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b099      	sub	sp, #100	; 0x64
 8002a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a1c:	ab24      	add	r3, sp, #144	; 0x90
 8002a1e:	8819      	ldrh	r1, [r3, #0]
    iv_t iv = {0};
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <cryptoMacPayload48+0x84>)
uint48a_t cryptoMacPayload48(uint48a_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 8002a22:	920a      	str	r2, [sp, #40]	; 0x28
    iv_t iv = {0};
 8002a24:	ac0c      	add	r4, sp, #48	; 0x30
 8002a26:	001a      	movs	r2, r3
 8002a28:	0027      	movs	r7, r4
 8002a2a:	469c      	mov	ip, r3
 8002a2c:	3210      	adds	r2, #16
uint48a_t cryptoMacPayload48(uint48a_t macPayload, uint128_256_t Ke, uint16_t Nn) {
 8002a2e:	4681      	mov	r9, r0
    iv_t iv = {0};
 8002a30:	ca29      	ldmia	r2!, {r0, r3, r5}
 8002a32:	c729      	stmia	r7!, {r0, r3, r5}
 8002a34:	6812      	ldr	r2, [r2, #0]
    uint128_256_t t = {0};
 8002a36:	ad14      	add	r5, sp, #80	; 0x50
    iv_t iv = {0};
 8002a38:	603a      	str	r2, [r7, #0]
    uint128_256_t t = {0};
 8002a3a:	4663      	mov	r3, ip
 8002a3c:	002a      	movs	r2, r5
    memcpy((char*)&iv + sizeof(iv.data) - sizeof(Nn), &Nn, sizeof(Nn));
 8002a3e:	81e1      	strh	r1, [r4, #14]
    uint128_256_t t = {0};
 8002a40:	cb43      	ldmia	r3!, {r0, r1, r6}
 8002a42:	c243      	stmia	r2!, {r0, r1, r6}
 8002a44:	4690      	mov	r8, r2
 8002a46:	681b      	ldr	r3, [r3, #0]
    memcpy(t.data, macPayload.data, sizeof(macPayload.data));
 8002a48:	a90a      	add	r1, sp, #40	; 0x28
    uint128_256_t t = {0};
 8002a4a:	6013      	str	r3, [r2, #0]
    memcpy(t.data, macPayload.data, sizeof(macPayload.data));
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	2206      	movs	r2, #6
 8002a50:	f000 fd90 	bl	8003574 <memcpy>
    tmpRet = encCTR(Ke, iv, t);
 8002a54:	ab05      	add	r3, sp, #20
 8002a56:	cd07      	ldmia	r5!, {r0, r1, r2}
 8002a58:	c307      	stmia	r3!, {r0, r1, r2}
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	ab01      	add	r3, sp, #4
 8002a64:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002a66:	c307      	stmia	r3!, {r0, r1, r2}
 8002a68:	001a      	movs	r2, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	a810      	add	r0, sp, #64	; 0x40
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a72:	9920      	ldr	r1, [sp, #128]	; 0x80
 8002a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a7a:	f7ff fd27 	bl	80024cc <encCTR>
    memcpy(ret.data, tmpRet.data, sizeof(ret.data));
 8002a7e:	2206      	movs	r2, #6
 8002a80:	4648      	mov	r0, r9
 8002a82:	a910      	add	r1, sp, #64	; 0x40
 8002a84:	f000 fd76 	bl	8003574 <memcpy>
}
 8002a88:	4648      	mov	r0, r9
 8002a8a:	b019      	add	sp, #100	; 0x64
 8002a8c:	bcc0      	pop	{r6, r7}
 8002a8e:	46b9      	mov	r9, r7
 8002a90:	46b0      	mov	r8, r6
 8002a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a94:	080035f0 	.word	0x080035f0

08002a98 <encode48Bit>:
void encode48Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 8002a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9a:	46ce      	mov	lr, r9
 8002a9c:	4647      	mov	r7, r8
	uint24a_t newNe = {0};
 8002a9e:	2300      	movs	r3, #0
void encode48Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 8002aa0:	0015      	movs	r5, r2
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002aa2:	22fa      	movs	r2, #250	; 0xfa
void encode48Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08f      	sub	sp, #60	; 0x3c
 8002aa8:	0004      	movs	r4, r0
	uint24a_t newNe = {0};
 8002aaa:	930a      	str	r3, [sp, #40]	; 0x28
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002aac:	0092      	lsls	r2, r2, #2
void encode48Bit(struct encryptData* enc_data, uint8_t* in, uint8_t* out, time_t time) {
 8002aae:	4688      	mov	r8, r1
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002ab0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002ab2:	9917      	ldr	r1, [sp, #92]	; 0x5c
	uint24a_t newNe = {0};
 8002ab4:	4699      	mov	r9, r3
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f7fd fbba 	bl	8000230 <__aeabi_ldivmod>
 8002abc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002abe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ac0:	1a80      	subs	r0, r0, r2
 8002ac2:	4199      	sbcs	r1, r3
 8002ac4:	22f0      	movs	r2, #240	; 0xf0
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	0006      	movs	r6, r0
 8002aca:	000f      	movs	r7, r1
 8002acc:	f7fd fbb0 	bl	8000230 <__aeabi_ldivmod>
	if (newNe.ud != enc_data->Ne.ud) {
 8002ad0:	69a3      	ldr	r3, [r4, #24]
	newNe.ud = (MS2S(time) - enc_data->initTime) / EPOCH_DURATION_TIME;
 8002ad2:	0200      	lsls	r0, r0, #8
	if (newNe.ud != enc_data->Ne.ud) {
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	0a02      	lsrs	r2, r0, #8
 8002ad8:	4283      	cmp	r3, r0
 8002ada:	d142      	bne.n	8002b62 <encode48Bit+0xca>
		enc_data->Nn = S2M((MS2S(time) - enc_data->initTime) % EPOCH_DURATION_TIME);
 8002adc:	0030      	movs	r0, r6
 8002ade:	22f0      	movs	r2, #240	; 0xf0
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	0039      	movs	r1, r7
 8002ae4:	f7fd fba4 	bl	8000230 <__aeabi_ldivmod>
 8002ae8:	0010      	movs	r0, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	223c      	movs	r2, #60	; 0x3c
 8002aee:	2300      	movs	r3, #0
 8002af0:	f7fd fb9e 	bl	8000230 <__aeabi_ldivmod>
 8002af4:	0026      	movs	r6, r4
 8002af6:	2350      	movs	r3, #80	; 0x50
 8002af8:	b280      	uxth	r0, r0
 8002afa:	52e0      	strh	r0, [r4, r3]
 8002afc:	3640      	adds	r6, #64	; 0x40
	uint48a_t payload = cryptoMacPayload48(*(uint48a_t*)in, enc_data->Ke, enc_data->Nn);
 8002afe:	466b      	mov	r3, sp
 8002b00:	9004      	str	r0, [sp, #16]
 8002b02:	ce07      	ldmia	r6!, {r0, r1, r2}
 8002b04:	c307      	stmia	r3!, {r0, r1, r2}
 8002b06:	6832      	ldr	r2, [r6, #0]
 8002b08:	a80c      	add	r0, sp, #48	; 0x30
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	cb0c      	ldmia	r3, {r2, r3}
 8002b10:	f7ff ff7e 	bl	8002a10 <cryptoMacPayload48>
	MIC = getMIC48(enc_data->Km, enc_data->DevAddr, payload, enc_data->Nn);
 8002b14:	2350      	movs	r3, #80	; 0x50
 8002b16:	5ae3      	ldrh	r3, [r4, r3]
 8002b18:	a90c      	add	r1, sp, #48	; 0x30
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	a802      	add	r0, sp, #8
 8002b1e:	9304      	str	r3, [sp, #16]
 8002b20:	f000 fd28 	bl	8003574 <memcpy>
 8002b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b30:	f7ff fbc6 	bl	80022c0 <getMIC48>
	memcpy(out, enc_data->DevAddr.data, sizeof (enc_data->DevAddr.data));
 8002b34:	0021      	movs	r1, r4
	MIC = getMIC48(enc_data->Km, enc_data->DevAddr, payload, enc_data->Nn);
 8002b36:	900b      	str	r0, [sp, #44]	; 0x2c
	memcpy(out, enc_data->DevAddr.data, sizeof (enc_data->DevAddr.data));
 8002b38:	2203      	movs	r2, #3
 8002b3a:	0028      	movs	r0, r5
 8002b3c:	312c      	adds	r1, #44	; 0x2c
 8002b3e:	f000 fd19 	bl	8003574 <memcpy>
	memcpy(out + sizeof (enc_data->DevAddr.data), payload.data, sizeof (payload.data));
 8002b42:	a90c      	add	r1, sp, #48	; 0x30
 8002b44:	2206      	movs	r2, #6
 8002b46:	1ce8      	adds	r0, r5, #3
 8002b48:	f000 fd14 	bl	8003574 <memcpy>
	memcpy(out + sizeof (enc_data->DevAddr.data) + sizeof (payload.data), MIC.data, sizeof (MIC.data));
 8002b4c:	0028      	movs	r0, r5
 8002b4e:	2203      	movs	r2, #3
 8002b50:	a90b      	add	r1, sp, #44	; 0x2c
 8002b52:	3009      	adds	r0, #9
 8002b54:	f000 fd0e 	bl	8003574 <memcpy>
}
 8002b58:	b00f      	add	sp, #60	; 0x3c
 8002b5a:	bcc0      	pop	{r6, r7}
 8002b5c:	46b9      	mov	r9, r7
 8002b5e:	46b0      	mov	r8, r6
 8002b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		enc_data->Ke = getKe(enc_data->Ka, enc_data->Ne);
 8002b62:	0026      	movs	r6, r4
 8002b64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b66:	69e1      	ldr	r1, [r4, #28]
		enc_data->Ne = newNe;
 8002b68:	920a      	str	r2, [sp, #40]	; 0x28
 8002b6a:	61a2      	str	r2, [r4, #24]
		enc_data->Ke = getKe(enc_data->Ka, enc_data->Ne);
 8002b6c:	9201      	str	r2, [sp, #4]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	6a22      	ldr	r2, [r4, #32]
 8002b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b74:	a806      	add	r0, sp, #24
 8002b76:	3640      	adds	r6, #64	; 0x40
 8002b78:	f7ff fdb4 	bl	80026e4 <getKe>
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	a906      	add	r1, sp, #24
 8002b80:	0030      	movs	r0, r6
 8002b82:	f000 fcf7 	bl	8003574 <memcpy>
		enc_data->Km = getKm(enc_data->Ka, enc_data->Ne);
 8002b86:	69a3      	ldr	r3, [r4, #24]
 8002b88:	69e1      	ldr	r1, [r4, #28]
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b8e:	6a22      	ldr	r2, [r4, #32]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	a806      	add	r0, sp, #24
 8002b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b96:	f7ff fd5d 	bl	8002654 <getKm>
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	a906      	add	r1, sp, #24
 8002ba0:	3030      	adds	r0, #48	; 0x30
 8002ba2:	f000 fce7 	bl	8003574 <memcpy>
		enc_data->DevAddr = getDevAddr(enc_data->Ka, enc_data->Ne);
 8002ba6:	69a3      	ldr	r3, [r4, #24]
 8002ba8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	69e0      	ldr	r0, [r4, #28]
 8002bae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb0:	6a21      	ldr	r1, [r4, #32]
 8002bb2:	f7ff fc5b 	bl	800246c <getDevAddr>
		enc_data->Nn = 0;
 8002bb6:	2350      	movs	r3, #80	; 0x50
 8002bb8:	464a      	mov	r2, r9
		enc_data->DevAddr = getDevAddr(enc_data->Ka, enc_data->Ne);
 8002bba:	62e0      	str	r0, [r4, #44]	; 0x2c
		enc_data->Nn = 0;
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	52e2      	strh	r2, [r4, r3]
 8002bc0:	e79d      	b.n	8002afe <encode48Bit+0x66>
 8002bc2:	46c0      	nop			; (mov r8, r8)

08002bc4 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	46ce      	mov	lr, r9
 8002bc8:	4647      	mov	r7, r8
 8002bca:	000c      	movs	r4, r1
 8002bcc:	0003      	movs	r3, r0
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	3410      	adds	r4, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8002bd2:	780a      	ldrb	r2, [r1, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8002bd6:	784a      	ldrb	r2, [r1, #1]
 8002bd8:	705a      	strb	r2, [r3, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8002bda:	788a      	ldrb	r2, [r1, #2]
 8002bdc:	709a      	strb	r2, [r3, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8002bde:	78ca      	ldrb	r2, [r1, #3]
 8002be0:	3104      	adds	r1, #4
 8002be2:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < Nk; ++i)
 8002be4:	3304      	adds	r3, #4
 8002be6:	42a1      	cmp	r1, r4
 8002be8:	d1f3      	bne.n	8002bd2 <KeyExpansion+0xe>
      tempa[2]=RoundKey[k + 2];
      tempa[3]=RoundKey[k + 3];

    }

    if (i % Nk == 0)
 8002bea:	2303      	movs	r3, #3
 8002bec:	4699      	mov	r9, r3
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <KeyExpansion+0x7c>)
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8002bf0:	2504      	movs	r5, #4
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8002bf2:	469c      	mov	ip, r3
        tempa[0] = getSBoxValue(tempa[0]);
 8002bf4:	4e13      	ldr	r6, [pc, #76]	; (8002c44 <KeyExpansion+0x80>)
    if (i % Nk == 0)
 8002bf6:	464f      	mov	r7, r9
      tempa[0]=RoundKey[k + 0];
 8002bf8:	7b03      	ldrb	r3, [r0, #12]
      tempa[1]=RoundKey[k + 1];
 8002bfa:	7b44      	ldrb	r4, [r0, #13]
      tempa[2]=RoundKey[k + 2];
 8002bfc:	7b81      	ldrb	r1, [r0, #14]
      tempa[3]=RoundKey[k + 3];
 8002bfe:	7bc2      	ldrb	r2, [r0, #15]
    if (i % Nk == 0)
 8002c00:	422f      	tst	r7, r5
 8002c02:	d109      	bne.n	8002c18 <KeyExpansion+0x54>
        tempa[0] = getSBoxValue(tempa[0]);
 8002c04:	5d34      	ldrb	r4, [r6, r4]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8002c06:	4667      	mov	r7, ip
        tempa[0] = getSBoxValue(tempa[0]);
 8002c08:	46a0      	mov	r8, r4
        tempa[1] = getSBoxValue(tempa[1]);
 8002c0a:	5c74      	ldrb	r4, [r6, r1]
        tempa[2] = getSBoxValue(tempa[2]);
 8002c0c:	5cb1      	ldrb	r1, [r6, r2]
        tempa[3] = getSBoxValue(tempa[3]);
 8002c0e:	5cf2      	ldrb	r2, [r6, r3]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8002c10:	08ab      	lsrs	r3, r5, #2
 8002c12:	5cfb      	ldrb	r3, [r7, r3]
 8002c14:	4647      	mov	r7, r8
 8002c16:	407b      	eors	r3, r7
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8002c18:	7807      	ldrb	r7, [r0, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8002c1a:	3501      	adds	r5, #1
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8002c1c:	407b      	eors	r3, r7
 8002c1e:	7403      	strb	r3, [r0, #16]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8002c20:	7843      	ldrb	r3, [r0, #1]
 8002c22:	405c      	eors	r4, r3
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8002c24:	7883      	ldrb	r3, [r0, #2]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8002c26:	7444      	strb	r4, [r0, #17]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8002c28:	4059      	eors	r1, r3
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8002c2a:	78c3      	ldrb	r3, [r0, #3]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8002c2c:	7481      	strb	r1, [r0, #18]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8002c2e:	405a      	eors	r2, r3
 8002c30:	74c2      	strb	r2, [r0, #19]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8002c32:	3004      	adds	r0, #4
 8002c34:	2d2c      	cmp	r5, #44	; 0x2c
 8002c36:	d1de      	bne.n	8002bf6 <KeyExpansion+0x32>
  }
}
 8002c38:	bcc0      	pop	{r6, r7}
 8002c3a:	46b9      	mov	r9, r7
 8002c3c:	46b0      	mov	r8, r6
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	08003ac0 	.word	0x08003ac0
 8002c44:	08003acc 	.word	0x08003acc

08002c48 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	4645      	mov	r5, r8
 8002c4c:	46de      	mov	lr, fp
 8002c4e:	4657      	mov	r7, sl
 8002c50:	464e      	mov	r6, r9
 8002c52:	b5e0      	push	{r5, r6, r7, lr}
 8002c54:	000d      	movs	r5, r1
 8002c56:	000c      	movs	r4, r1
 8002c58:	0002      	movs	r2, r0
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	9104      	str	r1, [sp, #16]
 8002c5e:	9005      	str	r0, [sp, #20]
 8002c60:	3510      	adds	r5, #16
 8002c62:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8002c64:	5cd1      	ldrb	r1, [r2, r3]
 8002c66:	5ce6      	ldrb	r6, [r4, r3]
 8002c68:	4071      	eors	r1, r6
 8002c6a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d1f8      	bne.n	8002c64 <Cipher+0x1c>
  for (i = 0; i < 4; ++i)
 8002c72:	3404      	adds	r4, #4
 8002c74:	3204      	adds	r2, #4
 8002c76:	42a5      	cmp	r5, r4
 8002c78:	d1f3      	bne.n	8002c62 <Cipher+0x1a>
 8002c7a:	469c      	mov	ip, r3
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	1a1b      	subs	r3, r3, r0
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	23a0      	movs	r3, #160	; 0xa0
 8002c84:	1a1b      	subs	r3, r3, r0
 8002c86:	9303      	str	r3, [sp, #12]
 8002c88:	2310      	movs	r3, #16
 8002c8a:	4698      	mov	r8, r3
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4699      	mov	r9, r3
 8002c90:	4f57      	ldr	r7, [pc, #348]	; (8002df0 <Cipher+0x1a8>)
 8002c92:	4480      	add	r8, r0
 8002c94:	4481      	add	r9, r0
{
 8002c96:	4642      	mov	r2, r8
 8002c98:	464c      	mov	r4, r9
    for (j = 0; j < 4; ++j)
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	3b10      	subs	r3, #16
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8002c9e:	7819      	ldrb	r1, [r3, #0]
 8002ca0:	5c79      	ldrb	r1, [r7, r1]
 8002ca2:	7019      	strb	r1, [r3, #0]
    for (j = 0; j < 4; ++j)
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d1f9      	bne.n	8002c9e <Cipher+0x56>
  for (i = 0; i < 4; ++i)
 8002caa:	3201      	adds	r2, #1
 8002cac:	4294      	cmp	r4, r2
 8002cae:	d1f4      	bne.n	8002c9a <Cipher+0x52>
  temp           = (*state)[0][1];
 8002cb0:	7843      	ldrb	r3, [r0, #1]
  (*state)[1][1] = (*state)[2][1];
 8002cb2:	7a42      	ldrb	r2, [r0, #9]
  (*state)[1][2] = (*state)[3][2];
 8002cb4:	7b81      	ldrb	r1, [r0, #14]
 8002cb6:	46a1      	mov	r9, r4
  (*state)[0][1] = (*state)[1][1];
 8002cb8:	7944      	ldrb	r4, [r0, #5]
  (*state)[1][1] = (*state)[2][1];
 8002cba:	7142      	strb	r2, [r0, #5]
  (*state)[2][1] = (*state)[3][1];
 8002cbc:	7b42      	ldrb	r2, [r0, #13]
  (*state)[3][1] = temp;
 8002cbe:	7343      	strb	r3, [r0, #13]
  temp           = (*state)[0][2];
 8002cc0:	7883      	ldrb	r3, [r0, #2]
  (*state)[2][1] = (*state)[3][1];
 8002cc2:	7242      	strb	r2, [r0, #9]
  (*state)[0][2] = (*state)[2][2];
 8002cc4:	7a82      	ldrb	r2, [r0, #10]
  (*state)[2][2] = temp;
 8002cc6:	7283      	strb	r3, [r0, #10]
  temp           = (*state)[1][2];
 8002cc8:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
 8002cca:	7181      	strb	r1, [r0, #6]
  (*state)[3][3] = (*state)[2][3];
 8002ccc:	7ac1      	ldrb	r1, [r0, #11]
  (*state)[3][2] = temp;
 8002cce:	7383      	strb	r3, [r0, #14]
  (*state)[0][3] = (*state)[3][3];
 8002cd0:	7bc5      	ldrb	r5, [r0, #15]
  temp           = (*state)[0][3];
 8002cd2:	78c3      	ldrb	r3, [r0, #3]
  (*state)[3][3] = (*state)[2][3];
 8002cd4:	73c1      	strb	r1, [r0, #15]
  (*state)[2][3] = (*state)[1][3];
 8002cd6:	79c1      	ldrb	r1, [r0, #7]
  (*state)[0][1] = (*state)[1][1];
 8002cd8:	7044      	strb	r4, [r0, #1]
  (*state)[0][2] = (*state)[2][2];
 8002cda:	7082      	strb	r2, [r0, #2]
  (*state)[0][3] = (*state)[3][3];
 8002cdc:	70c5      	strb	r5, [r0, #3]
  (*state)[2][3] = (*state)[1][3];
 8002cde:	72c1      	strb	r1, [r0, #11]
  (*state)[1][3] = temp;
 8002ce0:	71c3      	strb	r3, [r0, #7]
  // Last one without MixColumns()
  for (round = 1; ; ++round)
  {
    SubBytes(state);
    ShiftRows(state);
    if (round == Nr) {
 8002ce2:	9b03      	ldr	r3, [sp, #12]
 8002ce4:	9901      	ldr	r1, [sp, #4]
 8002ce6:	428b      	cmp	r3, r1
 8002ce8:	d069      	beq.n	8002dbe <Cipher+0x176>
 8002cea:	4641      	mov	r1, r8
 8002cec:	0003      	movs	r3, r0
 8002cee:	9002      	str	r0, [sp, #8]
 8002cf0:	9100      	str	r1, [sp, #0]
    t   = (*state)[i][0];
 8002cf2:	7819      	ldrb	r1, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8002cf4:	406a      	eors	r2, r5
 8002cf6:	404c      	eors	r4, r1
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002cf8:	09e5      	lsrs	r5, r4, #7
 8002cfa:	0068      	lsls	r0, r5, #1
 8002cfc:	182d      	adds	r5, r5, r0
 8002cfe:	00e8      	lsls	r0, r5, #3
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8002d00:	4062      	eors	r2, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002d02:	182d      	adds	r5, r5, r0
 8002d04:	0064      	lsls	r4, r4, #1
 8002d06:	4065      	eors	r5, r4
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8002d08:	000c      	movs	r4, r1
 8002d0a:	4054      	eors	r4, r2
 8002d0c:	4065      	eors	r5, r4
 8002d0e:	701d      	strb	r5, [r3, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8002d10:	785d      	ldrb	r5, [r3, #1]
 8002d12:	7898      	ldrb	r0, [r3, #2]
 8002d14:	002c      	movs	r4, r5
 8002d16:	4044      	eors	r4, r0
 8002d18:	46a2      	mov	sl, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002d1a:	09e4      	lsrs	r4, r4, #7
 8002d1c:	0066      	lsls	r6, r4, #1
 8002d1e:	46b3      	mov	fp, r6
 8002d20:	445c      	add	r4, fp
 8002d22:	00e6      	lsls	r6, r4, #3
 8002d24:	46b3      	mov	fp, r6
 8002d26:	4656      	mov	r6, sl
 8002d28:	445c      	add	r4, fp
 8002d2a:	0076      	lsls	r6, r6, #1
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8002d2c:	4055      	eors	r5, r2
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002d2e:	4074      	eors	r4, r6
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8002d30:	406c      	eors	r4, r5
 8002d32:	705c      	strb	r4, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8002d34:	0004      	movs	r4, r0
 8002d36:	78dd      	ldrb	r5, [r3, #3]
 8002d38:	4050      	eors	r0, r2
 8002d3a:	406c      	eors	r4, r5
 8002d3c:	46a2      	mov	sl, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002d3e:	09e4      	lsrs	r4, r4, #7
 8002d40:	0066      	lsls	r6, r4, #1
 8002d42:	46b3      	mov	fp, r6
 8002d44:	445c      	add	r4, fp
 8002d46:	00e6      	lsls	r6, r4, #3
 8002d48:	46b3      	mov	fp, r6
 8002d4a:	4656      	mov	r6, sl
 8002d4c:	445c      	add	r4, fp
 8002d4e:	0076      	lsls	r6, r6, #1
 8002d50:	4074      	eors	r4, r6
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8002d52:	4044      	eors	r4, r0
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8002d54:	4069      	eors	r1, r5
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8002d56:	709c      	strb	r4, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8002d58:	000c      	movs	r4, r1
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002d5a:	09c9      	lsrs	r1, r1, #7
 8002d5c:	0048      	lsls	r0, r1, #1
 8002d5e:	4680      	mov	r8, r0
 8002d60:	4441      	add	r1, r8
 8002d62:	00c8      	lsls	r0, r1, #3
 8002d64:	4680      	mov	r8, r0
 8002d66:	0064      	lsls	r4, r4, #1
 8002d68:	4441      	add	r1, r8
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8002d6a:	406a      	eors	r2, r5
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002d6c:	4061      	eors	r1, r4
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8002d6e:	4051      	eors	r1, r2
  for (i = 0; i < 4; ++i)
 8002d70:	9a00      	ldr	r2, [sp, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8002d72:	70d9      	strb	r1, [r3, #3]
  for (i = 0; i < 4; ++i)
 8002d74:	3304      	adds	r3, #4
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d003      	beq.n	8002d82 <Cipher+0x13a>
 8002d7a:	785c      	ldrb	r4, [r3, #1]
 8002d7c:	789a      	ldrb	r2, [r3, #2]
 8002d7e:	78dd      	ldrb	r5, [r3, #3]
 8002d80:	e7b7      	b.n	8002cf2 <Cipher+0xaa>
 8002d82:	9b00      	ldr	r3, [sp, #0]
 8002d84:	9802      	ldr	r0, [sp, #8]
 8002d86:	4698      	mov	r8, r3
 8002d88:	4663      	mov	r3, ip
 8002d8a:	009c      	lsls	r4, r3, #2
 8002d8c:	9b04      	ldr	r3, [sp, #16]
 8002d8e:	0001      	movs	r1, r0
 8002d90:	469a      	mov	sl, r3
 8002d92:	4646      	mov	r6, r8
 8002d94:	4454      	add	r4, sl
    for (j = 0; j < 4; ++j)
 8002d96:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8002d98:	5cca      	ldrb	r2, [r1, r3]
 8002d9a:	5ce5      	ldrb	r5, [r4, r3]
 8002d9c:	406a      	eors	r2, r5
 8002d9e:	54ca      	strb	r2, [r1, r3]
    for (j = 0; j < 4; ++j)
 8002da0:	3301      	adds	r3, #1
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d1f8      	bne.n	8002d98 <Cipher+0x150>
  for (i = 0; i < 4; ++i)
 8002da6:	3104      	adds	r1, #4
 8002da8:	3404      	adds	r4, #4
 8002daa:	428e      	cmp	r6, r1
 8002dac:	d1f3      	bne.n	8002d96 <Cipher+0x14e>
 8002dae:	2304      	movs	r3, #4
 8002db0:	469a      	mov	sl, r3
 8002db2:	9b01      	ldr	r3, [sp, #4]
 8002db4:	46b0      	mov	r8, r6
  for (round = 1; ; ++round)
 8002db6:	3310      	adds	r3, #16
 8002db8:	44d4      	add	ip, sl
 8002dba:	9301      	str	r3, [sp, #4]
    SubBytes(state);
 8002dbc:	e76b      	b.n	8002c96 <Cipher+0x4e>
    if (round == Nr) {
 8002dbe:	24a0      	movs	r4, #160	; 0xa0
 8002dc0:	9904      	ldr	r1, [sp, #16]
 8002dc2:	9805      	ldr	r0, [sp, #20]
 8002dc4:	31a0      	adds	r1, #160	; 0xa0
  for (i = 0; i < 4; ++i)
 8002dc6:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8002dc8:	5cc2      	ldrb	r2, [r0, r3]
 8002dca:	5ccd      	ldrb	r5, [r1, r3]
 8002dcc:	406a      	eors	r2, r5
 8002dce:	54c2      	strb	r2, [r0, r3]
    for (j = 0; j < 4; ++j)
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d1f8      	bne.n	8002dc8 <Cipher+0x180>
  for (i = 0; i < 4; ++i)
 8002dd6:	3404      	adds	r4, #4
 8002dd8:	3004      	adds	r0, #4
 8002dda:	3104      	adds	r1, #4
 8002ddc:	2cb0      	cmp	r4, #176	; 0xb0
 8002dde:	d1f2      	bne.n	8002dc6 <Cipher+0x17e>
    MixColumns(state);
    AddRoundKey(round, state, RoundKey);
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
}
 8002de0:	b007      	add	sp, #28
 8002de2:	bcf0      	pop	{r4, r5, r6, r7}
 8002de4:	46bb      	mov	fp, r7
 8002de6:	46b2      	mov	sl, r6
 8002de8:	46a9      	mov	r9, r5
 8002dea:	46a0      	mov	r8, r4
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	08003acc 	.word	0x08003acc

08002df4 <AES_init_ctx>:
{
 8002df4:	b510      	push	{r4, lr}
  KeyExpansion(ctx->RoundKey, key);
 8002df6:	f7ff fee5 	bl	8002bc4 <KeyExpansion>
}
 8002dfa:	bd10      	pop	{r4, pc}

08002dfc <AES_init_ctx_iv>:
{
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	0004      	movs	r4, r0
 8002e00:	0015      	movs	r5, r2
  KeyExpansion(ctx->RoundKey, key);
 8002e02:	f7ff fedf 	bl	8002bc4 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8002e06:	0020      	movs	r0, r4
 8002e08:	0029      	movs	r1, r5
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	30b0      	adds	r0, #176	; 0xb0
 8002e0e:	f000 fbb1 	bl	8003574 <memcpy>
}
 8002e12:	bd70      	pop	{r4, r5, r6, pc}

08002e14 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8002e14:	0003      	movs	r3, r0
 8002e16:	b510      	push	{r4, lr}
 8002e18:	0008      	movs	r0, r1
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f7ff ff14 	bl	8002c48 <Cipher>
}
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)

08002e24 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, uint32_t length)
{
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	46c6      	mov	lr, r8
 8002e28:	b500      	push	{lr}
 8002e2a:	0006      	movs	r6, r0
 8002e2c:	b084      	sub	sp, #16
  uint8_t buffer[AES_BLOCKLEN];
  
  unsigned i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d012      	beq.n	8002e58 <AES_CTR_xcrypt_buffer+0x34>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
	{
          ctx->Iv[bi] = 0;
 8002e32:	2300      	movs	r3, #0
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8002e34:	0007      	movs	r7, r0
 8002e36:	000c      	movs	r4, r1
 8002e38:	188d      	adds	r5, r1, r2
          ctx->Iv[bi] = 0;
 8002e3a:	4698      	mov	r8, r3
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8002e3c:	2110      	movs	r1, #16
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8002e3e:	37b0      	adds	r7, #176	; 0xb0
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8002e40:	2910      	cmp	r1, #16
 8002e42:	d00d      	beq.n	8002e60 <AES_CTR_xcrypt_buffer+0x3c>
 8002e44:	000a      	movs	r2, r1
 8002e46:	3101      	adds	r1, #1
        break;   
      }
      bi = 0;
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8002e48:	4668      	mov	r0, sp
 8002e4a:	7823      	ldrb	r3, [r4, #0]
 8002e4c:	5c82      	ldrb	r2, [r0, r2]
 8002e4e:	4053      	eors	r3, r2
 8002e50:	7023      	strb	r3, [r4, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8002e52:	3401      	adds	r4, #1
 8002e54:	42ac      	cmp	r4, r5
 8002e56:	d1f3      	bne.n	8002e40 <AES_CTR_xcrypt_buffer+0x1c>
  }
}
 8002e58:	b004      	add	sp, #16
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	46b8      	mov	r8, r7
 8002e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8002e60:	2210      	movs	r2, #16
 8002e62:	0039      	movs	r1, r7
 8002e64:	4668      	mov	r0, sp
 8002e66:	f000 fb85 	bl	8003574 <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
 8002e6a:	0031      	movs	r1, r6
 8002e6c:	4668      	mov	r0, sp
 8002e6e:	f7ff feeb 	bl	8002c48 <Cipher>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8002e72:	230f      	movs	r3, #15
        if (ctx->Iv[bi] == 255)
 8002e74:	5cfa      	ldrb	r2, [r7, r3]
 8002e76:	2aff      	cmp	r2, #255	; 0xff
 8002e78:	d006      	beq.n	8002e88 <AES_CTR_xcrypt_buffer+0x64>
        ctx->Iv[bi] += 1;
 8002e7a:	18f3      	adds	r3, r6, r3
 8002e7c:	33b0      	adds	r3, #176	; 0xb0
 8002e7e:	3201      	adds	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
        break;   
 8002e82:	2101      	movs	r1, #1
      bi = 0;
 8002e84:	2200      	movs	r2, #0
        break;   
 8002e86:	e7df      	b.n	8002e48 <AES_CTR_xcrypt_buffer+0x24>
          ctx->Iv[bi] = 0;
 8002e88:	4642      	mov	r2, r8
 8002e8a:	54fa      	strb	r2, [r7, r3]
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	d2f1      	bcs.n	8002e74 <AES_CTR_xcrypt_buffer+0x50>
 8002e90:	e7f7      	b.n	8002e82 <AES_CTR_xcrypt_buffer+0x5e>
 8002e92:	46c0      	nop			; (mov r8, r8)

08002e94 <crc24>:

#define CRC24_INIT      0xFFFFFFUL
#define CRC24_POLY      0x5D6DCBUL
#define CRC24_XOR_OUT   0xFFFFFFUL

uint32_t crc24(unsigned char* octets, size_t len) {
 8002e94:	b530      	push	{r4, r5, lr}
    uint32_t crc = CRC24_INIT;
    int i;
    while (len--) {
 8002e96:	2900      	cmp	r1, #0
 8002e98:	d016      	beq.n	8002ec8 <crc24+0x34>
 8002e9a:	1845      	adds	r5, r0, r1
        crc ^= (*octets++) << 16;
        for (i = 0; i < 8; i++) {
            crc <<= 1;
            if (crc & 0x1000000)
 8002e9c:	2180      	movs	r1, #128	; 0x80
    uint32_t crc = CRC24_INIT;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <crc24+0x38>)
                crc ^= CRC24_POLY;
 8002ea0:	4c0b      	ldr	r4, [pc, #44]	; (8002ed0 <crc24+0x3c>)
            if (crc & 0x1000000)
 8002ea2:	0449      	lsls	r1, r1, #17
        crc ^= (*octets++) << 16;
 8002ea4:	7802      	ldrb	r2, [r0, #0]
 8002ea6:	0412      	lsls	r2, r2, #16
 8002ea8:	4053      	eors	r3, r2
 8002eaa:	2208      	movs	r2, #8
            crc <<= 1;
 8002eac:	005b      	lsls	r3, r3, #1
            if (crc & 0x1000000)
 8002eae:	420b      	tst	r3, r1
 8002eb0:	d000      	beq.n	8002eb4 <crc24+0x20>
                crc ^= CRC24_POLY;
 8002eb2:	4063      	eors	r3, r4
        for (i = 0; i < 8; i++) {
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d1f8      	bne.n	8002eac <crc24+0x18>
    while (len--) {
 8002eba:	3001      	adds	r0, #1
 8002ebc:	4285      	cmp	r5, r0
 8002ebe:	d1f1      	bne.n	8002ea4 <crc24+0x10>
 8002ec0:	43d8      	mvns	r0, r3
 8002ec2:	0200      	lsls	r0, r0, #8
 8002ec4:	0a00      	lsrs	r0, r0, #8
        }
    }
    return (crc & 0xFFFFFFL) ^ CRC24_XOR_OUT ;
}
 8002ec6:	bd30      	pop	{r4, r5, pc}
    while (len--) {
 8002ec8:	2000      	movs	r0, #0
    return (crc & 0xFFFFFFL) ^ CRC24_XOR_OUT ;
 8002eca:	e7fc      	b.n	8002ec6 <crc24+0x32>
 8002ecc:	00ffffff 	.word	0x00ffffff
 8002ed0:	005d6dcb 	.word	0x005d6dcb

08002ed4 <bits_to_byties>:
			out[i * 8 + bit] = (in[i] >> bit) & 1;
		}
	}
}

void bits_to_byties(uint8_t* in, int size, uint8_t* out) {
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	0015      	movs	r5, r2
	uint16_t i=0;

	memset(out, 0, size/8);
 8002ed8:	2207      	movs	r2, #7
 8002eda:	17cb      	asrs	r3, r1, #31
 8002edc:	401a      	ands	r2, r3
 8002ede:	1852      	adds	r2, r2, r1
void bits_to_byties(uint8_t* in, int size, uint8_t* out) {
 8002ee0:	000e      	movs	r6, r1
 8002ee2:	0007      	movs	r7, r0
	memset(out, 0, size/8);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	10d2      	asrs	r2, r2, #3
 8002eea:	f000 fb4c 	bl	8003586 <memset>

	for (; i < size; i++) {
 8002eee:	2e00      	cmp	r6, #0
 8002ef0:	dd0d      	ble.n	8002f0e <bits_to_byties+0x3a>
	uint16_t i=0;
 8002ef2:	2300      	movs	r3, #0
		out[i / 8] |= in[i] << (i % 8);
 8002ef4:	2007      	movs	r0, #7
 8002ef6:	0001      	movs	r1, r0
 8002ef8:	5cfc      	ldrb	r4, [r7, r3]
 8002efa:	4019      	ands	r1, r3
 8002efc:	408c      	lsls	r4, r1
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	5ca9      	ldrb	r1, [r5, r2]
	for (; i < size; i++) {
 8002f02:	3301      	adds	r3, #1
		out[i / 8] |= in[i] << (i % 8);
 8002f04:	430c      	orrs	r4, r1
	for (; i < size; i++) {
 8002f06:	b29b      	uxth	r3, r3
		out[i / 8] |= in[i] << (i % 8);
 8002f08:	54ac      	strb	r4, [r5, r2]
	for (; i < size; i++) {
 8002f0a:	42b3      	cmp	r3, r6
 8002f0c:	dbf3      	blt.n	8002ef6 <bits_to_byties+0x22>
	}
}
 8002f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f10 <solve_recursively>:
    solve_recursively(inf_idx, j, u, n_polar, iwd_s, n_polar, n_polar);
		//free(inf_idx);
}


void solve_recursively(uint16_t* _inf_idx, uint16_t _inf_idx_size, uint8_t* _u, int uSize, uint8_t* _x, int xSize, int last) {
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	4657      	mov	r7, sl
 8002f14:	4645      	mov	r5, r8
 8002f16:	46de      	mov	lr, fp
 8002f18:	464e      	mov	r6, r9
 8002f1a:	b5e0      	push	{r5, r6, r7, lr}
 8002f1c:	b0a5      	sub	sp, #148	; 0x94
 8002f1e:	4693      	mov	fp, r2
 8002f20:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 8002f22:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8002f24:	4680      	mov	r8, r0
 8002f26:	4689      	mov	r9, r1
 8002f28:	4692      	mov	sl, r2
 8002f2a:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    int n = xSize;

    if (n == 1) {
 8002f2c:	2f01      	cmp	r7, #1
 8002f2e:	d118      	bne.n	8002f62 <solve_recursively+0x52>
        uint8_t f = 0;
        for (int i = 0; i < _inf_idx_size && !f; i++) {
 8002f30:	2300      	movs	r3, #0
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d007      	beq.n	8002f46 <solve_recursively+0x36>
            if (_inf_idx[i] == last) {
 8002f36:	4641      	mov	r1, r8
 8002f38:	005a      	lsls	r2, r3, #1
 8002f3a:	5a8a      	ldrh	r2, [r1, r2]
 8002f3c:	4552      	cmp	r2, sl
 8002f3e:	d006      	beq.n	8002f4e <solve_recursively+0x3e>
        for (int i = 0; i < _inf_idx_size && !f; i++) {
 8002f40:	3301      	adds	r3, #1
 8002f42:	4599      	cmp	r9, r3
 8002f44:	dcf7      	bgt.n	8002f36 <solve_recursively+0x26>

        if (f) {
            *_u = *_x;
        }
        else {
            *_x = *_u;
 8002f46:	465b      	mov	r3, fp
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	702b      	strb	r3, [r5, #0]
 8002f4c:	e002      	b.n	8002f54 <solve_recursively+0x44>
            *_u = *_x;
 8002f4e:	465a      	mov	r2, fp
 8002f50:	782b      	ldrb	r3, [r5, #0]
 8002f52:	7013      	strb	r3, [r2, #0]
        }

        //free(x_first);

    }
}
 8002f54:	b025      	add	sp, #148	; 0x94
 8002f56:	bcf0      	pop	{r4, r5, r6, r7}
 8002f58:	46bb      	mov	fp, r7
 8002f5a:	46b2      	mov	sl, r6
 8002f5c:	46a9      	mov	r9, r5
 8002f5e:	46a0      	mov	r8, r4
 8002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        solve_recursively(_inf_idx, _inf_idx_size, _u + n0, uSize - n0, _x + n0, xSize - n0, last);
 8002f62:	4651      	mov	r1, sl
 8002f64:	465a      	mov	r2, fp
        int n0 = n / 2;
 8002f66:	0ffc      	lsrs	r4, r7, #31
 8002f68:	19e4      	adds	r4, r4, r7
 8002f6a:	1064      	asrs	r4, r4, #1
        solve_recursively(_inf_idx, _inf_idx_size, _u + n0, uSize - n0, _x + n0, xSize - n0, last);
 8002f6c:	192e      	adds	r6, r5, r4
 8002f6e:	9102      	str	r1, [sp, #8]
 8002f70:	1b39      	subs	r1, r7, r4
 8002f72:	9101      	str	r1, [sp, #4]
 8002f74:	1b1b      	subs	r3, r3, r4
 8002f76:	4649      	mov	r1, r9
 8002f78:	1912      	adds	r2, r2, r4
 8002f7a:	9600      	str	r6, [sp, #0]
 8002f7c:	f7ff ffc8 	bl	8002f10 <solve_recursively>
        for (int i = 0; i < n0; i++) {
 8002f80:	2f01      	cmp	r7, #1
 8002f82:	dd22      	ble.n	8002fca <solve_recursively+0xba>
 8002f84:	ab04      	add	r3, sp, #16
 8002f86:	469c      	mov	ip, r3
 8002f88:	001f      	movs	r7, r3
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	2300      	movs	r3, #0
            x_first[i] = _x[i] ^ _x[i + n0];
 8002f8e:	5cea      	ldrb	r2, [r5, r3]
 8002f90:	5cf0      	ldrb	r0, [r6, r3]
        for (int i = 0; i < n0; i++) {
 8002f92:	3301      	adds	r3, #1
            x_first[i] = _x[i] ^ _x[i + n0];
 8002f94:	4042      	eors	r2, r0
 8002f96:	700a      	strb	r2, [r1, #0]
        for (int i = 0; i < n0; i++) {
 8002f98:	3101      	adds	r1, #1
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	dcf7      	bgt.n	8002f8e <solve_recursively+0x7e>
        solve_recursively(_inf_idx, _inf_idx_size, _u, n0, x_first, n0, last - n0);
 8002f9e:	4653      	mov	r3, sl
 8002fa0:	1b1b      	subs	r3, r3, r4
 8002fa2:	9302      	str	r3, [sp, #8]
 8002fa4:	4663      	mov	r3, ip
 8002fa6:	465a      	mov	r2, fp
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4649      	mov	r1, r9
 8002fac:	0023      	movs	r3, r4
 8002fae:	4640      	mov	r0, r8
 8002fb0:	9401      	str	r4, [sp, #4]
 8002fb2:	f7ff ffad 	bl	8002f10 <solve_recursively>
 8002fb6:	2300      	movs	r3, #0
            _x[i] = _x[n0 + i] ^ x_first[i];
 8002fb8:	5cf2      	ldrb	r2, [r6, r3]
 8002fba:	7839      	ldrb	r1, [r7, #0]
 8002fbc:	3701      	adds	r7, #1
 8002fbe:	404a      	eors	r2, r1
 8002fc0:	54ea      	strb	r2, [r5, r3]
        for (int i = 0; i < n0; i++) {
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	dcf7      	bgt.n	8002fb8 <solve_recursively+0xa8>
 8002fc8:	e7c4      	b.n	8002f54 <solve_recursively+0x44>
        solve_recursively(_inf_idx, _inf_idx_size, _u, n0, x_first, n0, last - n0);
 8002fca:	4653      	mov	r3, sl
 8002fcc:	1b1b      	subs	r3, r3, r4
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	ab04      	add	r3, sp, #16
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	465a      	mov	r2, fp
 8002fd6:	0023      	movs	r3, r4
 8002fd8:	4649      	mov	r1, r9
 8002fda:	4640      	mov	r0, r8
 8002fdc:	9401      	str	r4, [sp, #4]
 8002fde:	f7ff ff97 	bl	8002f10 <solve_recursively>
        for (int i = 0; i < n0; i++) {
 8002fe2:	e7b7      	b.n	8002f54 <solve_recursively+0x44>

08002fe4 <stdpolar_encode_systematic_noperm>:
void stdpolar_encode_systematic_noperm(uint8_t* _iwd, uint16_t _iwd_size, const uint8_t* _frozen_indicator, uint16_t _frozen_indicator_size, uint8_t* ret) {
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	4647      	mov	r7, r8
 8002fe8:	46ce      	mov	lr, r9
 8002fea:	0015      	movs	r5, r2
	uint16_t inf_idx[256] = {0};
 8002fec:	2280      	movs	r2, #128	; 0x80
void stdpolar_encode_systematic_noperm(uint8_t* _iwd, uint16_t _iwd_size, const uint8_t* _frozen_indicator, uint16_t _frozen_indicator_size, uint8_t* ret) {
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	4c27      	ldr	r4, [pc, #156]	; (8003090 <stdpolar_encode_systematic_noperm+0xac>)
	uint16_t inf_idx[256] = {0};
 8002ff2:	2100      	movs	r1, #0
void stdpolar_encode_systematic_noperm(uint8_t* _iwd, uint16_t _iwd_size, const uint8_t* _frozen_indicator, uint16_t _frozen_indicator_size, uint8_t* ret) {
 8002ff4:	44a5      	add	sp, r4
	uint16_t inf_idx[256] = {0};
 8002ff6:	0092      	lsls	r2, r2, #2
void stdpolar_encode_systematic_noperm(uint8_t* _iwd, uint16_t _iwd_size, const uint8_t* _frozen_indicator, uint16_t _frozen_indicator_size, uint8_t* ret) {
 8002ff8:	4680      	mov	r8, r0
	uint16_t inf_idx[256] = {0};
 8002ffa:	a844      	add	r0, sp, #272	; 0x110
void stdpolar_encode_systematic_noperm(uint8_t* _iwd, uint16_t _iwd_size, const uint8_t* _frozen_indicator, uint16_t _frozen_indicator_size, uint8_t* ret) {
 8002ffc:	001f      	movs	r7, r3
	uint16_t inf_idx[256] = {0};
 8002ffe:	f000 fac2 	bl	8003586 <memset>
    uint8_t u[256] = {0};// = (uint8_t*) malloc (sizeof(uint8_t) * n_polar);
 8003002:	2300      	movs	r3, #0
 8003004:	22fc      	movs	r2, #252	; 0xfc
 8003006:	2100      	movs	r1, #0
 8003008:	a805      	add	r0, sp, #20
 800300a:	9304      	str	r3, [sp, #16]
 800300c:	f000 fabb 	bl	8003586 <memset>
    for (; i < n_polar; i++) {
 8003010:	2f00      	cmp	r7, #0
 8003012:	d03a      	beq.n	800308a <stdpolar_encode_systematic_noperm+0xa6>
 8003014:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 8003016:	2401      	movs	r4, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	469c      	mov	ip, r3
    uint16_t i = 0, j = 0;
 800301c:	2100      	movs	r1, #0
            iwd_s[i] = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	1e6a      	subs	r2, r5, #1
 8003022:	e009      	b.n	8003038 <stdpolar_encode_systematic_noperm+0x54>
        u[i] = 0;
 8003024:	260f      	movs	r6, #15
            iwd_s[i] = 0;
 8003026:	4660      	mov	r0, ip
        u[i] = 0;
 8003028:	446e      	add	r6, sp
 800302a:	1936      	adds	r6, r6, r4
 800302c:	b2a5      	uxth	r5, r4
            iwd_s[i] = 0;
 800302e:	5503      	strb	r3, [r0, r4]
        u[i] = 0;
 8003030:	7033      	strb	r3, [r6, #0]
    for (; i < n_polar; i++) {
 8003032:	3401      	adds	r4, #1
 8003034:	42af      	cmp	r7, r5
 8003036:	d918      	bls.n	800306a <stdpolar_encode_systematic_noperm+0x86>
        if (_frozen_indicator[i] == 1) {
 8003038:	5d15      	ldrb	r5, [r2, r4]
 800303a:	2d01      	cmp	r5, #1
 800303c:	d1f2      	bne.n	8003024 <stdpolar_encode_systematic_noperm+0x40>
            iwd_s[i] = _iwd[j];
 800303e:	4645      	mov	r5, r8
 8003040:	4660      	mov	r0, ip
 8003042:	5c6d      	ldrb	r5, [r5, r1]
            inf_idx[j] = i + 1;
 8003044:	466e      	mov	r6, sp
            iwd_s[i] = _iwd[j];
 8003046:	5505      	strb	r5, [r0, r4]
            inf_idx[j] = i + 1;
 8003048:	0048      	lsls	r0, r1, #1
 800304a:	4681      	mov	r9, r0
 800304c:	2088      	movs	r0, #136	; 0x88
 800304e:	0040      	lsls	r0, r0, #1
 8003050:	1836      	adds	r6, r6, r0
 8003052:	4648      	mov	r0, r9
 8003054:	b2a5      	uxth	r5, r4
 8003056:	5235      	strh	r5, [r6, r0]
        u[i] = 0;
 8003058:	260f      	movs	r6, #15
 800305a:	446e      	add	r6, sp
 800305c:	1936      	adds	r6, r6, r4
            j++;
 800305e:	3101      	adds	r1, #1
 8003060:	b289      	uxth	r1, r1
        u[i] = 0;
 8003062:	7033      	strb	r3, [r6, #0]
    for (; i < n_polar; i++) {
 8003064:	3401      	adds	r4, #1
 8003066:	42af      	cmp	r7, r5
 8003068:	d8e6      	bhi.n	8003038 <stdpolar_encode_systematic_noperm+0x54>
    solve_recursively(inf_idx, j, u, n_polar, iwd_s, n_polar, n_polar);
 800306a:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 800306c:	9702      	str	r7, [sp, #8]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	9701      	str	r7, [sp, #4]
 8003072:	003b      	movs	r3, r7
 8003074:	aa04      	add	r2, sp, #16
 8003076:	a844      	add	r0, sp, #272	; 0x110
 8003078:	f7ff ff4a 	bl	8002f10 <solve_recursively>
}
 800307c:	23c5      	movs	r3, #197	; 0xc5
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	449d      	add	sp, r3
 8003082:	bcc0      	pop	{r6, r7}
 8003084:	46b9      	mov	r9, r7
 8003086:	46b0      	mov	r8, r6
 8003088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t i = 0, j = 0;
 800308a:	2100      	movs	r1, #0
 800308c:	e7ed      	b.n	800306a <stdpolar_encode_systematic_noperm+0x86>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	fffffcec 	.word	0xfffffcec

08003094 <add_crc>:


void add_crc(uint32_t polynom, uint8_t* a, uint16_t size) {
 8003094:	b570      	push	{r4, r5, r6, lr}
    uint32_t reg = 0;
    for (int i = 0; i < size; i++) {
 8003096:	2a00      	cmp	r2, #0
 8003098:	d018      	beq.n	80030cc <add_crc+0x38>
 800309a:	2500      	movs	r5, #0
    uint32_t reg = 0;
 800309c:	2400      	movs	r4, #0
        reg ^= a[i];
        if (reg & 1) reg = (reg >> 1) ^ polynom;
 800309e:	2601      	movs	r6, #1
        reg ^= a[i];
 80030a0:	5d4b      	ldrb	r3, [r1, r5]
 80030a2:	4063      	eors	r3, r4
        else reg >>= 1;
 80030a4:	085c      	lsrs	r4, r3, #1
        if (reg & 1) reg = (reg >> 1) ^ polynom;
 80030a6:	421e      	tst	r6, r3
 80030a8:	d000      	beq.n	80030ac <add_crc+0x18>
 80030aa:	4044      	eors	r4, r0
    for (int i = 0; i < size; i++) {
 80030ac:	3501      	adds	r5, #1
 80030ae:	4295      	cmp	r5, r2
 80030b0:	dbf6      	blt.n	80030a0 <add_crc+0xc>
 80030b2:	05a4      	lsls	r4, r4, #22
 80030b4:	0da4      	lsrs	r4, r4, #22
    }
    reg = reg & 0x3FF;

    for (int i = 0; i < 10; i++)
 80030b6:	188a      	adds	r2, r1, r2
 80030b8:	2300      	movs	r3, #0
        a[size + i] = (reg >> i) & 1;
 80030ba:	2101      	movs	r1, #1
 80030bc:	0020      	movs	r0, r4
 80030be:	40d8      	lsrs	r0, r3
 80030c0:	4008      	ands	r0, r1
 80030c2:	54d0      	strb	r0, [r2, r3]
    for (int i = 0; i < 10; i++)
 80030c4:	3301      	adds	r3, #1
 80030c6:	2b0a      	cmp	r3, #10
 80030c8:	d1f8      	bne.n	80030bc <add_crc+0x28>
}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < size; i++) {
 80030cc:	2400      	movs	r4, #0
 80030ce:	e7f2      	b.n	80030b6 <add_crc+0x22>

080030d0 <encode96>:
void encode96(uint8_t* in, uint8_t* out) {
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	46c6      	mov	lr, r8
 80030d4:	b500      	push	{lr}
 80030d6:	b0ee      	sub	sp, #440	; 0x1b8
 80030d8:	0007      	movs	r7, r0
 80030da:	4688      	mov	r8, r1
	memset(data_bits, 0, sizeof(data_bits));
 80030dc:	22aa      	movs	r2, #170	; 0xaa
 80030de:	2100      	movs	r1, #0
 80030e0:	a803      	add	r0, sp, #12
 80030e2:	f000 fa50 	bl	8003586 <memset>
			out[i * 8 + bit] = (in[i] >> bit) & 1;
 80030e6:	2601      	movs	r6, #1
	memset(data_bits, 0, sizeof(data_bits));
 80030e8:	2100      	movs	r1, #0
 80030ea:	ac03      	add	r4, sp, #12
			out[i * 8 + bit] = (in[i] >> bit) & 1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	5c7d      	ldrb	r5, [r7, r1]
 80030f0:	002a      	movs	r2, r5
 80030f2:	411a      	asrs	r2, r3
 80030f4:	4032      	ands	r2, r6
 80030f6:	54e2      	strb	r2, [r4, r3]
		for (; bit < 8; bit++) {
 80030f8:	3301      	adds	r3, #1
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d1f8      	bne.n	80030f0 <encode96+0x20>
	for (; i < size; i++) {
 80030fe:	3101      	adds	r1, #1
 8003100:	3408      	adds	r4, #8
 8003102:	290c      	cmp	r1, #12
 8003104:	d1f2      	bne.n	80030ec <encode96+0x1c>
	add_crc(0x327, data_bits, 96);
 8003106:	a903      	add	r1, sp, #12
 8003108:	2260      	movs	r2, #96	; 0x60
 800310a:	480b      	ldr	r0, [pc, #44]	; (8003138 <encode96+0x68>)
 800310c:	f7ff ffc2 	bl	8003094 <add_crc>
	stdpolar_encode_systematic_noperm(data_bits, 106, frozen_indicator_96, sizeof(frozen_indicator_96), out_bits);
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	ac2e      	add	r4, sp, #184	; 0xb8
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	a803      	add	r0, sp, #12
 8003118:	216a      	movs	r1, #106	; 0x6a
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <encode96+0x6c>)
 800311c:	9400      	str	r4, [sp, #0]
 800311e:	f7ff ff61 	bl	8002fe4 <stdpolar_encode_systematic_noperm>
	bits_to_byties(out_bits, 256, out);
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	4642      	mov	r2, r8
 8003126:	0020      	movs	r0, r4
 8003128:	0049      	lsls	r1, r1, #1
 800312a:	f7ff fed3 	bl	8002ed4 <bits_to_byties>
}
 800312e:	b06e      	add	sp, #440	; 0x1b8
 8003130:	bc80      	pop	{r7}
 8003132:	46b8      	mov	r8, r7
 8003134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000327 	.word	0x00000327
 800313c:	08003c4c 	.word	0x08003c4c

08003140 <encode64>:
void encode64(uint8_t* in, uint8_t* out) {
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	46c6      	mov	lr, r8
 8003144:	2700      	movs	r7, #0
 8003146:	4688      	mov	r8, r1
			out[i * 8 + bit] = (in[i] >> bit) & 1;
 8003148:	2601      	movs	r6, #1
void encode64(uint8_t* in, uint8_t* out) {
 800314a:	b500      	push	{lr}
 800314c:	b0b6      	sub	sp, #216	; 0xd8
	for (; i < size; i++) {
 800314e:	ac03      	add	r4, sp, #12
			out[i * 8 + bit] = (in[i] >> bit) & 1;
 8003150:	2300      	movs	r3, #0
 8003152:	5dc5      	ldrb	r5, [r0, r7]
 8003154:	002a      	movs	r2, r5
 8003156:	411a      	asrs	r2, r3
 8003158:	4032      	ands	r2, r6
 800315a:	54e2      	strb	r2, [r4, r3]
		for (; bit < 8; bit++) {
 800315c:	3301      	adds	r3, #1
 800315e:	2b08      	cmp	r3, #8
 8003160:	d1f8      	bne.n	8003154 <encode64+0x14>
	for (; i < size; i++) {
 8003162:	3701      	adds	r7, #1
 8003164:	3408      	adds	r4, #8
 8003166:	2f08      	cmp	r7, #8
 8003168:	d1f2      	bne.n	8003150 <encode64+0x10>
	add_crc(0x327, data_bits, 64);
 800316a:	a903      	add	r1, sp, #12
	stdpolar_encode_systematic_noperm(data_bits, 74, frozen_indicator_64, sizeof(frozen_indicator_64), out_bits);
 800316c:	ac16      	add	r4, sp, #88	; 0x58
	add_crc(0x327, data_bits, 64);
 800316e:	2240      	movs	r2, #64	; 0x40
 8003170:	4809      	ldr	r0, [pc, #36]	; (8003198 <encode64+0x58>)
 8003172:	f7ff ff8f 	bl	8003094 <add_crc>
	stdpolar_encode_systematic_noperm(data_bits, 74, frozen_indicator_64, sizeof(frozen_indicator_64), out_bits);
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	a803      	add	r0, sp, #12
 800317a:	214a      	movs	r1, #74	; 0x4a
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <encode64+0x5c>)
 800317e:	9400      	str	r4, [sp, #0]
 8003180:	f7ff ff30 	bl	8002fe4 <stdpolar_encode_systematic_noperm>
	bits_to_byties(out_bits, 128, out);
 8003184:	4642      	mov	r2, r8
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	0020      	movs	r0, r4
 800318a:	f7ff fea3 	bl	8002ed4 <bits_to_byties>
}
 800318e:	b036      	add	sp, #216	; 0xd8
 8003190:	bc80      	pop	{r7}
 8003192:	46b8      	mov	r8, r7
 8003194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	00000327 	.word	0x00000327
 800319c:	08003bcc 	.word	0x08003bcc

080031a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031a0:	480d      	ldr	r0, [pc, #52]	; (80031d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a4:	480d      	ldr	r0, [pc, #52]	; (80031dc <LoopForever+0x6>)
  ldr r1, =_edata
 80031a6:	490e      	ldr	r1, [pc, #56]	; (80031e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031a8:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <LoopForever+0xe>)
  movs r3, #0
 80031aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ac:	e002      	b.n	80031b4 <LoopCopyDataInit>

080031ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b2:	3304      	adds	r3, #4

080031b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b8:	d3f9      	bcc.n	80031ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031bc:	4c0b      	ldr	r4, [pc, #44]	; (80031ec <LoopForever+0x16>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c0:	e001      	b.n	80031c6 <LoopFillZerobss>

080031c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c4:	3204      	adds	r2, #4

080031c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c8:	d3fb      	bcc.n	80031c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031ca:	f7fe ff83 	bl	80020d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80031ce:	f000 f9ad 	bl	800352c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031d2:	f7fe fa47 	bl	8001664 <main>

080031d6 <LoopForever>:

LoopForever:
    b LoopForever
 80031d6:	e7fe      	b.n	80031d6 <LoopForever>
  ldr   r0, =_estack
 80031d8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80031dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80031e4:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 80031e8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80031ec:	20000388 	.word	0x20000388

080031f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC1_IRQHandler>
	...

080031f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80031f6:	680c      	ldr	r4, [r1, #0]
{
 80031f8:	46de      	mov	lr, fp
 80031fa:	4657      	mov	r7, sl
 80031fc:	464e      	mov	r6, r9
 80031fe:	4645      	mov	r5, r8
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003200:	43e2      	mvns	r2, r4
  pinpos = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	4693      	mov	fp, r2
{
 8003206:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003208:	2c00      	cmp	r4, #0
 800320a:	d11a      	bne.n	8003242 <LL_GPIO_Init+0x4e>
 800320c:	e055      	b.n	80032ba <LL_GPIO_Init+0xc6>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800320e:	68c2      	ldr	r2, [r0, #12]
 8003210:	4692      	mov	sl, r2
 8003212:	002a      	movs	r2, r5
 8003214:	436a      	muls	r2, r5
 8003216:	0057      	lsls	r7, r2, #1
 8003218:	18bf      	adds	r7, r7, r2
 800321a:	43fd      	mvns	r5, r7
 800321c:	4656      	mov	r6, sl
 800321e:	46a8      	mov	r8, r5
 8003220:	690d      	ldr	r5, [r1, #16]
 8003222:	43be      	bics	r6, r7
 8003224:	4355      	muls	r5, r2
 8003226:	4335      	orrs	r5, r6
 8003228:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800322a:	4647      	mov	r7, r8
 800322c:	6805      	ldr	r5, [r0, #0]
 800322e:	402f      	ands	r7, r5
 8003230:	003d      	movs	r5, r7
 8003232:	4667      	mov	r7, ip
 8003234:	437a      	muls	r2, r7
 8003236:	432a      	orrs	r2, r5
 8003238:	6002      	str	r2, [r0, #0]
 800323a:	0022      	movs	r2, r4
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800323c:	3301      	adds	r3, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800323e:	40da      	lsrs	r2, r3
 8003240:	d03b      	beq.n	80032ba <LL_GPIO_Init+0xc6>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003242:	2201      	movs	r2, #1
 8003244:	0025      	movs	r5, r4
 8003246:	409a      	lsls	r2, r3
 8003248:	4015      	ands	r5, r2
    if (currentpin != 0x00u)
 800324a:	4214      	tst	r4, r2
 800324c:	d0f5      	beq.n	800323a <LL_GPIO_Init+0x46>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800324e:	684a      	ldr	r2, [r1, #4]
 8003250:	4694      	mov	ip, r2
 8003252:	3a01      	subs	r2, #1
 8003254:	2a01      	cmp	r2, #1
 8003256:	d8da      	bhi.n	800320e <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003258:	002a      	movs	r2, r5
 800325a:	436a      	muls	r2, r5
 800325c:	0056      	lsls	r6, r2, #1
 800325e:	46b1      	mov	r9, r6
 8003260:	4491      	add	r9, r2
 8003262:	464e      	mov	r6, r9
 8003264:	43f6      	mvns	r6, r6
 8003266:	46b0      	mov	r8, r6
 8003268:	688e      	ldr	r6, [r1, #8]
 800326a:	6887      	ldr	r7, [r0, #8]
 800326c:	4356      	muls	r6, r2
 800326e:	46b2      	mov	sl, r6
 8003270:	464e      	mov	r6, r9
 8003272:	43b7      	bics	r7, r6
 8003274:	4656      	mov	r6, sl
 8003276:	4337      	orrs	r7, r6
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003278:	465e      	mov	r6, fp
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800327a:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800327c:	6847      	ldr	r7, [r0, #4]
 800327e:	403e      	ands	r6, r7
 8003280:	68cf      	ldr	r7, [r1, #12]
 8003282:	4367      	muls	r7, r4
 8003284:	4337      	orrs	r7, r6
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003286:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003288:	6047      	str	r7, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800328a:	4356      	muls	r6, r2
 800328c:	46b2      	mov	sl, r6
 800328e:	464e      	mov	r6, r9
 8003290:	68c7      	ldr	r7, [r0, #12]
 8003292:	43b7      	bics	r7, r6
 8003294:	4656      	mov	r6, sl
 8003296:	4337      	orrs	r7, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003298:	4666      	mov	r6, ip
 800329a:	60c7      	str	r7, [r0, #12]
 800329c:	2e02      	cmp	r6, #2
 800329e:	d1c4      	bne.n	800322a <LL_GPIO_Init+0x36>
        if (currentpin < LL_GPIO_PIN_8)
 80032a0:	2dff      	cmp	r5, #255	; 0xff
 80032a2:	d811      	bhi.n	80032c8 <LL_GPIO_Init+0xd4>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80032a4:	0017      	movs	r7, r2
 80032a6:	4357      	muls	r7, r2
 80032a8:	6a05      	ldr	r5, [r0, #32]
 80032aa:	013e      	lsls	r6, r7, #4
 80032ac:	1bf6      	subs	r6, r6, r7
 80032ae:	43b5      	bics	r5, r6
 80032b0:	694e      	ldr	r6, [r1, #20]
 80032b2:	4377      	muls	r7, r6
 80032b4:	433d      	orrs	r5, r7
 80032b6:	6205      	str	r5, [r0, #32]
}
 80032b8:	e7b7      	b.n	800322a <LL_GPIO_Init+0x36>
  }

  return (SUCCESS);
}
 80032ba:	2000      	movs	r0, #0
 80032bc:	bcf0      	pop	{r4, r5, r6, r7}
 80032be:	46bb      	mov	fp, r7
 80032c0:	46b2      	mov	sl, r6
 80032c2:	46a9      	mov	r9, r5
 80032c4:	46a0      	mov	r8, r4
 80032c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80032c8:	0a2d      	lsrs	r5, r5, #8
 80032ca:	436d      	muls	r5, r5
 80032cc:	436d      	muls	r5, r5
 80032ce:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80032d0:	012e      	lsls	r6, r5, #4
 80032d2:	1b76      	subs	r6, r6, r5
 80032d4:	43b7      	bics	r7, r6
 80032d6:	694e      	ldr	r6, [r1, #20]
 80032d8:	4375      	muls	r5, r6
 80032da:	433d      	orrs	r5, r7
 80032dc:	6245      	str	r5, [r0, #36]	; 0x24
}
 80032de:	e7a4      	b.n	800322a <LL_GPIO_Init+0x36>

080032e0 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032e0:	230c      	movs	r3, #12
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <RCC_GetSystemClockFreq+0x4c>)
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	6851      	ldr	r1, [r2, #4]
 80032e8:	400b      	ands	r3, r1
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d01b      	beq.n	8003326 <RCC_GetSystemClockFreq+0x46>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d117      	bne.n	8003322 <RCC_GetSystemClockFreq+0x42>
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	6850      	ldr	r0, [r2, #4]
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	4018      	ands	r0, r3
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80032fa:	4243      	negs	r3, r0
 80032fc:	4158      	adcs	r0, r3
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <RCC_GetSystemClockFreq+0x50>)
 8003300:	4240      	negs	r0, r0
 8003302:	4018      	ands	r0, r3
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <RCC_GetSystemClockFreq+0x54>)
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003306:	240f      	movs	r4, #15
 8003308:	469c      	mov	ip, r3
 800330a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800330c:	4460      	add	r0, ip
 800330e:	4021      	ands	r1, r4
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003310:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003312:	6855      	ldr	r5, [r2, #4]
 8003314:	f7fc ff00 	bl	8000118 <__udivsi3>
 8003318:	0cad      	lsrs	r5, r5, #18
 800331a:	402c      	ands	r4, r5
 800331c:	3402      	adds	r4, #2
 800331e:	4360      	muls	r0, r4
}
 8003320:	bd70      	pop	{r4, r5, r6, pc}
      frequency = HSI_VALUE;
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <RCC_GetSystemClockFreq+0x58>)
  return frequency;
 8003324:	e7fc      	b.n	8003320 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8003326:	4803      	ldr	r0, [pc, #12]	; (8003334 <RCC_GetSystemClockFreq+0x54>)
 8003328:	e7fa      	b.n	8003320 <RCC_GetSystemClockFreq+0x40>
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40021000 	.word	0x40021000
 8003330:	000f4240 	.word	0x000f4240
 8003334:	002dc6c0 	.word	0x002dc6c0
 8003338:	007a1200 	.word	0x007a1200

0800333c <LL_RCC_GetUSARTClockFreq>:
{
 800333c:	0003      	movs	r3, r0
 800333e:	b510      	push	{r4, lr}
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003340:	2000      	movs	r0, #0
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003342:	2b00      	cmp	r3, #0
 8003344:	d117      	bne.n	8003376 <LL_RCC_GetUSARTClockFreq+0x3a>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003346:	4c16      	ldr	r4, [pc, #88]	; (80033a0 <LL_RCC_GetUSARTClockFreq+0x64>)
 8003348:	3303      	adds	r3, #3
 800334a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800334c:	4013      	ands	r3, r2
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800334e:	2b02      	cmp	r3, #2
 8003350:	d01d      	beq.n	800338e <LL_RCC_GetUSARTClockFreq+0x52>
 8003352:	2b03      	cmp	r3, #3
 8003354:	d013      	beq.n	800337e <LL_RCC_GetUSARTClockFreq+0x42>
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00e      	beq.n	8003378 <LL_RCC_GetUSARTClockFreq+0x3c>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800335a:	f7ff ffc1 	bl	80032e0 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800335e:	6862      	ldr	r2, [r4, #4]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <LL_RCC_GetUSARTClockFreq+0x68>)
 8003362:	0612      	lsls	r2, r2, #24
 8003364:	0f12      	lsrs	r2, r2, #28
 8003366:	5c8a      	ldrb	r2, [r1, r2]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800336c:	055b      	lsls	r3, r3, #21
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <LL_RCC_GetUSARTClockFreq+0x6c>)
 8003370:	0f5b      	lsrs	r3, r3, #29
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	40d8      	lsrs	r0, r3
}
 8003376:	bd10      	pop	{r4, pc}
        usart_frequency = RCC_GetSystemClockFreq();
 8003378:	f7ff ffb2 	bl	80032e0 <RCC_GetSystemClockFreq>
        break;
 800337c:	e7fb      	b.n	8003376 <LL_RCC_GetUSARTClockFreq+0x3a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800337e:	2202      	movs	r2, #2
 8003380:	0010      	movs	r0, r2
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	4018      	ands	r0, r3
        if (LL_RCC_HSI_IsReady())
 8003386:	421a      	tst	r2, r3
 8003388:	d0f5      	beq.n	8003376 <LL_RCC_GetUSARTClockFreq+0x3a>
          usart_frequency = HSI_VALUE;
 800338a:	4808      	ldr	r0, [pc, #32]	; (80033ac <LL_RCC_GetUSARTClockFreq+0x70>)
 800338c:	e7f3      	b.n	8003376 <LL_RCC_GetUSARTClockFreq+0x3a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800338e:	0018      	movs	r0, r3
 8003390:	6a22      	ldr	r2, [r4, #32]
 8003392:	4010      	ands	r0, r2
        if (LL_RCC_LSE_IsReady())
 8003394:	4213      	tst	r3, r2
 8003396:	d0ee      	beq.n	8003376 <LL_RCC_GetUSARTClockFreq+0x3a>
          usart_frequency = LSE_VALUE;
 8003398:	2080      	movs	r0, #128	; 0x80
 800339a:	0200      	lsls	r0, r0, #8
 800339c:	e7eb      	b.n	8003376 <LL_RCC_GetUSARTClockFreq+0x3a>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08003aa8 	.word	0x08003aa8
 80033a8:	08003ab8 	.word	0x08003ab8
 80033ac:	007a1200 	.word	0x007a1200

080033b0 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b4:	4290      	cmp	r0, r2
 80033b6:	d01f      	beq.n	80033f8 <LL_TIM_Init+0x48>
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <LL_TIM_Init+0x6c>)
 80033ba:	4290      	cmp	r0, r2
 80033bc:	d013      	beq.n	80033e6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <LL_TIM_Init+0x70>)
 80033c0:	4290      	cmp	r0, r2
 80033c2:	d014      	beq.n	80033ee <LL_TIM_Init+0x3e>
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <LL_TIM_Init+0x74>)
 80033c6:	4290      	cmp	r0, r2
 80033c8:	d01a      	beq.n	8003400 <LL_TIM_Init+0x50>
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <LL_TIM_Init+0x78>)
 80033cc:	4290      	cmp	r0, r2
 80033ce:	d017      	beq.n	8003400 <LL_TIM_Init+0x50>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033d0:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80033d2:	688b      	ldr	r3, [r1, #8]
 80033d4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033d6:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033d8:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033da:	2201      	movs	r2, #1
 80033dc:	6943      	ldr	r3, [r0, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80033e2:	2000      	movs	r0, #0
 80033e4:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033e6:	2270      	movs	r2, #112	; 0x70
 80033e8:	4393      	bics	r3, r2
 80033ea:	684a      	ldr	r2, [r1, #4]
 80033ec:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033ee:	4a0f      	ldr	r2, [pc, #60]	; (800342c <LL_TIM_Init+0x7c>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ca      	ldr	r2, [r1, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	e7eb      	b.n	80033d0 <LL_TIM_Init+0x20>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033f8:	2270      	movs	r2, #112	; 0x70
 80033fa:	4393      	bics	r3, r2
 80033fc:	684a      	ldr	r2, [r1, #4]
 80033fe:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <LL_TIM_Init+0x7c>)
 8003402:	4013      	ands	r3, r2
 8003404:	68ca      	ldr	r2, [r1, #12]
 8003406:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003408:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800340a:	688b      	ldr	r3, [r1, #8]
 800340c:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800340e:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003410:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003412:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003414:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003416:	e7e0      	b.n	80033da <LL_TIM_Init+0x2a>
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40002000 	.word	0x40002000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800
 800342c:	fffffcff 	.word	0xfffffcff

08003430 <LL_USART_Init>:
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003430:	6803      	ldr	r3, [r0, #0]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003432:	b570      	push	{r4, r5, r6, lr}
 8003434:	0004      	movs	r4, r0
 8003436:	000d      	movs	r5, r1
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003438:	07db      	lsls	r3, r3, #31
 800343a:	d41a      	bmi.n	8003472 <LL_USART_Init+0x42>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800343c:	684b      	ldr	r3, [r1, #4]
 800343e:	68c9      	ldr	r1, [r1, #12]
 8003440:	6802      	ldr	r2, [r0, #0]
 8003442:	430b      	orrs	r3, r1
 8003444:	6929      	ldr	r1, [r5, #16]
 8003446:	430b      	orrs	r3, r1
 8003448:	69a9      	ldr	r1, [r5, #24]
 800344a:	430b      	orrs	r3, r1
 800344c:	491b      	ldr	r1, [pc, #108]	; (80034bc <LL_USART_Init+0x8c>)
 800344e:	400a      	ands	r2, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003454:	6843      	ldr	r3, [r0, #4]
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <LL_USART_Init+0x90>)
 8003458:	4013      	ands	r3, r2
 800345a:	68aa      	ldr	r2, [r5, #8]
 800345c:	4313      	orrs	r3, r2
 800345e:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003460:	6883      	ldr	r3, [r0, #8]
 8003462:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <LL_USART_Init+0x94>)
 8003464:	4013      	ands	r3, r2
 8003466:	696a      	ldr	r2, [r5, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <LL_USART_Init+0x98>)
 800346e:	4298      	cmp	r0, r3
 8003470:	d001      	beq.n	8003476 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8003472:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8003474:	bd70      	pop	{r4, r5, r6, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003476:	2000      	movs	r0, #0
 8003478:	f7ff ff60 	bl	800333c <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800347c:	2800      	cmp	r0, #0
 800347e:	d0f8      	beq.n	8003472 <LL_USART_Init+0x42>
        && (USART_InitStruct->BaudRate != 0U))
 8003480:	6829      	ldr	r1, [r5, #0]
 8003482:	2900      	cmp	r1, #0
 8003484:	d0f5      	beq.n	8003472 <LL_USART_Init+0x42>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	69aa      	ldr	r2, [r5, #24]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	429a      	cmp	r2, r3
 800348e:	d008      	beq.n	80034a2 <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003490:	084b      	lsrs	r3, r1, #1
 8003492:	1818      	adds	r0, r3, r0
 8003494:	f7fc fe40 	bl	8000118 <__udivsi3>
 8003498:	0400      	lsls	r0, r0, #16
 800349a:	0c00      	lsrs	r0, r0, #16
 800349c:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 800349e:	2000      	movs	r0, #0
 80034a0:	e7e8      	b.n	8003474 <LL_USART_Init+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80034a2:	084b      	lsrs	r3, r1, #1
 80034a4:	0040      	lsls	r0, r0, #1
 80034a6:	18c0      	adds	r0, r0, r3
 80034a8:	f7fc fe36 	bl	8000118 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <LL_USART_Init+0x9c>)
 80034ae:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b0:	0700      	lsls	r0, r0, #28
 80034b2:	0f40      	lsrs	r0, r0, #29
 80034b4:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 80034b6:	60e0      	str	r0, [r4, #12]
 80034b8:	2000      	movs	r0, #0
 80034ba:	e7db      	b.n	8003474 <LL_USART_Init+0x44>
 80034bc:	ffff69f3 	.word	0xffff69f3
 80034c0:	ffffcfff 	.word	0xffffcfff
 80034c4:	fffffcff 	.word	0xfffffcff
 80034c8:	40013800 	.word	0x40013800
 80034cc:	0000fff0 	.word	0x0000fff0

080034d0 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80034d0:	21fa      	movs	r1, #250	; 0xfa
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80034d2:	b510      	push	{r4, lr}
 80034d4:	0089      	lsls	r1, r1, #2
 80034d6:	f7fc fe1f 	bl	8000118 <__udivsi3>
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034da:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <LL_Init1msTick+0x1c>)
 80034de:	3801      	subs	r0, #1
 80034e0:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e4:	3205      	adds	r2, #5
 80034e6:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	e000e010 	.word	0xe000e010

080034f0 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <LL_mDelay+0x2c>)
{
 80034f2:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80034f8:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
  {
    Delay++;
 80034fa:	1c43      	adds	r3, r0, #1
 80034fc:	1e59      	subs	r1, r3, #1
 80034fe:	418b      	sbcs	r3, r1
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003500:	2180      	movs	r1, #128	; 0x80
    Delay++;
 8003502:	18c0      	adds	r0, r0, r3
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003504:	0249      	lsls	r1, r1, #9
 8003506:	e002      	b.n	800350e <LL_mDelay+0x1e>
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	420b      	tst	r3, r1
 800350c:	d103      	bne.n	8003516 <LL_mDelay+0x26>
  while (Delay)
 800350e:	2800      	cmp	r0, #0
 8003510:	d1fa      	bne.n	8003508 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8003512:	b002      	add	sp, #8
 8003514:	4770      	bx	lr
      Delay--;
 8003516:	3801      	subs	r0, #1
 8003518:	e7f9      	b.n	800350e <LL_mDelay+0x1e>
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	e000e010 	.word	0xe000e010

08003520 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <LL_SetSystemCoreClock+0x8>)
 8003522:	6018      	str	r0, [r3, #0]
}
 8003524:	4770      	bx	lr
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000010 	.word	0x20000010

0800352c <__libc_init_array>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	2600      	movs	r6, #0
 8003530:	4d0c      	ldr	r5, [pc, #48]	; (8003564 <__libc_init_array+0x38>)
 8003532:	4c0d      	ldr	r4, [pc, #52]	; (8003568 <__libc_init_array+0x3c>)
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	42a6      	cmp	r6, r4
 800353a:	d109      	bne.n	8003550 <__libc_init_array+0x24>
 800353c:	2600      	movs	r6, #0
 800353e:	f000 f82b 	bl	8003598 <_init>
 8003542:	4d0a      	ldr	r5, [pc, #40]	; (800356c <__libc_init_array+0x40>)
 8003544:	4c0a      	ldr	r4, [pc, #40]	; (8003570 <__libc_init_array+0x44>)
 8003546:	1b64      	subs	r4, r4, r5
 8003548:	10a4      	asrs	r4, r4, #2
 800354a:	42a6      	cmp	r6, r4
 800354c:	d105      	bne.n	800355a <__libc_init_array+0x2e>
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	00b3      	lsls	r3, r6, #2
 8003552:	58eb      	ldr	r3, [r5, r3]
 8003554:	4798      	blx	r3
 8003556:	3601      	adds	r6, #1
 8003558:	e7ee      	b.n	8003538 <__libc_init_array+0xc>
 800355a:	00b3      	lsls	r3, r6, #2
 800355c:	58eb      	ldr	r3, [r5, r3]
 800355e:	4798      	blx	r3
 8003560:	3601      	adds	r6, #1
 8003562:	e7f2      	b.n	800354a <__libc_init_array+0x1e>
 8003564:	08003d54 	.word	0x08003d54
 8003568:	08003d54 	.word	0x08003d54
 800356c:	08003d54 	.word	0x08003d54
 8003570:	08003d58 	.word	0x08003d58

08003574 <memcpy>:
 8003574:	2300      	movs	r3, #0
 8003576:	b510      	push	{r4, lr}
 8003578:	429a      	cmp	r2, r3
 800357a:	d100      	bne.n	800357e <memcpy+0xa>
 800357c:	bd10      	pop	{r4, pc}
 800357e:	5ccc      	ldrb	r4, [r1, r3]
 8003580:	54c4      	strb	r4, [r0, r3]
 8003582:	3301      	adds	r3, #1
 8003584:	e7f8      	b.n	8003578 <memcpy+0x4>

08003586 <memset>:
 8003586:	0003      	movs	r3, r0
 8003588:	1882      	adds	r2, r0, r2
 800358a:	4293      	cmp	r3, r2
 800358c:	d100      	bne.n	8003590 <memset+0xa>
 800358e:	4770      	bx	lr
 8003590:	7019      	strb	r1, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	e7f9      	b.n	800358a <memset+0x4>
	...

08003598 <_init>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

080035a4 <_fini>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr
